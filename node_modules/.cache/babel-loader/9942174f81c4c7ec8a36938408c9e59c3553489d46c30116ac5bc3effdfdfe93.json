{"ast":null,"code":"import { web3 } from '@coral-xyz/anchor';\nimport { PublicKey, Transaction, Keypair, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport idlFile from '../idl/moon_wallet_program.json';\n\n// Export programID từ biến môi trường thay vì hardcode\nexport const programID = new PublicKey(process.env.REACT_APP_PROGRAM_ID || 'DeN1rBfabZezHPvrq9q7BbzUbZkrjnHE1kQDrPK8kWQ3');\n\n// Hằng số cho chương trình secp256r1\nexport const SECP256R1_PROGRAM_ID = new PublicKey('Secp256r1SigVerify1111111111111111111111111');\n\n// Hằng số cho Sysvar accounts với địa chỉ chính xác\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\n\n// Sửa lỗi type cho IDL\nconst idl = idlFile;\n\n// Cập nhật: Chương trình secp256r1 là một chương trình native của Solana, \n// nên không thể kiểm tra bằng getAccountInfo\nexport const checkSecp256r1Program = async () => {\n  // Chương trình native luôn tồn tại trên validator chính thức\n  // Chỉ cần đảm bảo validator được khởi động với tham số phù hợp\n  return true;\n};\n\n// Thêm hàm kiểm tra chương trình secp256r1 thông qua transaction thử nghiệm nếu cần\nexport const testSecp256r1Instruction = async connection => {\n  try {\n    // Tạo một cặp khóa giả lập cho việc kiểm tra\n    const testKeyPair = web3.Keypair.generate();\n\n    // Tạo một chữ ký và message giả\n    const testSignature = Buffer.alloc(64, 1); // Chữ ký giả 64 bytes\n    const testPubkey = Buffer.alloc(33, 2); // Khóa công khai giả 33 bytes\n    testPubkey[0] = 0x02; // Định dạng khóa nén\n    const testMessage = Buffer.alloc(32, 3); // Message hash giả 32 bytes\n\n    // Tạo instruction secp256r1 giả\n    const testInstruction = createSecp256r1Instruction(testPubkey, testSignature, testMessage);\n\n    // Tạo transaction giả với instruction trên\n    const testTx = new web3.Transaction().add(testInstruction);\n    testTx.feePayer = testKeyPair.publicKey;\n    const {\n      blockhash\n    } = await connection.getLatestBlockhash();\n    testTx.recentBlockhash = blockhash;\n\n    // Chỉ mô phỏng giao dịch, không gửi thật\n    await connection.simulateTransaction(testTx);\n\n    // Nếu không có lỗi \"program not found\", chương trình tồn tại\n    return true;\n  } catch (error) {\n    // Kiểm tra lỗi cụ thể\n    const errorMessage = error.toString();\n    // Nếu lỗi là về chương trình không tồn tại\n    if (errorMessage.includes(\"Attempt to load a program that does not exist\") || errorMessage.includes(\"Program not found\")) {\n      console.error(\"Chương trình secp256r1 không tồn tại:\", error);\n      return false;\n    }\n\n    // Nếu là lỗi khác (vd: chữ ký không hợp lệ), chương trình vẫn tồn tại\n    console.warn(\"Lỗi khi kiểm tra secp256r1, nhưng chương trình có thể tồn tại:\", error);\n    return true;\n  }\n};\n\n// Cập nhật lại hàm tạo transaction\nexport const createInitializeMultisigTx = async (threshold, multisigPDA, owner, feePayer, recoveryHash, credentialId) => {\n  try {\n    const ownerPubkey = owner instanceof Keypair ? owner.publicKey : owner;\n\n    // Sử dụng discriminator chính xác từ IDL\n    const discriminator = Buffer.from([220, 130, 117, 21, 27, 227, 78, 213]);\n\n    // Đảm bảo recoveryHash có đúng 32 bytes\n    if (recoveryHash.length !== 32) {\n      throw new Error(\"Recovery hash phải đúng 32 bytes\");\n    }\n    const thresholdBuffer = Buffer.from([threshold]);\n    const recoveryHashBuffer = Buffer.from(recoveryHash);\n\n    // Tạo buffer cho độ dài credential ID\n    const credentialIdLenBuffer = Buffer.alloc(4);\n    credentialIdLenBuffer.writeUInt32LE(credentialId.length, 0);\n\n    // Nối tất cả lại với nhau\n    const data = Buffer.concat([new Uint8Array(discriminator), new Uint8Array(thresholdBuffer), new Uint8Array(recoveryHashBuffer), new Uint8Array(credentialIdLenBuffer), new Uint8Array(credentialId)]);\n\n    // Tạo transaction instruction\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: multisigPDA,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: feePayer.publicKey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: programID,\n      data\n    });\n    const tx = new Transaction().add(instruction);\n    return tx;\n  } catch (error) {\n    console.error(\"Lỗi khi tạo transaction initialize multisig:\", error);\n    throw error;\n  }\n};\n\n// Thêm hàm compressPublicKey cho việc nén khóa công khai\nfunction compressPublicKey(uncompressedKey) {\n  // Đảm bảo khóa bắt đầu với byte 0x04 (không nén)\n  if (uncompressedKey[0] !== 0x04 || uncompressedKey.length !== 65) {\n    throw new Error('Khóa không đúng định dạng không nén ECDSA');\n  }\n\n  // Sử dụng Uint8Array để tránh lỗi type\n  const x = Buffer.from(uncompressedKey.subarray(1, 33));\n  const y = Buffer.from(uncompressedKey.subarray(33, 65));\n\n  // Tính prefix: 0x02 nếu y chẵn, 0x03 nếu y lẻ\n  const prefix = (y[31] & 1) === 0 ? 0x02 : 0x03;\n\n  // Tạo khóa nén: prefix (1 byte) + x (32 bytes)\n  const compressedKey = Buffer.alloc(33);\n  compressedKey[0] = prefix;\n  new Uint8Array(compressedKey).set(new Uint8Array(x), 1);\n  return compressedKey;\n}\n\n// Cập nhật hàm configure_webauthn với discriminator chính xác từ IDL\nexport const createConfigureWebAuthnTx = async (webauthnPubkey, multisigPDA, owner) => {\n  try {\n    // Lấy từ IDL: discriminator chính xác cho hàm configure_webauthn\n    const discriminator = Buffer.from([40, 149, 116, 224, 148, 48, 159, 54]);\n\n    // Nén khóa công khai từ 65 bytes xuống 33 bytes\n    let compressedKey;\n    if (webauthnPubkey.length === 65 && webauthnPubkey[0] === 0x04) {\n      // Khóa không nén, cần nén lại\n      compressedKey = compressPublicKey(webauthnPubkey);\n      console.log(\"Đã nén khóa từ 65 bytes xuống 33 bytes\");\n    } else if (webauthnPubkey.length === 33 && (webauthnPubkey[0] === 0x02 || webauthnPubkey[0] === 0x03)) {\n      // Khóa đã nén, sử dụng trực tiếp\n      compressedKey = webauthnPubkey;\n      console.log(\"Khóa đã ở định dạng nén (33 bytes)\");\n    } else {\n      console.warn(`Khóa công khai WebAuthn không đúng định dạng: ${webauthnPubkey.length} bytes`);\n      // Nếu không thể xử lý, tạo khóa giả\n      compressedKey = Buffer.alloc(33);\n      compressedKey[0] = 0x02; // Prefix cho khóa nén\n      if (webauthnPubkey.length > 0) {\n        // Sao chép dữ liệu nếu có\n        new Uint8Array(compressedKey).set(new Uint8Array(webauthnPubkey.subarray(0, Math.min(webauthnPubkey.length, 32))), 1);\n      }\n    }\n    console.log(\"Khóa công khai WebAuthn (nén):\", compressedKey.toString('hex'));\n    console.log(\"Độ dài khóa (bytes):\", compressedKey.length);\n\n    // Tạo dữ liệu instruction\n    const data = Buffer.concat([new Uint8Array(discriminator), new Uint8Array(compressedKey)]);\n\n    // Tạo instruction với đúng accounts theo IDL\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: multisigPDA,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: programID,\n      data\n    });\n    const tx = new Transaction().add(instruction);\n    return tx;\n  } catch (error) {\n    console.error(\"Lỗi khi tạo transaction configure webauthn:\", error);\n    throw error;\n  }\n};\n\n/**\n * Tạo transaction cho storePasswordHash\n */\nexport const createStorePasswordHashTx = async (passwordHash, multisigPDA, ownerPubkey) => {\n  const tx = new web3.Transaction();\n\n  // Sửa lỗi Buffer.from\n  const discriminator = Buffer.from([\n  // Thay thế với giá trị discriminator thực tế\n  125, 106, 39, 42, 99, 108, 43, 50]);\n\n  // Sửa lại cách tạo data buffer\n  const data = Buffer.concat([new Uint8Array(discriminator), new Uint8Array(Buffer.from(Array.from(passwordHash)))]);\n\n  // Thêm instruction để lưu password hash\n  tx.add(new web3.TransactionInstruction({\n    keys: [{\n      pubkey: multisigPDA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: ownerPubkey,\n      isSigner: true,\n      isWritable: false\n    }],\n    programId: programID,\n    data: data\n  }));\n  return tx;\n};\n\n/**\n * Tạo transaction xác thực WebAuthn\n */\nexport const createWebAuthnAuthTx = async (multisigPDA, ownerPubkey, webauthnSignature, authenticatorData, clientDataJSON) => {\n  const tx = new web3.Transaction();\n\n  // Thêm discriminator đúng cho verify_webauthn_auth\n  const instructionData = Buffer.concat([new Uint8Array(Buffer.from([234, 182, 165, 23, 186, 223, 208, 119])),\n  // discriminator từ IDL\n  new Uint8Array(Buffer.from(webauthnSignature)), new Uint8Array(Buffer.from(authenticatorData)), new Uint8Array(Buffer.from(clientDataJSON))]);\n  const instruction = new web3.TransactionInstruction({\n    keys: [{\n      pubkey: multisigPDA,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: ownerPubkey,\n      isSigner: false,\n      isWritable: false\n    }],\n    programId: programID,\n    data: instructionData\n  });\n  tx.add(instruction);\n  return tx;\n};\n\n// Tạo hàm mới createAddGuardianTx\nexport const createAddGuardianTx = (multisigPDA, guardianPDA, guardianPubkey, guardianName, recoveryHash, isOwner, webauthnPubkey) => {\n  try {\n    // Discriminator cho add_guardian\n    const discriminator = Buffer.from([167, 189, 170, 27, 74, 240, 201, 241]);\n\n    // Tạo buffer cho tên guardian\n    const nameBuffer = Buffer.from(guardianName);\n    const nameLenBuffer = Buffer.alloc(4);\n    nameLenBuffer.writeUInt32LE(nameBuffer.length, 0);\n\n    // Tạo buffer cho các tham số\n    const isOwnerByte = Buffer.from([isOwner ? 1 : 0]);\n\n    // Tạo buffers cho instruction data\n    const dataBuffers = [discriminator, guardianPubkey.toBuffer(), nameLenBuffer, nameBuffer, Buffer.from(recoveryHash)];\n\n    // Thêm isOwner\n    dataBuffers.push(isOwnerByte);\n\n    // Xử lý webauthn_pubkey (option)\n    if (webauthnPubkey && isOwner) {\n      // Some variant (1)\n      dataBuffers.push(Buffer.from([1]));\n\n      // Nén khóa công khai nếu cần\n      let compressedKey;\n      if (webauthnPubkey.length === 65 && webauthnPubkey[0] === 0x04) {\n        // Khóa không nén, cần nén lại\n        compressedKey = compressPublicKey(webauthnPubkey);\n      } else if (webauthnPubkey.length === 33 && (webauthnPubkey[0] === 0x02 || webauthnPubkey[0] === 0x03)) {\n        // Khóa đã nén, sử dụng trực tiếp\n        compressedKey = webauthnPubkey;\n      } else {\n        throw new Error(`Khóa công khai WebAuthn không đúng định dạng: ${webauthnPubkey.length} bytes`);\n      }\n      dataBuffers.push(compressedKey);\n    } else {\n      // None variant (0)\n      dataBuffers.push(Buffer.from([0]));\n    }\n\n    // Nối tất cả buffer lại với nhau\n    const data = Buffer.concat(dataBuffers.map(buffer => new Uint8Array(buffer)));\n\n    // Tạo instruction\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: multisigPDA,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: guardianPDA,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: guardianPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: programID,\n      data\n    });\n    return new Transaction().add(instruction);\n  } catch (error) {\n    console.error(\"Lỗi khi tạo transaction add guardian:\", error);\n    throw error;\n  }\n};\n\n// Thêm hằng số kích thước\nconst COMPRESSED_PUBKEY_SIZE = 33;\nconst SIGNATURE_SIZE = 64;\nconst DATA_START = 16; // 1 byte + 1 byte padding + 14 bytes offsets\nconst SIGNATURE_OFFSETS_START = 2;\n\n/**\n * Tạo instruction data cho chương trình Secp256r1SigVerify\n * @param message Tin nhắn gốc không hash\n * @param publicKey Khóa công khai nén\n * @param signature Chữ ký chuẩn hóa\n */\nexport const createSecp256r1Instruction = (message, publicKey, signature) => {\n  console.log(\"Tạo secp256r1 instruction với:\");\n  console.log(`- Message (${message.length} bytes):`, message.toString('hex'));\n  console.log(`- Public key (${publicKey.length} bytes):`, publicKey.toString('hex'));\n  console.log(`- Signature (${signature.length} bytes):`, signature.toString('hex'));\n\n  // Đảm bảo input đúng kích thước\n  if (publicKey.length !== COMPRESSED_PUBKEY_SIZE) {\n    console.error('Public key phải có đúng 33 bytes (dạng nén)');\n    throw new Error(`Public key phải có đúng 33 bytes, nhưng có ${publicKey.length} bytes`);\n  }\n\n  // Kiểm tra byte đầu tiên của khóa công khai\n  if (publicKey[0] !== 0x02 && publicKey[0] !== 0x03) {\n    console.error(`Byte đầu tiên của khóa công khai phải là 0x02 hoặc 0x03, nhưng là 0x${publicKey[0].toString(16)}`);\n\n    // Có thể cần chuyển đổi định dạng nếu khóa công khai không ở dạng nén\n    // Nhưng đây là lỗi nghiêm trọng, vì WebAuthn phải cung cấp khóa nén\n    throw new Error('Khóa công khai không ở định dạng nén đúng');\n  }\n  if (signature.length !== SIGNATURE_SIZE) {\n    console.error('Signature phải có đúng 64 bytes');\n    throw new Error(`Signature phải có đúng 64 bytes, nhưng có ${signature.length} bytes`);\n  }\n\n  // Tính các offset theo định nghĩa trong mã Rust\n  const SIGNATURE_OFFSETS_SERIALIZED_SIZE = 14;\n  const DATA_START = 2 + SIGNATURE_OFFSETS_SERIALIZED_SIZE; // 16\n\n  const pubkeyOffset = DATA_START; // 16\n  const signatureOffset = pubkeyOffset + COMPRESSED_PUBKEY_SIZE; // 16 + 33 = 49\n  const messageOffset = signatureOffset + SIGNATURE_SIZE; // 49 + 64 = 113\n\n  // Tính tổng kích thước dữ liệu\n  const totalSize = messageOffset + message.length;\n  const instructionData = Buffer.alloc(totalSize);\n\n  // Ghi số lượng chữ ký và padding\n  instructionData.writeUInt8(1, 0); // Số lượng chữ ký = 1\n  instructionData.writeUInt8(0, 1); // Padding\n\n  // Ghi offsets theo đúng định dạng\n  // Bytes 2-3: signature_offset (= 49 đối với 1 chữ ký)\n  instructionData.writeUInt16LE(signatureOffset, 2);\n  // Bytes 4-5: signature_instruction_index (= 0xFFFF)\n  instructionData.writeUInt16LE(0xFFFF, 4);\n  // Bytes 6-7: public_key_offset (= 16)\n  instructionData.writeUInt16LE(pubkeyOffset, 6);\n  // Bytes 8-9: public_key_instruction_index (= 0xFFFF)\n  instructionData.writeUInt16LE(0xFFFF, 8);\n  // Bytes 10-11: message_data_offset (= 113 đối với 1 chữ ký)\n  instructionData.writeUInt16LE(messageOffset, 10);\n  // Bytes 12-13: message_data_size (= độ dài message)\n  instructionData.writeUInt16LE(message.length, 12);\n  // Bytes 14-15: message_instruction_index (= 0xFFFF)\n  instructionData.writeUInt16LE(0xFFFF, 14);\n\n  // Ghi dữ liệu vào instruction\n  // Bytes 16-48: public_key (33 bytes) - sử dụng khóa gốc, không đảo ngược\n  publicKey.copy(instructionData, pubkeyOffset);\n  // Bytes 49-112: signature (64 bytes)\n  signature.copy(instructionData, signatureOffset);\n  // Bytes 113+: message (độ dài thay đổi)\n  message.copy(instructionData, messageOffset);\n  console.log('Secp256r1 instruction data:');\n  console.log('- Total size:', instructionData.length);\n  console.log('- Public key offset:', pubkeyOffset);\n  console.log('- Signature offset:', signatureOffset);\n  console.log('- Message offset:', messageOffset);\n  console.log('- Message size:', message.length);\n\n  // Log hex của 50 byte đầu tiên của instruction data\n  console.log('- Instruction data (50 bytes đầu):', instructionData.slice(0, 50).toString('hex'));\n  return new TransactionInstruction({\n    keys: [],\n    programId: SECP256R1_PROGRAM_ID,\n    data: instructionData\n  });\n};\n\n/**\n * Tạo transaction để chuyển tiền\n * @param multisigPDA PDA của ví multisig\n * @param guardianPDA PDA của guardian\n * @param destination Địa chỉ đích để chuyển token\n * @param amountLamports Số lượng lamports để chuyển\n * @param nonce Nonce tránh replay attack\n * @param timestamp Timestamp cho giao dịch\n * @param message Thông điệp gốc (chưa hash)\n * @param payer Người trả phí giao dịch\n */\nexport const createTransferTx = (multisigPDA, guardianPDA, destination, amountLamports, nonce, timestamp, message, payer) => {\n  try {\n    // Kiểm tra các input\n    if (!(multisigPDA instanceof PublicKey)) {\n      throw new Error(`multisigPDA không phải PublicKey: ${typeof multisigPDA}`);\n    }\n    if (!(guardianPDA instanceof PublicKey)) {\n      throw new Error(`guardianPDA không phải PublicKey: ${typeof guardianPDA}`);\n    }\n    if (!(destination instanceof PublicKey)) {\n      throw new Error(`destination không phải PublicKey: ${typeof destination}`);\n    }\n    if (!(payer instanceof PublicKey)) {\n      throw new Error(`payer không phải PublicKey: ${typeof payer}`);\n    }\n\n    // Đảm bảo các giá trị số hợp lệ\n    if (isNaN(amountLamports) || amountLamports <= 0) {\n      throw new Error(`amountLamports không hợp lệ: ${amountLamports}`);\n    }\n    if (isNaN(nonce) || nonce < 0) {\n      throw new Error(`nonce không hợp lệ: ${nonce}`);\n    }\n    if (isNaN(timestamp) || timestamp <= 0) {\n      throw new Error(`timestamp không hợp lệ: ${timestamp}`);\n    }\n\n    // Log thông tin debug để kiểm tra\n    console.log('Tạo transaction chuyển tiền với thông tin:');\n    console.log('- multisigPDA:', multisigPDA.toString());\n    console.log('- guardianPDA:', guardianPDA.toString());\n    console.log('- destination:', destination.toString());\n    console.log('- amountLamports:', amountLamports);\n    console.log('- nonce:', nonce);\n    console.log('- timestamp:', timestamp);\n    console.log('- message length:', message.length);\n    console.log('- payer:', payer.toString());\n\n    // Discriminator cho verify_and_execute\n    const discriminator = Buffer.from([80, 118, 102, 72, 125, 57, 218, 137]);\n\n    // Tham số cho 'action' - chuỗi \"transfer\"\n    const action = \"transfer\";\n    const actionBuffer = Buffer.from(action);\n    const actionLenBuffer = Buffer.alloc(4);\n    actionLenBuffer.writeUInt32LE(actionBuffer.length, 0);\n\n    // Encode ActionParams\n    const amountBuffer = Buffer.alloc(9); // 1 byte cho Option + 8 bytes cho u64\n    amountBuffer.writeUInt8(1, 0); // 1 = Some\n    const amountBigInt = BigInt(amountLamports);\n    for (let i = 0; i < 8; i++) {\n      amountBuffer.writeUInt8(Number(amountBigInt >> BigInt(8 * i) & BigInt(0xFF)), i + 1);\n    }\n\n    // Encode destination\n    const destinationBuffer = Buffer.alloc(33); // 1 byte cho Option + 32 bytes cho PublicKey\n    destinationBuffer.writeUInt8(1, 0); // 1 = Some\n    Buffer.from(destination.toBuffer()).copy(destinationBuffer, 1);\n\n    // Encode token_mint (None)\n    const tokenMintBuffer = Buffer.alloc(1);\n    tokenMintBuffer.writeUInt8(0, 0); // 0 = None\n\n    // Encode nonce (u64, little-endian)\n    const nonceBuffer = Buffer.alloc(8);\n    const nonceBigInt = BigInt(nonce);\n    for (let i = 0; i < 8; i++) {\n      nonceBuffer.writeUInt8(Number(nonceBigInt >> BigInt(8 * i) & BigInt(0xFF)), i);\n    }\n\n    // Encode timestamp (i64, little-endian)\n    const timestampBuffer = Buffer.alloc(8);\n    const timestampBigInt = BigInt(timestamp);\n    for (let i = 0; i < 8; i++) {\n      timestampBuffer.writeUInt8(Number(timestampBigInt >> BigInt(8 * i) & BigInt(0xFF)), i);\n    }\n\n    // Encode message (vec<u8>)\n    const messageLenBuffer = Buffer.alloc(4);\n    messageLenBuffer.writeUInt32LE(message.length, 0);\n    const messageBuffer = Buffer.from(message);\n\n    // Nối tất cả buffer lại với nhau\n    const data = Buffer.concat([discriminator, actionLenBuffer, actionBuffer, amountBuffer, destinationBuffer, tokenMintBuffer, nonceBuffer, timestampBuffer, messageLenBuffer, messageBuffer]);\n\n    // Kiểm tra địa chỉ của instruction sysvar\n    const sysvarInstructionPubkey = SYSVAR_INSTRUCTIONS_PUBKEY;\n    const sysvarClockPubkey = SYSVAR_CLOCK_PUBKEY;\n\n    // Tạo instruction verify_and_execute\n    const ix = new TransactionInstruction({\n      keys: [{\n        pubkey: multisigPDA,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: guardianPDA,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: sysvarClockPubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: sysvarInstructionPubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: destination,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId: programID,\n      data\n    });\n\n    // Tạo transaction mới\n    return new Transaction().add(ix);\n  } catch (error) {\n    console.error(\"Lỗi khi tạo transaction chuyển tiền:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["web3","PublicKey","Transaction","Keypair","SystemProgram","TransactionInstruction","Buffer","idlFile","programID","process","env","REACT_APP_PROGRAM_ID","SECP256R1_PROGRAM_ID","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_CLOCK_PUBKEY","idl","checkSecp256r1Program","testSecp256r1Instruction","connection","testKeyPair","generate","testSignature","alloc","testPubkey","testMessage","testInstruction","createSecp256r1Instruction","testTx","add","feePayer","publicKey","blockhash","getLatestBlockhash","recentBlockhash","simulateTransaction","error","errorMessage","toString","includes","console","warn","createInitializeMultisigTx","threshold","multisigPDA","owner","recoveryHash","credentialId","ownerPubkey","discriminator","from","length","Error","thresholdBuffer","recoveryHashBuffer","credentialIdLenBuffer","writeUInt32LE","data","concat","Uint8Array","instruction","keys","pubkey","isSigner","isWritable","programId","tx","compressPublicKey","uncompressedKey","x","subarray","y","prefix","compressedKey","set","createConfigureWebAuthnTx","webauthnPubkey","log","Math","min","createStorePasswordHashTx","passwordHash","Array","createWebAuthnAuthTx","webauthnSignature","authenticatorData","clientDataJSON","instructionData","createAddGuardianTx","guardianPDA","guardianPubkey","guardianName","isOwner","nameBuffer","nameLenBuffer","isOwnerByte","dataBuffers","toBuffer","push","map","buffer","COMPRESSED_PUBKEY_SIZE","SIGNATURE_SIZE","DATA_START","SIGNATURE_OFFSETS_START","message","signature","SIGNATURE_OFFSETS_SERIALIZED_SIZE","pubkeyOffset","signatureOffset","messageOffset","totalSize","writeUInt8","writeUInt16LE","copy","slice","createTransferTx","destination","amountLamports","nonce","timestamp","payer","isNaN","action","actionBuffer","actionLenBuffer","amountBuffer","amountBigInt","BigInt","i","Number","destinationBuffer","tokenMintBuffer","nonceBuffer","nonceBigInt","timestampBuffer","timestampBigInt","messageLenBuffer","messageBuffer","sysvarInstructionPubkey","sysvarClockPubkey","ix"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/utils/transactionUtils.ts"],"sourcesContent":["import { web3, BN } from '@coral-xyz/anchor';\nimport { PublicKey, Transaction, Keypair, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport idlFile from '../idl/moon_wallet_program.json';\n\n// Export programID từ biến môi trường thay vì hardcode\nexport const programID = new PublicKey(process.env.REACT_APP_PROGRAM_ID || 'DeN1rBfabZezHPvrq9q7BbzUbZkrjnHE1kQDrPK8kWQ3');\n\n// Hằng số cho chương trình secp256r1\nexport const SECP256R1_PROGRAM_ID = new PublicKey('Secp256r1SigVerify1111111111111111111111111');\n\n// Hằng số cho Sysvar accounts với địa chỉ chính xác\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\n\n// Sửa lỗi type cho IDL\nconst idl: any = idlFile;\n\n// Cập nhật: Chương trình secp256r1 là một chương trình native của Solana, \n// nên không thể kiểm tra bằng getAccountInfo\nexport const checkSecp256r1Program = async (): Promise<boolean> => {\n  // Chương trình native luôn tồn tại trên validator chính thức\n  // Chỉ cần đảm bảo validator được khởi động với tham số phù hợp\n  return true;\n};\n\n// Thêm hàm kiểm tra chương trình secp256r1 thông qua transaction thử nghiệm nếu cần\nexport const testSecp256r1Instruction = async (connection: web3.Connection): Promise<boolean> => {\n  try {\n    // Tạo một cặp khóa giả lập cho việc kiểm tra\n    const testKeyPair = web3.Keypair.generate();\n    \n    // Tạo một chữ ký và message giả\n    const testSignature = Buffer.alloc(64, 1); // Chữ ký giả 64 bytes\n    const testPubkey = Buffer.alloc(33, 2); // Khóa công khai giả 33 bytes\n    testPubkey[0] = 0x02; // Định dạng khóa nén\n    const testMessage = Buffer.alloc(32, 3); // Message hash giả 32 bytes\n    \n    // Tạo instruction secp256r1 giả\n    const testInstruction = createSecp256r1Instruction(\n      testPubkey,\n      testSignature,\n      testMessage\n    );\n    \n    // Tạo transaction giả với instruction trên\n    const testTx = new web3.Transaction().add(testInstruction);\n    testTx.feePayer = testKeyPair.publicKey;\n    const { blockhash } = await connection.getLatestBlockhash();\n    testTx.recentBlockhash = blockhash;\n    \n    // Chỉ mô phỏng giao dịch, không gửi thật\n    await connection.simulateTransaction(testTx);\n    \n    // Nếu không có lỗi \"program not found\", chương trình tồn tại\n    return true;\n  } catch (error: any) {\n    // Kiểm tra lỗi cụ thể\n    const errorMessage = error.toString();\n    // Nếu lỗi là về chương trình không tồn tại\n    if (errorMessage.includes(\"Attempt to load a program that does not exist\") ||\n        errorMessage.includes(\"Program not found\")) {\n      console.error(\"Chương trình secp256r1 không tồn tại:\", error);\n      return false;\n    }\n    \n    // Nếu là lỗi khác (vd: chữ ký không hợp lệ), chương trình vẫn tồn tại\n    console.warn(\"Lỗi khi kiểm tra secp256r1, nhưng chương trình có thể tồn tại:\", error);\n    return true;\n  }\n};\n\n// Cập nhật lại hàm tạo transaction\nexport const createInitializeMultisigTx = async (\n  threshold: number,\n  multisigPDA: PublicKey,\n  owner: PublicKey | Keypair,\n  feePayer: Keypair,\n  recoveryHash: Uint8Array,\n  credentialId: Buffer\n): Promise<Transaction> => {\n  try {\n    const ownerPubkey = owner instanceof Keypair ? owner.publicKey : owner;\n    \n    // Sử dụng discriminator chính xác từ IDL\n    const discriminator = Buffer.from([\n      220, 130, 117, 21, 27, 227, 78, 213\n    ]);\n    \n    // Đảm bảo recoveryHash có đúng 32 bytes\n    if (recoveryHash.length !== 32) {\n      throw new Error(\"Recovery hash phải đúng 32 bytes\");\n    }\n    \n    const thresholdBuffer = Buffer.from([threshold]);\n    const recoveryHashBuffer = Buffer.from(recoveryHash);\n    \n    // Tạo buffer cho độ dài credential ID\n    const credentialIdLenBuffer = Buffer.alloc(4);\n    credentialIdLenBuffer.writeUInt32LE(credentialId.length, 0);\n    \n    // Nối tất cả lại với nhau\n    const data = Buffer.concat([\n      new Uint8Array(discriminator),\n      new Uint8Array(thresholdBuffer),\n      new Uint8Array(recoveryHashBuffer),\n      new Uint8Array(credentialIdLenBuffer),\n      new Uint8Array(credentialId)\n    ]);\n    \n    // Tạo transaction instruction\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: multisigPDA, isSigner: false, isWritable: true },\n        { pubkey: feePayer.publicKey, isSigner: true, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false }\n      ],\n      programId: programID,\n      data\n    });\n    \n    const tx = new Transaction().add(instruction);\n    return tx;\n  } catch (error) {\n    console.error(\"Lỗi khi tạo transaction initialize multisig:\", error);\n    throw error;\n  }\n};\n\n// Thêm hàm compressPublicKey cho việc nén khóa công khai\nfunction compressPublicKey(uncompressedKey: Buffer): Buffer {\n  // Đảm bảo khóa bắt đầu với byte 0x04 (không nén)\n  if (uncompressedKey[0] !== 0x04 || uncompressedKey.length !== 65) {\n    throw new Error('Khóa không đúng định dạng không nén ECDSA');\n  }\n  \n  // Sử dụng Uint8Array để tránh lỗi type\n  const x = Buffer.from(uncompressedKey.subarray(1, 33));\n  const y = Buffer.from(uncompressedKey.subarray(33, 65));\n  \n  // Tính prefix: 0x02 nếu y chẵn, 0x03 nếu y lẻ\n  const prefix = (y[31] & 1) === 0 ? 0x02 : 0x03;\n  \n  // Tạo khóa nén: prefix (1 byte) + x (32 bytes)\n  const compressedKey = Buffer.alloc(33);\n  compressedKey[0] = prefix;\n  new Uint8Array(compressedKey).set(new Uint8Array(x), 1);\n  \n  return compressedKey;\n}\n\n// Cập nhật hàm configure_webauthn với discriminator chính xác từ IDL\nexport const createConfigureWebAuthnTx = async (\n  webauthnPubkey: Buffer,\n  multisigPDA: PublicKey,\n  owner: PublicKey\n): Promise<Transaction> => {\n  try {\n    // Lấy từ IDL: discriminator chính xác cho hàm configure_webauthn\n    const discriminator = Buffer.from([\n      40, 149, 116, 224, 148, 48, 159, 54\n    ]);\n    \n    // Nén khóa công khai từ 65 bytes xuống 33 bytes\n    let compressedKey: Buffer;\n    \n    if (webauthnPubkey.length === 65 && webauthnPubkey[0] === 0x04) {\n      // Khóa không nén, cần nén lại\n      compressedKey = compressPublicKey(webauthnPubkey);\n      console.log(\"Đã nén khóa từ 65 bytes xuống 33 bytes\");\n    } else if (webauthnPubkey.length === 33 && (webauthnPubkey[0] === 0x02 || webauthnPubkey[0] === 0x03)) {\n      // Khóa đã nén, sử dụng trực tiếp\n      compressedKey = webauthnPubkey;\n      console.log(\"Khóa đã ở định dạng nén (33 bytes)\");\n    } else {\n      console.warn(`Khóa công khai WebAuthn không đúng định dạng: ${webauthnPubkey.length} bytes`);\n      // Nếu không thể xử lý, tạo khóa giả\n      compressedKey = Buffer.alloc(33);\n      compressedKey[0] = 0x02; // Prefix cho khóa nén\n      if (webauthnPubkey.length > 0) {\n        // Sao chép dữ liệu nếu có\n        new Uint8Array(compressedKey).set(\n          new Uint8Array(webauthnPubkey.subarray(0, Math.min(webauthnPubkey.length, 32))),\n          1\n        );\n      }\n    }\n    \n    console.log(\"Khóa công khai WebAuthn (nén):\", compressedKey.toString('hex'));\n    console.log(\"Độ dài khóa (bytes):\", compressedKey.length);\n    \n    // Tạo dữ liệu instruction\n    const data = Buffer.concat([\n      new Uint8Array(discriminator),\n      new Uint8Array(compressedKey)\n    ]);\n    \n    // Tạo instruction với đúng accounts theo IDL\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: multisigPDA, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: true, isWritable: false },\n      ],\n      programId: programID,\n      data\n    });\n    \n    const tx = new Transaction().add(instruction);\n    return tx;\n  } catch (error) {\n    console.error(\"Lỗi khi tạo transaction configure webauthn:\", error);\n    throw error;\n  }\n};\n\n/**\n * Tạo transaction cho storePasswordHash\n */\nexport const createStorePasswordHashTx = async (\n  passwordHash: Uint8Array,\n  multisigPDA: web3.PublicKey,\n  ownerPubkey: web3.PublicKey\n) => {\n  const tx = new web3.Transaction();\n  \n  // Sửa lỗi Buffer.from\n  const discriminator = Buffer.from([\n    // Thay thế với giá trị discriminator thực tế\n    125, 106, 39, 42, 99, 108, 43, 50\n  ]);\n  \n  // Sửa lại cách tạo data buffer\n  const data = Buffer.concat([\n    new Uint8Array(discriminator),\n    new Uint8Array(Buffer.from(Array.from(passwordHash)))\n  ]);\n  \n  // Thêm instruction để lưu password hash\n  tx.add(\n    new web3.TransactionInstruction({\n      keys: [\n        { pubkey: multisigPDA, isSigner: false, isWritable: true },\n        { pubkey: ownerPubkey, isSigner: true, isWritable: false },\n      ],\n      programId: programID,\n      data: data\n    })\n  );\n  \n  return tx;\n};\n\n/**\n * Tạo transaction xác thực WebAuthn\n */\nexport const createWebAuthnAuthTx = async (\n  multisigPDA: web3.PublicKey,\n  ownerPubkey: web3.PublicKey,\n  webauthnSignature: Uint8Array,\n  authenticatorData: Uint8Array,\n  clientDataJSON: Uint8Array\n): Promise<web3.Transaction> => {\n  const tx = new web3.Transaction();\n  \n  // Thêm discriminator đúng cho verify_webauthn_auth\n  const instructionData = Buffer.concat([\n    new Uint8Array(Buffer.from([234, 182, 165, 23, 186, 223, 208, 119])), // discriminator từ IDL\n    new Uint8Array(Buffer.from(webauthnSignature)),\n    new Uint8Array(Buffer.from(authenticatorData)),\n    new Uint8Array(Buffer.from(clientDataJSON))\n  ]);\n  \n  const instruction = new web3.TransactionInstruction({\n    keys: [\n      { pubkey: multisigPDA, isSigner: false, isWritable: true },\n      { pubkey: ownerPubkey, isSigner: false, isWritable: false }\n    ],\n    programId: programID,\n    data: instructionData\n  });\n  \n  tx.add(instruction);\n  return tx;\n};\n\n// Tạo hàm mới createAddGuardianTx\nexport const createAddGuardianTx = (\n  multisigPDA: PublicKey,\n  guardianPDA: PublicKey,\n  guardianPubkey: PublicKey,\n  guardianName: string,\n  recoveryHash: Uint8Array,\n  isOwner: boolean,\n  webauthnPubkey?: Buffer\n): Transaction => {\n  try {\n    // Discriminator cho add_guardian\n    const discriminator = Buffer.from([167, 189, 170, 27, 74, 240, 201, 241]);\n    \n    // Tạo buffer cho tên guardian\n    const nameBuffer = Buffer.from(guardianName);\n    const nameLenBuffer = Buffer.alloc(4);\n    nameLenBuffer.writeUInt32LE(nameBuffer.length, 0);\n    \n    // Tạo buffer cho các tham số\n    const isOwnerByte = Buffer.from([isOwner ? 1 : 0]);\n    \n    // Tạo buffers cho instruction data\n    const dataBuffers = [\n      discriminator,\n      guardianPubkey.toBuffer(),\n      nameLenBuffer,\n      nameBuffer,\n      Buffer.from(recoveryHash)\n    ];\n    \n    // Thêm isOwner\n    dataBuffers.push(isOwnerByte);\n    \n    // Xử lý webauthn_pubkey (option)\n    if (webauthnPubkey && isOwner) {\n      // Some variant (1)\n      dataBuffers.push(Buffer.from([1]));\n      \n      // Nén khóa công khai nếu cần\n      let compressedKey: Buffer;\n      if (webauthnPubkey.length === 65 && webauthnPubkey[0] === 0x04) {\n        // Khóa không nén, cần nén lại\n        compressedKey = compressPublicKey(webauthnPubkey);\n      } else if (webauthnPubkey.length === 33 && (webauthnPubkey[0] === 0x02 || webauthnPubkey[0] === 0x03)) {\n        // Khóa đã nén, sử dụng trực tiếp\n        compressedKey = webauthnPubkey;\n      } else {\n        throw new Error(`Khóa công khai WebAuthn không đúng định dạng: ${webauthnPubkey.length} bytes`);\n      }\n      \n      dataBuffers.push(compressedKey);\n    } else {\n      // None variant (0)\n      dataBuffers.push(Buffer.from([0]));\n    }\n    \n    // Nối tất cả buffer lại với nhau\n    const data = Buffer.concat(dataBuffers.map(buffer => new Uint8Array(buffer)));\n    \n    // Tạo instruction\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: multisigPDA, isSigner: false, isWritable: true },\n        { pubkey: guardianPDA, isSigner: false, isWritable: true },\n        { pubkey: guardianPubkey, isSigner: true, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false }\n      ],\n      programId: programID,\n      data\n    });\n    \n    return new Transaction().add(instruction);\n  } catch (error) {\n    console.error(\"Lỗi khi tạo transaction add guardian:\", error);\n    throw error;\n  }\n};\n\n// Thêm hằng số kích thước\nconst COMPRESSED_PUBKEY_SIZE = 33;\nconst SIGNATURE_SIZE = 64;\nconst DATA_START = 16; // 1 byte + 1 byte padding + 14 bytes offsets\nconst SIGNATURE_OFFSETS_START = 2;\n\n/**\n * Tạo instruction data cho chương trình Secp256r1SigVerify\n * @param message Tin nhắn gốc không hash\n * @param publicKey Khóa công khai nén\n * @param signature Chữ ký chuẩn hóa\n */\nexport const createSecp256r1Instruction = (\n  message: Buffer, \n  publicKey: Buffer, \n  signature: Buffer\n): TransactionInstruction => {\n  console.log(\"Tạo secp256r1 instruction với:\");\n  console.log(`- Message (${message.length} bytes):`, message.toString('hex'));\n  console.log(`- Public key (${publicKey.length} bytes):`, publicKey.toString('hex'));\n  console.log(`- Signature (${signature.length} bytes):`, signature.toString('hex'));\n  \n  // Đảm bảo input đúng kích thước\n  if (publicKey.length !== COMPRESSED_PUBKEY_SIZE) {\n    console.error('Public key phải có đúng 33 bytes (dạng nén)');\n    throw new Error(`Public key phải có đúng 33 bytes, nhưng có ${publicKey.length} bytes`);\n  }\n  \n  // Kiểm tra byte đầu tiên của khóa công khai\n  if (publicKey[0] !== 0x02 && publicKey[0] !== 0x03) {\n    console.error(`Byte đầu tiên của khóa công khai phải là 0x02 hoặc 0x03, nhưng là 0x${publicKey[0].toString(16)}`);\n    \n    // Có thể cần chuyển đổi định dạng nếu khóa công khai không ở dạng nén\n    // Nhưng đây là lỗi nghiêm trọng, vì WebAuthn phải cung cấp khóa nén\n    throw new Error('Khóa công khai không ở định dạng nén đúng');\n  }\n  \n  if (signature.length !== SIGNATURE_SIZE) {\n    console.error('Signature phải có đúng 64 bytes');\n    throw new Error(`Signature phải có đúng 64 bytes, nhưng có ${signature.length} bytes`);\n  }\n  \n  // Tính các offset theo định nghĩa trong mã Rust\n  const SIGNATURE_OFFSETS_SERIALIZED_SIZE = 14;\n  const DATA_START = 2 + SIGNATURE_OFFSETS_SERIALIZED_SIZE; // 16\n  \n  const pubkeyOffset = DATA_START; // 16\n  const signatureOffset = pubkeyOffset + COMPRESSED_PUBKEY_SIZE; // 16 + 33 = 49\n  const messageOffset = signatureOffset + SIGNATURE_SIZE; // 49 + 64 = 113\n  \n  // Tính tổng kích thước dữ liệu\n  const totalSize = messageOffset + message.length;\n  const instructionData = Buffer.alloc(totalSize);\n  \n  // Ghi số lượng chữ ký và padding\n  instructionData.writeUInt8(1, 0); // Số lượng chữ ký = 1\n  instructionData.writeUInt8(0, 1); // Padding\n  \n  // Ghi offsets theo đúng định dạng\n  // Bytes 2-3: signature_offset (= 49 đối với 1 chữ ký)\n  instructionData.writeUInt16LE(signatureOffset, 2);\n  // Bytes 4-5: signature_instruction_index (= 0xFFFF)\n  instructionData.writeUInt16LE(0xFFFF, 4);\n  // Bytes 6-7: public_key_offset (= 16)\n  instructionData.writeUInt16LE(pubkeyOffset, 6);\n  // Bytes 8-9: public_key_instruction_index (= 0xFFFF)\n  instructionData.writeUInt16LE(0xFFFF, 8);\n  // Bytes 10-11: message_data_offset (= 113 đối với 1 chữ ký)\n  instructionData.writeUInt16LE(messageOffset, 10);\n  // Bytes 12-13: message_data_size (= độ dài message)\n  instructionData.writeUInt16LE(message.length, 12);\n  // Bytes 14-15: message_instruction_index (= 0xFFFF)\n  instructionData.writeUInt16LE(0xFFFF, 14);\n  \n  // Ghi dữ liệu vào instruction\n  // Bytes 16-48: public_key (33 bytes) - sử dụng khóa gốc, không đảo ngược\n  publicKey.copy(instructionData, pubkeyOffset);\n  // Bytes 49-112: signature (64 bytes)\n  signature.copy(instructionData, signatureOffset);\n  // Bytes 113+: message (độ dài thay đổi)\n  message.copy(instructionData, messageOffset);\n  \n  console.log('Secp256r1 instruction data:');\n  console.log('- Total size:', instructionData.length);\n  console.log('- Public key offset:', pubkeyOffset);\n  console.log('- Signature offset:', signatureOffset);\n  console.log('- Message offset:', messageOffset);\n  console.log('- Message size:', message.length);\n  \n  // Log hex của 50 byte đầu tiên của instruction data\n  console.log('- Instruction data (50 bytes đầu):', instructionData.slice(0, 50).toString('hex'));\n  \n  return new TransactionInstruction({\n    keys: [],\n    programId: SECP256R1_PROGRAM_ID,\n    data: instructionData\n  });\n};\n\n/**\n * Tạo transaction để chuyển tiền\n * @param multisigPDA PDA của ví multisig\n * @param guardianPDA PDA của guardian\n * @param destination Địa chỉ đích để chuyển token\n * @param amountLamports Số lượng lamports để chuyển\n * @param nonce Nonce tránh replay attack\n * @param timestamp Timestamp cho giao dịch\n * @param message Thông điệp gốc (chưa hash)\n * @param payer Người trả phí giao dịch\n */\nexport const createTransferTx = (\n  multisigPDA: PublicKey,\n  guardianPDA: PublicKey,\n  destination: PublicKey,\n  amountLamports: number,\n  nonce: number,\n  timestamp: number,\n  message: Uint8Array,\n  payer: PublicKey\n): Transaction => {\n  try {\n    // Kiểm tra các input\n    if (!(multisigPDA instanceof PublicKey)) {\n      throw new Error(`multisigPDA không phải PublicKey: ${typeof multisigPDA}`);\n    }\n    if (!(guardianPDA instanceof PublicKey)) {\n      throw new Error(`guardianPDA không phải PublicKey: ${typeof guardianPDA}`);\n    }\n    if (!(destination instanceof PublicKey)) {\n      throw new Error(`destination không phải PublicKey: ${typeof destination}`);\n    }\n    if (!(payer instanceof PublicKey)) {\n      throw new Error(`payer không phải PublicKey: ${typeof payer}`);\n    }\n    \n    // Đảm bảo các giá trị số hợp lệ\n    if (isNaN(amountLamports) || amountLamports <= 0) {\n      throw new Error(`amountLamports không hợp lệ: ${amountLamports}`);\n    }\n    if (isNaN(nonce) || nonce < 0) {\n      throw new Error(`nonce không hợp lệ: ${nonce}`);\n    }\n    if (isNaN(timestamp) || timestamp <= 0) {\n      throw new Error(`timestamp không hợp lệ: ${timestamp}`);\n    }\n    \n    // Log thông tin debug để kiểm tra\n    console.log('Tạo transaction chuyển tiền với thông tin:');\n    console.log('- multisigPDA:', multisigPDA.toString());\n    console.log('- guardianPDA:', guardianPDA.toString());\n    console.log('- destination:', destination.toString());\n    console.log('- amountLamports:', amountLamports);\n    console.log('- nonce:', nonce);\n    console.log('- timestamp:', timestamp);\n    console.log('- message length:', message.length);\n    console.log('- payer:', payer.toString());\n    \n    // Discriminator cho verify_and_execute\n    const discriminator = Buffer.from([80, 118, 102, 72, 125, 57, 218, 137]);\n    \n    // Tham số cho 'action' - chuỗi \"transfer\"\n    const action = \"transfer\";\n    const actionBuffer = Buffer.from(action);\n    const actionLenBuffer = Buffer.alloc(4);\n    actionLenBuffer.writeUInt32LE(actionBuffer.length, 0);\n    \n    // Encode ActionParams\n    const amountBuffer = Buffer.alloc(9); // 1 byte cho Option + 8 bytes cho u64\n    amountBuffer.writeUInt8(1, 0); // 1 = Some\n    const amountBigInt = BigInt(amountLamports);\n    for (let i = 0; i < 8; i++) {\n      amountBuffer.writeUInt8(Number((amountBigInt >> BigInt(8 * i)) & BigInt(0xFF)), i + 1);\n    }\n    \n    // Encode destination\n    const destinationBuffer = Buffer.alloc(33); // 1 byte cho Option + 32 bytes cho PublicKey\n    destinationBuffer.writeUInt8(1, 0); // 1 = Some\n    Buffer.from(destination.toBuffer()).copy(destinationBuffer, 1);\n    \n    // Encode token_mint (None)\n    const tokenMintBuffer = Buffer.alloc(1);\n    tokenMintBuffer.writeUInt8(0, 0); // 0 = None\n    \n    // Encode nonce (u64, little-endian)\n    const nonceBuffer = Buffer.alloc(8);\n    const nonceBigInt = BigInt(nonce);\n    for (let i = 0; i < 8; i++) {\n      nonceBuffer.writeUInt8(Number((nonceBigInt >> BigInt(8 * i)) & BigInt(0xFF)), i);\n    }\n    \n    // Encode timestamp (i64, little-endian)\n    const timestampBuffer = Buffer.alloc(8);\n    const timestampBigInt = BigInt(timestamp);\n    for (let i = 0; i < 8; i++) {\n      timestampBuffer.writeUInt8(Number((timestampBigInt >> BigInt(8 * i)) & BigInt(0xFF)), i);\n    }\n    \n    // Encode message (vec<u8>)\n    const messageLenBuffer = Buffer.alloc(4);\n    messageLenBuffer.writeUInt32LE(message.length, 0);\n    const messageBuffer = Buffer.from(message);\n    \n    // Nối tất cả buffer lại với nhau\n    const data = Buffer.concat([\n      discriminator,\n      actionLenBuffer,\n      actionBuffer,\n      amountBuffer,\n      destinationBuffer,\n      tokenMintBuffer,\n      nonceBuffer,\n      timestampBuffer,\n      messageLenBuffer,\n      messageBuffer\n    ]);\n    \n    // Kiểm tra địa chỉ của instruction sysvar\n    const sysvarInstructionPubkey = SYSVAR_INSTRUCTIONS_PUBKEY;\n    const sysvarClockPubkey = SYSVAR_CLOCK_PUBKEY;\n    \n    // Tạo instruction verify_and_execute\n    const ix = new TransactionInstruction({\n      keys: [\n        { pubkey: multisigPDA, isSigner: false, isWritable: true },\n        { pubkey: guardianPDA, isSigner: false, isWritable: false },\n        { pubkey: sysvarClockPubkey, isSigner: false, isWritable: false },\n        { pubkey: sysvarInstructionPubkey, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true }\n      ],\n      programId: programID,\n      data\n    });\n    \n    // Tạo transaction mới\n    return new Transaction().add(ix);\n  } catch (error) {\n    console.error(\"Lỗi khi tạo transaction chuyển tiền:\", error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}