{"ast":null,"code":"var _jsxFileName = \"/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicKey, Connection, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createTransferTx, createSecp256r1Instruction, programID, SECP256R1_PROGRAM_ID } from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { testMultiplePublicKeys, generatePublicKeyVariants } from '../utils/testUtils';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { clusterApiUrl } from '@solana/web3.js';\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst convertDERtoRaw = derSignature => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n\n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n\n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n\n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n\n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  return rawSignature;\n};\n\n// Interface cho props của component\n// Enum cho các trạng thái giao dịch\nvar TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[\"IDLE\"] = \"idle\";\n  TransactionStatus[\"PREPARING\"] = \"preparing\";\n  TransactionStatus[\"SIGNING\"] = \"signing\";\n  TransactionStatus[\"BUILDING_TX\"] = \"building_tx\";\n  TransactionStatus[\"SUBMITTING\"] = \"submitting\";\n  TransactionStatus[\"CONFIRMING\"] = \"confirming\";\n  TransactionStatus[\"SUCCESS\"] = \"success\";\n  TransactionStatus[\"ERROR\"] = \"error\";\n  return TransactionStatus;\n}(TransactionStatus || {});\nexport const TransferForm = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  // State\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [isTransferring, setIsTransferring] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [nonce, setNonce] = useState(0);\n  const [txStatus, setTxStatus] = useState(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n\n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n\n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    checkPrograms();\n  }, [connection]);\n\n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n\n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n\n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n\n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n\n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = e => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n\n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = e => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n\n  // Xử lý khi submit form\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        throw new Error(errorMsg);\n      }\n\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n\n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n\n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n\n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n\n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n\n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n\n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n\n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n\n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n\n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(null, messageString, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n\n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n\n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64.replace(/-/g, '+').replace(/_/g, '/').padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          console.log('Challenge from WebAuthn (hex):', challengeBytes.toString('hex'));\n\n          // Kiểm tra xem challenge từ WebAuthn có giống với hash của message không\n          const originalHashHex = Buffer.from(messageHashBytes).toString('hex');\n          const challengeHex = challengeBytes.toString('hex');\n          console.log('Original hash vs WebAuthn challenge:');\n          console.log('- Original hash:', originalHashHex);\n          console.log('- WebAuthn challenge:', challengeHex);\n          console.log('- Match?', originalHashHex === challengeHex);\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      setSuccess(''); // Xóa thông báo thành công tạm thời\n\n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n\n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n\n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n\n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n\n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n\n              // Tạo instruction secp256r1\n              setTxStatus(TransactionStatus.BUILDING_TX);\n\n              // QUAN TRỌNG: Sử dụng messageBytes (message chưa hash) cho secp256r1 instruction\n              const secp256r1Ix = createSecp256r1Instruction(Buffer.from(messageBytes),\n              // Message gốc chưa hash\n              webAuthnPubKey, signature);\n              console.log(\"Secp256r1 instruction data:\", {\n                programId: secp256r1Ix.programId.toString(),\n                dataLength: secp256r1Ix.data.length,\n                dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n                pubkeyLength: webAuthnPubKey.length,\n                signatureLength: signature.length,\n                messageLength: messageBytes.length\n              });\n\n              // Tạo ví tạm để trả phí giao dịch\n              const feePayer = web3.Keypair.generate();\n\n              // Xin SOL airdrop để trả phí\n              try {\n                const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n                );\n                await connection.confirmTransaction(airdropSignature);\n\n                // Kiểm tra số dư sau khi airdrop\n                const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n                console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n                if (feePayerBalance === 0) {\n                  throw new Error('Không thể airdrop SOL cho fee payer');\n                }\n              } catch (airdropError) {\n                console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n                // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n              }\n\n              // Tiếp tục quá trình xử lý transaction như bình thường\n              const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, messageBytes,\n              // Sử dụng messageBytes (message gốc, chưa hash) cho verify_and_execute\n              feePayer.publicKey);\n\n              // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n\n              // Đặt fee payer và blockhash\n              transferTx.feePayer = feePayer.publicKey;\n              const {\n                blockhash\n              } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n\n              // Ký transaction bằng fee payer\n              transferTx.sign(feePayer);\n\n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: feePayer.publicKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n\n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              try {\n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true,\n                  // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                console.log('Transaction đã được gửi với ID:', transactionId);\n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n\n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n\n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n\n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n\n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n\n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n\n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n\n        // Lấy dữ liệu tài khoản guardian để lấy public key\n        const guardianAccount = await connection.getAccountInfo(guardianPDA);\n        if (!guardianAccount) {\n          throw new Error('Không thể tìm thấy thông tin guardian');\n        }\n\n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n\n        let webAuthnPubKey;\n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n\n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n\n        // Tạo instruction secp256r1\n        setTxStatus(TransactionStatus.BUILDING_TX);\n\n        // QUAN TRỌNG: Sử dụng messageBytes (message chưa hash) cho secp256r1 instruction, \n        // và messageBytes (chưa hash) cho verify_and_execute\n        const secp256r1Ix = createSecp256r1Instruction(Buffer.from(messageBytes),\n        // Message gốc chưa hash\n        webAuthnPubKey, signature);\n        console.log(\"Secp256r1 instruction data:\", {\n          programId: secp256r1Ix.programId.toString(),\n          dataLength: secp256r1Ix.data.length,\n          dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n          pubkeyLength: webAuthnPubKey.length,\n          signatureLength: signature.length,\n          messageLength: messageBytes.length\n        });\n\n        // Tạo ví tạm để trả phí giao dịch\n        const feePayer = web3.Keypair.generate();\n\n        // Xin SOL airdrop để trả phí\n        try {\n          const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n          );\n          await connection.confirmTransaction(airdropSignature);\n\n          // Kiểm tra số dư sau khi airdrop\n          const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n          console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n          if (feePayerBalance === 0) {\n            throw new Error('Không thể airdrop SOL cho fee payer');\n          }\n        } catch (airdropError) {\n          console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n          // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n        }\n\n        // Tạo transaction với verify_and_execute instruction\n        const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, messageBytes,\n        // Sử dụng messageBytes (chưa hash) cho verify_and_execute\n        feePayer.publicKey);\n\n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n\n        // Đặt fee payer và blockhash\n        transferTx.feePayer = feePayer.publicKey;\n        const {\n          blockhash\n        } = await connection.getLatestBlockhash();\n        transferTx.recentBlockhash = blockhash;\n\n        // Ký transaction bằng fee payer\n        transferTx.sign(feePayer);\n\n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: feePayer.publicKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n\n        // Gửi transaction\n        setTxStatus(TransactionStatus.SUBMITTING);\n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true,\n            // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          console.log('Transaction đã được gửi với ID:', transactionId);\n          setTxId(transactionId);\n          console.log('Transaction ID:', transactionId);\n\n          // Chờ xác nhận\n          setTxStatus(TransactionStatus.CONFIRMING);\n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n          if (confirmation.value.err) {\n            throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n          }\n\n          // Hiển thị thông báo thành công\n          setTxStatus(TransactionStatus.SUCCESS);\n          setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n          setAmount('');\n          setDestinationAddress('');\n\n          // Gọi callback nếu có\n          if (onTransferSuccess) {\n            onTransferSuccess();\n          }\n        } catch (sendError) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n\n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n\n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n\n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n\n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n\n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-note\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"L\\u01B0u \\xFD:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 14\n          }, this), \" B\\u1EA1n \\u0111ang k\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn validator c\\u1EE5c b\\u1ED9.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"C\\u1EA7n kh\\u1EDFi \\u0111\\u1ED9ng validator v\\u1EDBi c\\xE1c tham s\\u1ED1 \\u0111\\xFAng \\u0111\\u1EC3 c\\xE0i \\u0111\\u1EB7t ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Thêm hàm testSecp256r1Independently vào trong component TransferForm\n  const testSecp256r1Independently = async () => {\n    _s();\n    try {\n      setIsLoading(true);\n      setStatusMessage('Đang chuẩn bị kiểm tra Secp256r1 độc lập...');\n\n      // Lấy thông tin cần thiết\n      const connection = new Connection(connectionEndpoint || clusterApiUrl('devnet'));\n      const wallet = useWallet();\n      if (!wallet.publicKey || !wallet.signTransaction) {\n        setStatusMessage('Không tìm thấy ví kết nối hoặc ví không hỗ trợ ký giao dịch');\n        setIsLoading(false);\n        return;\n      }\n\n      // Chuẩn bị thông tin giao dịch mẫu\n      const destinationAddress = new PublicKey('9oEcGop5FrvQu6hw3yiri9veWo9rF3suPKK2DcYRiPyN');\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // Tạo message gốc đơn giản\n      const originalMessage = `test_message_${timestamp}`;\n      const messageBuffer = Buffer.from(originalMessage);\n\n      // Lấy thông tin credential từ localStorage\n      const storedCredentialId = localStorage.getItem('credentialId');\n      if (!storedCredentialId) {\n        setStatusMessage('Không tìm thấy credential ID trong localStorage');\n        setIsLoading(false);\n        return;\n      }\n\n      // Lấy WebAuthn public key từ Firebase\n      setStatusMessage('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(storedCredentialId);\n      if (!credentialMapping) {\n        setStatusMessage('Không tìm thấy public key trong Firebase');\n        setIsLoading(false);\n        return;\n      }\n\n      // Chuyển đổi mảng số thành Buffer\n      const publicKeyBuffer = Buffer.from(credentialMapping.guardianPublicKey);\n      console.log('Đã tìm thấy WebAuthn public key trong Firebase:', publicKeyBuffer.toString('hex'));\n\n      // Yêu cầu xác thực WebAuthn\n      setStatusMessage('Đang yêu cầu xác thực WebAuthn...');\n\n      // Tính hash SHA-256 của message gốc để dùng làm challenge\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBuffer);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      try {\n        // Yêu cầu chữ ký WebAuthn với challenge là hash của message\n        const assertion = await getWebAuthnAssertion(Buffer.from(messageHashBytes).toString('hex'));\n\n        // Chuyển đổi signature từ DER sang raw format\n        const signatureBuffer = Buffer.from(assertion.signature);\n        console.log('Signature từ WebAuthn:', signatureBuffer.toString('hex'));\n        console.log('Độ dài signature:', signatureBuffer.length);\n\n        // Tạo các biến thể của khóa công khai để thử nghiệm\n        const publicKeyVariants = generatePublicKeyVariants(publicKeyBuffer);\n\n        // Kiểm tra từng biến thể của khóa công khai\n        setStatusMessage('Đang kiểm tra với nhiều biến thể của khóa công khai...');\n\n        // Sử dụng wallet.publicKey thay vì truyền cả wallet object\n        await testMultiplePublicKeys(connection, messageBuffer, signatureBuffer, {\n          publicKey: wallet.publicKey,\n          signTransaction: wallet.signTransaction\n        }, publicKeyVariants);\n        setStatusMessage('Quá trình kiểm tra đã hoàn tất! Kiểm tra console để xem kết quả chi tiết.');\n      } catch (error) {\n        console.error('Lỗi khi lấy chữ ký WebAuthn:', error);\n        setStatusMessage(`Lỗi khi lấy chữ ký: ${error.message}`);\n      }\n    } catch (error) {\n      console.error('Lỗi khi kiểm tra Secp256r1:', error);\n      setStatusMessage(`Lỗi khi kiểm tra: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  _s(testSecp256r1Independently, \"i+/qxb0flJRE8MgvazOGMkNRtsk=\", false, function () {\n    return [useWallet];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transfer-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chuy\\u1EC3n SOL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 916,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"K\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: connectionEndpoint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"S\\u1ED1 d\\u01B0 hi\\u1EC7n t\\u1EA1i: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pdaBalance.toFixed(5), \" SOL\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: !isMoonWalletAvailable ? \"warning-message\" : \"info-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tr\\u1EA1ng th\\xE1i ch\\u01B0\\u01A1ng tr\\xECnh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 924,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: isMoonWalletAvailable ? \"status-ok\" : \"status-error\",\n              children: isMoonWalletAvailable ? '✅' : '❌'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 927,\n              columnNumber: 15\n            }, this), \"MoonWallet: \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: programID.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 926,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 925,\n          columnNumber: 11\n        }, this), renderValidatorNote(), !isMoonWalletAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"L\\u01B0u \\xFD:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 938,\n              columnNumber: 18\n            }, this), \" Ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet ch\\u01B0a \\u0111\\u01B0\\u1EE3c c\\xE0i \\u0111\\u1EB7t tr\\xEAn validator.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 938,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u0110\\u1EC3 c\\xE0i \\u0111\\u1EB7t, ch\\u1EA1y validator v\\u1EDBi l\\u1EC7nh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 937,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 923,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"destination\",\n          children: \"\\u0110\\u1ECBa ch\\u1EC9 \\u0111\\xEDch:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 950,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"destination\",\n          value: destinationAddress,\n          onChange: handleDestinationChange,\n          placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa ch\\u1EC9 Solana\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 963,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amount\",\n          value: amount,\n          onChange: handleAmountChange,\n          placeholder: \"V\\xED d\\u1EE5: 0.1\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 9\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 976,\n        columnNumber: 19\n      }, this), txStatus !== TransactionStatus.IDLE && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: renderStatusMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 13\n        }, this), txStatus === TransactionStatus.CONFIRMING && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"\\u0110ang x\\xE1c nh\\u1EADn...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 15\n        }, this), txId && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"transaction-id\",\n          children: [\"ID Giao d\\u1ECBch: \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://explorer.solana.com/tx/${txId}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: [txId.slice(0, 8), \"...\", txId.slice(-8)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 986,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 985,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"primary-button\",\n        disabled: isTransferring || !isMoonWalletAvailable,\n        children: isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 948,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"test-button\",\n        onClick: testSecp256r1Independently,\n        disabled: isLoading,\n        children: isLoading ? 'Đang kiểm tra...' : 'Kiểm tra Secp256r1 Độc lập'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 9\n      }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1013,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 915,\n    columnNumber: 5\n  }, this);\n};\n_s2(TransferForm, \"nfHPGt+yvOBSL/6Qg2fxpdDxroU=\");\n_c = TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","PublicKey","Connection","SendTransactionError","web3","LAMPORTS_PER_SOL","createTransferTx","createSecp256r1Instruction","programID","SECP256R1_PROGRAM_ID","getWebAuthnAssertion","getGuardianPDA","getMultisigPDA","getWalletByCredentialId","testMultiplePublicKeys","generatePublicKeyVariants","useWallet","clusterApiUrl","jsxDEV","_jsxDEV","convertDERtoRaw","derSignature","console","error","Uint8Array","rLength","rStart","rEnd","sLength","sStart","sEnd","r","slice","s","rPadded","sPadded","length","set","rawSignature","log","TransactionStatus","TransferForm","walletAddress","credentialId","guardianId","onTransferSuccess","onTransferError","connection","pdaBalance","_s2","_s","$RefreshSig$","destinationAddress","setDestinationAddress","amount","setAmount","isTransferring","setIsTransferring","setError","success","setSuccess","walletBalance","setWalletBalance","nonce","setNonce","txStatus","setTxStatus","IDLE","txId","setTxId","isMoonWalletAvailable","setIsMoonWalletAvailable","connectionEndpoint","setConnectionEndpoint","isLoading","setIsLoading","statusMessage","setStatusMessage","checkPrograms","endpoint","rpcEndpoint","moonWalletInfo","getAccountInfo","warn","toString","undefined","loadWalletInfo","multisigPDA","accountInfo","transactionNonce","data","readBigUInt64LE","Number","handleDestinationChange","e","target","value","handleAmountChange","test","handleSubmit","preventDefault","PREPARING","errorMsg","Error","parseFloat","amountLamports","Math","floor","destinationPublicKey","nextNonce","timestamp","Date","now","formattedAmount","messageString","messageBytes","TextEncoder","encode","Array","from","map","b","padStart","join","messageHash","crypto","subtle","digest","messageHashBytes","Buffer","toBase58","guardianPDA","SIGNING","assertion","TextDecoder","decode","clientDataJSON","clientDataObj","JSON","parse","challenge","challengeBase64","base64Standard","replace","padEnd","challengeBytes","originalHashHex","challengeHex","signature","byteLength","credentialMapping","guardianPublicKey","localStorageData","localStorage","getItem","localMapping","webAuthnPubKey","BUILDING_TX","secp256r1Ix","programId","dataLength","dataHex","substring","pubkeyLength","signatureLength","messageLength","feePayer","Keypair","generate","airdropSignature","requestAirdrop","publicKey","confirmTransaction","feePayerBalance","getBalance","airdropError","transferTx","instructions","unshift","blockhash","getLatestBlockhash","recentBlockhash","sign","ix","keys","k","pubkey","isSigner","isWritable","dataSize","SUBMITTING","transactionId","sendRawTransaction","serialize","skipPreflight","preflightCommitment","CONFIRMING","confirmation","err","stringify","SUCCESS","sendError","message","logs","isArray","logError","errorMessage","includes","localStorageError","guardianAccount","hasWebAuthnPubKey","ERROR","renderStatusMessage","renderValidatorNote","className","children","fileName","_jsxFileName","lineNumber","columnNumber","testSecp256r1Independently","wallet","signTransaction","originalMessage","messageBuffer","storedCredentialId","publicKeyBuffer","signatureBuffer","publicKeyVariants","toFixed","onSubmit","htmlFor","type","id","onChange","placeholder","disabled","required","href","rel","onClick","_c","$RefreshReg$"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, Connection, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { \n  createTransferTx, \n  createSecp256r1Instruction,\n  programID,\n  SECP256R1_PROGRAM_ID\n} from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { testSecp256r1, testMultiplePublicKeys, generatePublicKeyVariants } from '../utils/testUtils';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { clusterApiUrl } from '@solana/web3.js';\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = (derSignature: Uint8Array): Uint8Array => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n  \n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  \n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n  \n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n  \n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  \n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  \n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n  \n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  \n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  \n  return rawSignature;\n};\n\n// Interface cho props của component\ninterface TransferFormProps {\n  walletAddress: string;  \n  credentialId: string;   \n  guardianId: number;     \n  onTransferSuccess?: () => void;\n  onTransferError?: (error: Error) => void;\n  // Thêm connection vào props\n  connection: Connection;\n  // Thêm pdaBalance để hiển thị số dư chính xác\n  pdaBalance?: number;\n}\n\n// Enum cho các trạng thái giao dịch\nenum TransactionStatus {\n  IDLE = 'idle',\n  PREPARING = 'preparing',\n  SIGNING = 'signing',\n  BUILDING_TX = 'building_tx',\n  SUBMITTING = 'submitting',\n  CONFIRMING = 'confirming',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\nexport const TransferForm: React.FC<TransferFormProps> = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  // State\n  const [destinationAddress, setDestinationAddress] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [isTransferring, setIsTransferring] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [nonce, setNonce] = useState<number>(0);\n  const [txStatus, setTxStatus] = useState<TransactionStatus>(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState<string>('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState<boolean>(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [statusMessage, setStatusMessage] = useState<string>('');\n  \n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n        \n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          \n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    \n    checkPrograms();\n  }, [connection]);\n  \n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n  \n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n        \n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n        \n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        \n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        \n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n        \n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    \n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n  \n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n  \n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n  \n  // Xử lý khi submit form\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    \n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        \n        throw new Error(errorMsg);\n      }\n      \n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      \n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n      \n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n      \n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n      \n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey: PublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n      \n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n      \n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      \n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n      \n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n      \n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n      \n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n      \n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(null, messageString, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n      \n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n        \n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64\n            .replace(/-/g, '+')\n            .replace(/_/g, '/')\n            .padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          console.log('Challenge from WebAuthn (hex):', challengeBytes.toString('hex'));\n          \n          // Kiểm tra xem challenge từ WebAuthn có giống với hash của message không\n          const originalHashHex = Buffer.from(messageHashBytes).toString('hex');\n          const challengeHex = challengeBytes.toString('hex');\n          console.log('Original hash vs WebAuthn challenge:');\n          console.log('- Original hash:', originalHashHex);\n          console.log('- WebAuthn challenge:', challengeHex);\n          console.log('- Match?', originalHashHex === challengeHex);\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      \n      setSuccess(''); // Xóa thông báo thành công tạm thời\n      \n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n      \n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n      \n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n              \n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n              \n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n              \n              // Tạo instruction secp256r1\n              setTxStatus(TransactionStatus.BUILDING_TX);\n              \n              // QUAN TRỌNG: Sử dụng messageBytes (message chưa hash) cho secp256r1 instruction\n              const secp256r1Ix = createSecp256r1Instruction(\n                Buffer.from(messageBytes),  // Message gốc chưa hash\n                webAuthnPubKey,\n                signature\n              );\n              \n              console.log(\"Secp256r1 instruction data:\", {\n                programId: secp256r1Ix.programId.toString(),\n                dataLength: secp256r1Ix.data.length,\n                dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n                pubkeyLength: webAuthnPubKey.length,\n                signatureLength: signature.length,\n                messageLength: messageBytes.length\n              });\n              \n              // Tạo ví tạm để trả phí giao dịch\n              const feePayer = web3.Keypair.generate();\n              \n              // Xin SOL airdrop để trả phí\n              try {\n                const airdropSignature = await connection.requestAirdrop(\n                  feePayer.publicKey,\n                  web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n                );\n                await connection.confirmTransaction(airdropSignature);\n                \n                // Kiểm tra số dư sau khi airdrop\n                const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n                console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n                \n                if (feePayerBalance === 0) {\n                  throw new Error('Không thể airdrop SOL cho fee payer');\n                }\n              } catch (airdropError) {\n                console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n                // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n              }\n              \n              // Tiếp tục quá trình xử lý transaction như bình thường\n              const transferTx = createTransferTx(\n                multisigPDA,\n                guardianPDA,\n                destinationPublicKey,\n                amountLamports,\n                nextNonce,\n                timestamp,\n                messageBytes, // Sử dụng messageBytes (message gốc, chưa hash) cho verify_and_execute\n                feePayer.publicKey\n              );\n              \n              // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n              \n              // Đặt fee payer và blockhash\n              transferTx.feePayer = feePayer.publicKey;\n              const { blockhash } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n              \n              // Ký transaction bằng fee payer\n              transferTx.sign(feePayer);\n              \n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: feePayer.publicKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n              \n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              \n              try {\n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                \n                console.log('Transaction đã được gửi với ID:', transactionId);\n                \n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n                \n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                \n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                \n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n                \n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n                \n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                \n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError: any) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  \n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n                  \n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n                  \n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  \n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  \n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n        \n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n        \n        // Lấy dữ liệu tài khoản guardian để lấy public key\n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      \n      if (!guardianAccount) {\n        throw new Error('Không thể tìm thấy thông tin guardian');\n      }\n      \n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n        \n        let webAuthnPubKey: Buffer; \n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n        \n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n      \n      // Tạo instruction secp256r1\n      setTxStatus(TransactionStatus.BUILDING_TX);\n      \n        // QUAN TRỌNG: Sử dụng messageBytes (message chưa hash) cho secp256r1 instruction, \n        // và messageBytes (chưa hash) cho verify_and_execute\n      const secp256r1Ix = createSecp256r1Instruction(\n        Buffer.from(messageBytes),  // Message gốc chưa hash\n        webAuthnPubKey,\n        signature\n      );\n      \n        console.log(\"Secp256r1 instruction data:\", {\n          programId: secp256r1Ix.programId.toString(),\n          dataLength: secp256r1Ix.data.length,\n          dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n          pubkeyLength: webAuthnPubKey.length,\n          signatureLength: signature.length,\n          messageLength: messageBytes.length\n        });\n        \n        // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n        try {\n      const airdropSignature = await connection.requestAirdrop(\n        feePayer.publicKey,\n            web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n      );\n      await connection.confirmTransaction(airdropSignature);\n      \n          // Kiểm tra số dư sau khi airdrop\n          const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n          console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n          \n          if (feePayerBalance === 0) {\n            throw new Error('Không thể airdrop SOL cho fee payer');\n          }\n        } catch (airdropError) {\n          console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n          // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n        }\n        \n        // Tạo transaction với verify_and_execute instruction\n      const transferTx = createTransferTx(\n        multisigPDA,\n        guardianPDA,\n        destinationPublicKey,\n        amountLamports,\n        nextNonce,\n        timestamp,\n          messageBytes, // Sử dụng messageBytes (chưa hash) cho verify_and_execute\n        feePayer.publicKey\n      );\n      \n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n      \n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const { blockhash } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n      \n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n        \n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: feePayer.publicKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n      \n      // Gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      \n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          \n          console.log('Transaction đã được gửi với ID:', transactionId);\n          \n      setTxId(transactionId);\n      console.log('Transaction ID:', transactionId);\n      \n      // Chờ xác nhận\n      setTxStatus(TransactionStatus.CONFIRMING);\n      \n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n      \n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n      \n      // Hiển thị thông báo thành công\n      setTxStatus(TransactionStatus.SUCCESS);\n      setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n      setAmount('');\n      setDestinationAddress('');\n      \n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n          }\n        } catch (sendError: any) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            \n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n            \n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n            \n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            \n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            \n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n      \n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  \n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n  \n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return (\n        <div className=\"info-note\">\n          <p><strong>Lưu ý:</strong> Bạn đang kết nối đến validator cục bộ.</p>\n          <p>Cần khởi động validator với các tham số đúng để cài đặt chương trình MoonWallet:</p>\n          <pre>\n            solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n          </pre>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  // Thêm hàm testSecp256r1Independently vào trong component TransferForm\n  const testSecp256r1Independently = async () => {\n    try {\n      setIsLoading(true);\n      setStatusMessage('Đang chuẩn bị kiểm tra Secp256r1 độc lập...');\n      \n      // Lấy thông tin cần thiết\n      const connection = new Connection(connectionEndpoint || clusterApiUrl('devnet'));\n      const wallet = useWallet();\n      \n      if (!wallet.publicKey || !wallet.signTransaction) {\n        setStatusMessage('Không tìm thấy ví kết nối hoặc ví không hỗ trợ ký giao dịch');\n        setIsLoading(false);\n        return;\n      }\n      \n      // Chuẩn bị thông tin giao dịch mẫu\n      const destinationAddress = new PublicKey('9oEcGop5FrvQu6hw3yiri9veWo9rF3suPKK2DcYRiPyN');\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // Tạo message gốc đơn giản\n      const originalMessage = `test_message_${timestamp}`;\n      const messageBuffer = Buffer.from(originalMessage);\n      \n      // Lấy thông tin credential từ localStorage\n      const storedCredentialId = localStorage.getItem('credentialId');\n      if (!storedCredentialId) {\n        setStatusMessage('Không tìm thấy credential ID trong localStorage');\n        setIsLoading(false);\n        return;\n      }\n      \n      // Lấy WebAuthn public key từ Firebase\n      setStatusMessage('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(storedCredentialId);\n      if (!credentialMapping) {\n        setStatusMessage('Không tìm thấy public key trong Firebase');\n        setIsLoading(false);\n        return;\n      }\n      \n      // Chuyển đổi mảng số thành Buffer\n      const publicKeyBuffer = Buffer.from(credentialMapping.guardianPublicKey);\n      console.log('Đã tìm thấy WebAuthn public key trong Firebase:', publicKeyBuffer.toString('hex'));\n      \n      // Yêu cầu xác thực WebAuthn\n      setStatusMessage('Đang yêu cầu xác thực WebAuthn...');\n      \n      // Tính hash SHA-256 của message gốc để dùng làm challenge\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBuffer);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      \n      try {\n        // Yêu cầu chữ ký WebAuthn với challenge là hash của message\n        const assertion = await getWebAuthnAssertion(Buffer.from(messageHashBytes).toString('hex'));\n        \n        // Chuyển đổi signature từ DER sang raw format\n        const signatureBuffer = Buffer.from(assertion.signature);\n        console.log('Signature từ WebAuthn:', signatureBuffer.toString('hex'));\n        console.log('Độ dài signature:', signatureBuffer.length);\n        \n        // Tạo các biến thể của khóa công khai để thử nghiệm\n        const publicKeyVariants = generatePublicKeyVariants(publicKeyBuffer);\n        \n        // Kiểm tra từng biến thể của khóa công khai\n        setStatusMessage('Đang kiểm tra với nhiều biến thể của khóa công khai...');\n        \n        // Sử dụng wallet.publicKey thay vì truyền cả wallet object\n        await testMultiplePublicKeys(\n          connection,\n          messageBuffer,\n          signatureBuffer,\n          { publicKey: wallet.publicKey, signTransaction: wallet.signTransaction },\n          publicKeyVariants\n        );\n        \n        setStatusMessage('Quá trình kiểm tra đã hoàn tất! Kiểm tra console để xem kết quả chi tiết.');\n      } catch (error: any) {\n        console.error('Lỗi khi lấy chữ ký WebAuthn:', error);\n        setStatusMessage(`Lỗi khi lấy chữ ký: ${error.message}`);\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi kiểm tra Secp256r1:', error);\n      setStatusMessage(`Lỗi khi kiểm tra: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"transfer-form\">\n      <h2>Chuyển SOL</h2>\n      \n      <div className=\"wallet-info\">\n        <p>Kết nối đến: <strong>{connectionEndpoint}</strong></p>\n        <p>Số dư hiện tại: <strong>{pdaBalance.toFixed(5)} SOL</strong></p>\n        \n        {/* Hiển thị trạng thái MoonWallet program */}\n        <div className={!isMoonWalletAvailable ? \"warning-message\" : \"info-message\"}>\n          <p><strong>Trạng thái chương trình:</strong></p>\n          <ul>\n            <li>\n              <span className={isMoonWalletAvailable ? \"status-ok\" : \"status-error\"}>\n                {isMoonWalletAvailable ? '✅' : '❌'}\n              </span> \n              MoonWallet: <code>{programID.toString()}</code>\n            </li>\n          </ul>\n          \n          {renderValidatorNote()}\n          \n          {!isMoonWalletAvailable && (\n            <div>\n              <p><strong>Lưu ý:</strong> Chương trình MoonWallet chưa được cài đặt trên validator.</p>\n              <p>Để cài đặt, chạy validator với lệnh:</p>\n              <pre>\n                solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n              </pre>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"destination\">Địa chỉ đích:</label>\n          <input\n            type=\"text\"\n            id=\"destination\"\n            value={destinationAddress}\n            onChange={handleDestinationChange}\n            placeholder=\"Nhập địa chỉ Solana\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Số lượng SOL:</label>\n          <input\n            type=\"text\"\n            id=\"amount\"\n            value={amount}\n            onChange={handleAmountChange}\n            placeholder=\"Ví dụ: 0.1\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        {success && <div className=\"success-message\">{success}</div>}\n        {error && <div className=\"error-message\">{error}</div>}\n        \n        {txStatus !== TransactionStatus.IDLE && (\n          <div className=\"status-message\">\n            <p>{renderStatusMessage()}</p>\n            {txStatus === TransactionStatus.CONFIRMING && (\n              <div className=\"loading-indicator\">Đang xác nhận...</div>\n            )}\n            {txId && (\n              <p className=\"transaction-id\">\n                ID Giao dịch: <a href={`https://explorer.solana.com/tx/${txId}`} target=\"_blank\" rel=\"noopener noreferrer\">{txId.slice(0, 8)}...{txId.slice(-8)}</a>\n              </p>\n            )}\n          </div>\n        )}\n        \n        <button \n          type=\"submit\" \n          className=\"primary-button\" \n          disabled={isTransferring || !isMoonWalletAvailable}\n        >\n          {isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'}\n        </button>\n      </form>\n      \n      {/* Thêm nút kiểm tra và thông báo trạng thái */}\n      <div className=\"test-section\">\n        <button\n          className=\"test-button\"\n          onClick={testSecp256r1Independently}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Đang kiểm tra...' : 'Kiểm tra Secp256r1 Độc lập'}\n        </button>\n        {statusMessage && <p className=\"status-message\">{statusMessage}</p>}\n      </div>\n      \n      <style>\n        {`\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n        `}\n      </style>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}