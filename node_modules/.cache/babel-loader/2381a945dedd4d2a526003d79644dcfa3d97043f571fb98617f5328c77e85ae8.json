{"ast":null,"code":"var _jsxFileName = \"/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createTransferTx, createSecp256r1Instruction, programID, SECP256R1_PROGRAM_ID } from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\n\n// Thêm hằng số cho chuẩn hóa signature\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SECP256R1_ORDER = new BN('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551', 16);\nconst SECP256R1_HALF_ORDER = SECP256R1_ORDER.shrn(1);\n\n/**\n * Chuẩn hóa chữ ký về dạng Low-S\n * @param signature - Chữ ký raw\n * @returns Chữ ký đã chuẩn hóa\n */\nfunction normalizeSignatureToLowS(signature) {\n  const r = signature.slice(0, 32);\n  const s = signature.slice(32, 64);\n  const sBN = new BN(s);\n\n  // Kiểm tra nếu s > half_order\n  if (sBN.gt(SECP256R1_HALF_ORDER)) {\n    console.log(\"Chuẩn hóa signature về dạng Low-S\");\n    // Tính s' = order - s\n    const sNormalized = SECP256R1_ORDER.sub(sBN);\n    const sNormalizedBuffer = sNormalized.toArrayLike(Buffer, 'be', 32);\n    return Buffer.concat([r, sNormalizedBuffer]);\n  }\n  console.log(\"Signature đã ở dạng Low-S\");\n  return signature;\n}\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = derSignature => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n\n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n\n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n\n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n\n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  return rawSignature;\n};\n\n// Interface cho props của component\n// Enum cho các trạng thái giao dịch\nvar TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[\"IDLE\"] = \"idle\";\n  TransactionStatus[\"PREPARING\"] = \"preparing\";\n  TransactionStatus[\"SIGNING\"] = \"signing\";\n  TransactionStatus[\"BUILDING_TX\"] = \"building_tx\";\n  TransactionStatus[\"SUBMITTING\"] = \"submitting\";\n  TransactionStatus[\"CONFIRMING\"] = \"confirming\";\n  TransactionStatus[\"SUCCESS\"] = \"success\";\n  TransactionStatus[\"ERROR\"] = \"error\";\n  return TransactionStatus;\n}(TransactionStatus || {}); // Thêm enum để theo dõi trạng thái xác minh chữ ký\nvar VerificationStatus = /*#__PURE__*/function (VerificationStatus) {\n  VerificationStatus[\"IDLE\"] = \"idle\";\n  VerificationStatus[\"VERIFYING\"] = \"verifying\";\n  VerificationStatus[\"SUCCESS\"] = \"success\";\n  VerificationStatus[\"ERROR\"] = \"error\";\n  return VerificationStatus;\n}(VerificationStatus || {});\nexport const TransferForm = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  _s();\n  // State\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [isTransferring, setIsTransferring] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [nonce, setNonce] = useState(0);\n  const [txStatus, setTxStatus] = useState(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState('');\n  // Thêm state cho chức năng xác minh chữ ký\n  const [verificationStatus, setVerificationStatus] = useState(VerificationStatus.IDLE);\n  const [verificationMessage, setVerificationMessage] = useState('');\n\n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n\n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    checkPrograms();\n  }, [connection]);\n\n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n\n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n\n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n\n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n\n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = e => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n\n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = e => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n\n  // Xử lý khi submit form\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        throw new Error(errorMsg);\n      }\n\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n\n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n\n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n\n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n\n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n\n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n\n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n\n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n\n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n\n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(null, messageString, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n\n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n\n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64.replace(/-/g, '+').replace(/_/g, '/').padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          console.log('Challenge from WebAuthn (hex):', challengeBytes.toString('hex'));\n\n          // Kiểm tra xem challenge từ WebAuthn có giống với hash của message không\n          const originalHashHex = Buffer.from(messageHashBytes).toString('hex');\n          const challengeHex = challengeBytes.toString('hex');\n          console.log('Original hash vs WebAuthn challenge:');\n          console.log('- Original hash:', originalHashHex);\n          console.log('- WebAuthn challenge:', challengeHex);\n          console.log('- Match?', originalHashHex === challengeHex);\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      setSuccess(''); // Xóa thông báo thành công tạm thời\n\n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n\n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n\n      // Thêm bước chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n\n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n\n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n\n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n\n              // Tạo instruction secp256r1\n              setTxStatus(TransactionStatus.BUILDING_TX);\n\n              // Thêm tham số để thử với public key bị đảo\n              const secp256r1Ix = createSecp256r1Instruction(Buffer.from(messageHashBytes),\n              // Sử dụng hash của message thay vì message gốc\n              webAuthnPubKey,\n              // publicKey\n              normalizedSignature,\n              // signature đã chuẩn hóa\n              true // Đảo ngược public key để thử\n              );\n              console.log(\"Secp256r1 instruction data:\", {\n                programId: secp256r1Ix.programId.toString(),\n                dataLength: secp256r1Ix.data.length,\n                dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n                pubkeyLength: webAuthnPubKey.length,\n                signatureLength: normalizedSignature.length,\n                messageLength: messageHashBytes.length\n              });\n\n              // Tạo ví tạm để trả phí giao dịch\n              const feePayer = web3.Keypair.generate();\n\n              // Xin SOL airdrop để trả phí\n              try {\n                const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n                );\n                await connection.confirmTransaction(airdropSignature);\n\n                // Kiểm tra số dư sau khi airdrop\n                const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n                console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n                if (feePayerBalance === 0) {\n                  throw new Error('Không thể airdrop SOL cho fee payer');\n                }\n              } catch (airdropError) {\n                console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n                // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n              }\n\n              // Tiếp tục quá trình xử lý transaction như bình thường\n              const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, Buffer.from(messageHashBytes),\n              // Sử dụng messageHashBytes (message gốc, chưa hash) cho verify_and_execute\n              feePayer.publicKey);\n\n              // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n\n              // Đặt fee payer và blockhash\n              transferTx.feePayer = feePayer.publicKey;\n              const {\n                blockhash\n              } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n\n              // Ký transaction bằng fee payer\n              transferTx.sign(feePayer);\n\n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: feePayer.publicKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n\n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              try {\n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true,\n                  // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                console.log('Transaction đã được gửi với ID:', transactionId);\n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n\n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n\n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n\n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n\n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n\n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n\n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n\n        // Lấy dữ liệu tài khoản guardian để lấy public key\n        const guardianAccount = await connection.getAccountInfo(guardianPDA);\n        if (!guardianAccount) {\n          throw new Error('Không thể tìm thấy thông tin guardian');\n        }\n\n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n\n        let webAuthnPubKey;\n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n\n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n\n        // Tạo instruction secp256r1\n        setTxStatus(TransactionStatus.BUILDING_TX);\n\n        // Thêm tham số để thử với public key bị đảo\n        const secp256r1Ix = createSecp256r1Instruction(Buffer.from(messageHashBytes),\n        // Sử dụng hash của message thay vì message gốc\n        webAuthnPubKey,\n        // publicKey\n        normalizedSignature,\n        // signature đã chuẩn hóa\n        true // Đảo ngược public key để thử\n        );\n        console.log(\"Secp256r1 instruction data:\", {\n          programId: secp256r1Ix.programId.toString(),\n          dataLength: secp256r1Ix.data.length,\n          dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n          pubkeyLength: webAuthnPubKey.length,\n          signatureLength: normalizedSignature.length,\n          messageLength: messageHashBytes.length\n        });\n\n        // Tạo ví tạm để trả phí giao dịch\n        const feePayer = web3.Keypair.generate();\n\n        // Xin SOL airdrop để trả phí\n        try {\n          const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n          );\n          await connection.confirmTransaction(airdropSignature);\n\n          // Kiểm tra số dư sau khi airdrop\n          const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n          console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n          if (feePayerBalance === 0) {\n            throw new Error('Không thể airdrop SOL cho fee payer');\n          }\n        } catch (airdropError) {\n          console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n          // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n        }\n\n        // Tạo transaction với verify_and_execute instruction\n        const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, Buffer.from(messageHashBytes),\n        // Sử dụng messageHashBytes (message gốc, chưa hash) cho verify_and_execute\n        feePayer.publicKey);\n\n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n\n        // Đặt fee payer và blockhash\n        transferTx.feePayer = feePayer.publicKey;\n        const {\n          blockhash\n        } = await connection.getLatestBlockhash();\n        transferTx.recentBlockhash = blockhash;\n\n        // Ký transaction bằng fee payer\n        transferTx.sign(feePayer);\n\n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: feePayer.publicKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n\n        // Gửi transaction\n        setTxStatus(TransactionStatus.SUBMITTING);\n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true,\n            // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          console.log('Transaction đã được gửi với ID:', transactionId);\n          setTxId(transactionId);\n          console.log('Transaction ID:', transactionId);\n\n          // Chờ xác nhận\n          setTxStatus(TransactionStatus.CONFIRMING);\n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n          if (confirmation.value.err) {\n            throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n          }\n\n          // Hiển thị thông báo thành công\n          setTxStatus(TransactionStatus.SUCCESS);\n          setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n          setAmount('');\n          setDestinationAddress('');\n\n          // Gọi callback nếu có\n          if (onTransferSuccess) {\n            onTransferSuccess();\n          }\n        } catch (sendError) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n\n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n\n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n\n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n\n  // Hàm chỉ xác minh chữ ký, không thực hiện chuyển tiền\n  const handleVerifySignatureOnly = async () => {\n    setVerificationStatus(VerificationStatus.VERIFYING);\n    setVerificationMessage('');\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        throw new Error(\"Chương trình MoonWallet không tồn tại trên validator\");\n      }\n\n      // Tạo message mẫu để xác minh (có thể thay đổi theo yêu cầu)\n      const testMessage = `Test message for signature verification,timestamp:${Math.floor(Date.now() / 1000)}`;\n      console.log('Message gốc:', testMessage);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(testMessage);\n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setVerificationMessage('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực...');\n\n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(null, testMessage, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n\n      // Phân tích ClientDataJSON để hiểu rõ hơn về cách WebAuthn xử lý\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData parsed:', clientDataObj);\n        console.log('Challenge from clientData:', clientDataObj.challenge);\n\n        // Kiểm tra xem challenge có khớp với hash đã tính không\n        const challengeBytes = Buffer.from(clientDataObj.challenge, 'base64url');\n        console.log('Challenge bytes (from base64):', challengeBytes.toString('hex'));\n        console.log('Original hash bytes:', Buffer.from(messageHashBytes).toString('hex'));\n        console.log('Challenge matches hash?', challengeBytes.toString('hex') === Buffer.from(messageHashBytes).toString('hex'));\n      } catch (parseError) {\n        console.error('Lỗi khi parse clientDataJSON:', parseError);\n      }\n\n      // Log authenticatorData để kiểm tra\n      console.log('AuthenticatorData (hex):', Buffer.from(assertion.authenticatorData).toString('hex'));\n      console.log('AuthenticatorData length:', assertion.authenticatorData.length);\n\n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n\n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n\n      // Chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n\n      // LẤY WEBAUTHN PUBLIC KEY từ Firebase hoặc localStorage\n      console.log('Lấy WebAuthn public key...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      let webAuthnPubKey;\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n\n      // Kiểm tra độ dài khóa\n      if (webAuthnPubKey.length !== 33) {\n        console.warn(`WebAuthn public key có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n      }\n\n      // ====== Cách tiếp cận mới: Xử lý dữ liệu đúng cách theo WebAuthn spec ======\n\n      // 1. Tính hash của clientDataJSON\n      const clientDataJSONHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      console.log('ClientDataJSON hash:', Buffer.from(clientDataJSONHash).toString('hex'));\n\n      // 2. Tạo message là authenticatorData || clientDataJSONHash (đây là dữ liệu thực sự được ký)\n      const compositeMessage = Buffer.concat([Buffer.from(assertion.authenticatorData), Buffer.from(clientDataJSONHash)]);\n      console.log('Composite message (authenticatorData || clientDataJSONHash):', compositeMessage.toString('hex'));\n      console.log('Composite message length:', compositeMessage.length);\n\n      // 3. Hash lại compositeMessage để có đúng 32 bytes\n      const finalMessageHash = await crypto.subtle.digest('SHA-256', compositeMessage);\n      const finalMessage = Buffer.from(finalMessageHash);\n      console.log('Final message hash (SHA-256 của compositeMessage):', finalMessage.toString('hex'));\n      console.log('Final message length:', finalMessage.length);\n\n      // 4. Thử đảo các thành phần để tạo ra dạng khác\n      const reversedComposite = Buffer.concat([Buffer.from(clientDataJSONHash), Buffer.from(assertion.authenticatorData)]);\n      const reversedHash = await crypto.subtle.digest('SHA-256', reversedComposite);\n      console.log('Reversed composite hash:', Buffer.from(reversedHash).toString('hex'));\n\n      // 5. Thử thêm một cách: Chỉ dùng authenticatorData\n      const authDataHash = await crypto.subtle.digest('SHA-256', assertion.authenticatorData);\n      console.log('AuthenticatorData hash only:', Buffer.from(authDataHash).toString('hex'));\n\n      // Thử thay đổi public key\n      let pubkeyToUse = webAuthnPubKey;\n      if (pubkeyToUse[0] === 0x02 || pubkeyToUse[0] === 0x03) {\n        // Đảo bit đầu tiên của public key\n        const oppositePrefix = pubkeyToUse[0] === 0x02 ? 0x03 : 0x02;\n        let flippedPubKey = Buffer.from(pubkeyToUse);\n        flippedPubKey[0] = oppositePrefix;\n        pubkeyToUse = flippedPubKey;\n        console.log('Đã đảo bit đầu của public key:', pubkeyToUse.toString('hex'));\n      }\n      console.log('Đang thử xác minh với các dạng message khác nhau...');\n      console.log('==== Thử nghiệm 1: Hash của (authenticatorData || clientDataJSONHash) ====');\n\n      // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n\n      // Xin SOL airdrop để trả phí\n      try {\n        const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n        );\n        await connection.confirmTransaction(airdropSignature);\n      } catch (airdropError) {\n        console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n        // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n      }\n\n      // Thử lần lượt các phương pháp khác nhau\n      let transactionResult = null;\n      let verificationSuccess = false;\n\n      // Thử nghiệm 1: Hash của (authenticatorData || clientDataJSONHash)\n      try {\n        console.log('\\n==== Thử nghiệm 1: Hash của (authenticatorData || clientDataJSONHash) ====');\n        // Tạo transaction chỉ với instruction xác minh chữ ký\n        const transaction1 = new Transaction().add(createSecp256r1Instruction(finalMessage,\n        // Dùng hash của (authenticatorData || clientDataJSONHash)\n        pubkeyToUse,\n        // publicKey đã đảo bit đầu\n        normalizedSignature,\n        // signature đã chuẩn hóa\n        false // Không đảo ngược public key (đã đảo trước đó)\n        ));\n\n        // Đặt fee payer và blockhash\n        transaction1.feePayer = feePayer.publicKey;\n        const {\n          blockhash: blockhash1\n        } = await connection.getLatestBlockhash();\n        transaction1.recentBlockhash = blockhash1;\n\n        // Ký transaction bằng fee payer\n        transaction1.sign(feePayer);\n\n        // Gửi transaction\n        const txId1 = await connection.sendRawTransaction(transaction1.serialize(), {\n          skipPreflight: true,\n          preflightCommitment: 'confirmed'\n        });\n        console.log('Transaction xác minh #1 đã được gửi với ID:', txId1);\n\n        // Chờ xác nhận\n        const confirmation1 = await connection.confirmTransaction(txId1, 'confirmed');\n        if (confirmation1.value.err) {\n          console.error(`Thử nghiệm 1 thất bại: ${JSON.stringify(confirmation1.value.err)}`);\n        } else {\n          console.log('Thử nghiệm 1 thành công!');\n          verificationSuccess = true;\n          transactionResult = txId1;\n        }\n      } catch (error1) {\n        console.error('Thử nghiệm 1 thất bại:', error1);\n      }\n\n      // Nếu thử nghiệm 1 thành công, không cần thử các cách khác\n      if (!verificationSuccess) {\n        // Thử nghiệm 2: Dùng hash của chỉ authenticatorData\n        try {\n          console.log('\\n==== Thử nghiệm 2: Hash của authenticatorData ====');\n          // Tạo transaction chỉ với instruction xác minh chữ ký\n          const transaction2 = new Transaction().add(createSecp256r1Instruction(Buffer.from(authDataHash),\n          // Dùng hash của chỉ authenticatorData\n          pubkeyToUse,\n          // publicKey đã đảo bit đầu\n          normalizedSignature,\n          // signature đã chuẩn hóa\n          false // Không đảo ngược public key (đã đảo trước đó)\n          ));\n\n          // Đặt fee payer và blockhash\n          transaction2.feePayer = feePayer.publicKey;\n          const {\n            blockhash: blockhash2\n          } = await connection.getLatestBlockhash();\n          transaction2.recentBlockhash = blockhash2;\n\n          // Ký transaction bằng fee payer\n          transaction2.sign(feePayer);\n\n          // Gửi transaction\n          const txId2 = await connection.sendRawTransaction(transaction2.serialize(), {\n            skipPreflight: true,\n            preflightCommitment: 'confirmed'\n          });\n          console.log('Transaction xác minh #2 đã được gửi với ID:', txId2);\n\n          // Chờ xác nhận\n          const confirmation2 = await connection.confirmTransaction(txId2, 'confirmed');\n          if (confirmation2.value.err) {\n            console.error(`Thử nghiệm 2 thất bại: ${JSON.stringify(confirmation2.value.err)}`);\n          } else {\n            console.log('Thử nghiệm 2 thành công!');\n            verificationSuccess = true;\n            transactionResult = txId2;\n          }\n        } catch (error2) {\n          console.error('Thử nghiệm 2 thất bại:', error2);\n        }\n      }\n\n      // Nếu thử nghiệm 2 cũng thất bại, thử nghiệm 3\n      if (!verificationSuccess) {\n        // Thử nghiệm 3: Dùng hash của (clientDataJSONHash || authenticatorData)\n        try {\n          console.log('\\n==== Thử nghiệm 3: Hash của (clientDataJSONHash || authenticatorData) ====');\n          // Tạo transaction chỉ với instruction xác minh chữ ký\n          const transaction3 = new Transaction().add(createSecp256r1Instruction(Buffer.from(reversedHash),\n          // Dùng hash của (clientDataJSONHash || authenticatorData)\n          pubkeyToUse,\n          // publicKey đã đảo bit đầu\n          normalizedSignature,\n          // signature đã chuẩn hóa\n          false // Không đảo ngược public key (đã đảo trước đó)\n          ));\n\n          // Đặt fee payer và blockhash\n          transaction3.feePayer = feePayer.publicKey;\n          const {\n            blockhash: blockhash3\n          } = await connection.getLatestBlockhash();\n          transaction3.recentBlockhash = blockhash3;\n\n          // Ký transaction bằng fee payer\n          transaction3.sign(feePayer);\n\n          // Gửi transaction\n          const txId3 = await connection.sendRawTransaction(transaction3.serialize(), {\n            skipPreflight: true,\n            preflightCommitment: 'confirmed'\n          });\n          console.log('Transaction xác minh #3 đã được gửi với ID:', txId3);\n\n          // Chờ xác nhận\n          const confirmation3 = await connection.confirmTransaction(txId3, 'confirmed');\n          if (confirmation3.value.err) {\n            console.error(`Thử nghiệm 3 thất bại: ${JSON.stringify(confirmation3.value.err)}`);\n          } else {\n            console.log('Thử nghiệm 3 thành công!');\n            verificationSuccess = true;\n            transactionResult = txId3;\n          }\n        } catch (error3) {\n          console.error('Thử nghiệm 3 thất bại:', error3);\n        }\n      }\n\n      // Cập nhật UI dựa trên kết quả\n      if (verificationSuccess && transactionResult) {\n        setVerificationStatus(VerificationStatus.SUCCESS);\n        setVerificationMessage(`Xác minh chữ ký thành công! ID giao dịch: ${transactionResult}`);\n      } else {\n        // Tất cả các phương pháp đều thất bại\n        throw new Error(\"Tất cả các phương pháp xác minh chữ ký đều thất bại. Vui lòng kiểm tra console để biết thêm chi tiết.\");\n      }\n    } catch (error) {\n      console.error('Lỗi khi xác minh chữ ký:', error);\n      setVerificationStatus(VerificationStatus.ERROR);\n      setVerificationMessage(error.message || 'Đã xảy ra lỗi khi xác minh chữ ký');\n    }\n  };\n\n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n\n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-note\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"L\\u01B0u \\xFD:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1172,\n            columnNumber: 14\n          }, this), \" B\\u1EA1n \\u0111ang k\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn validator c\\u1EE5c b\\u1ED9.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"C\\u1EA7n kh\\u1EDFi \\u0111\\u1ED9ng validator v\\u1EDBi c\\xE1c tham s\\u1ED1 \\u0111\\xFAng \\u0111\\u1EC3 c\\xE0i \\u0111\\u1EB7t ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Thêm các hàm tiện ích\n  const findMultisigPDA = async () => {\n    const credentialId = localStorage.getItem('currentCredentialId');\n    if (!credentialId) {\n      throw new Error(\"Không tìm thấy credential ID\");\n    }\n    return getMultisigPDA(credentialId);\n  };\n  const findGuardianPDA = async (multisigPDA, guardianId) => {\n    return getGuardianPDA(multisigPDA, guardianId);\n  };\n\n  // Hàm chuyển đổi base64Url thành Buffer\n  const base64UrlToBuffer = base64Url => {\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const binaryString = window.atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transfer-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chuy\\u1EC3n SOL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"K\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: connectionEndpoint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1212,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"S\\u1ED1 d\\u01B0 hi\\u1EC7n t\\u1EA1i: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pdaBalance.toFixed(5), \" SOL\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1213,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: !isMoonWalletAvailable ? \"warning-message\" : \"info-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tr\\u1EA1ng th\\xE1i ch\\u01B0\\u01A1ng tr\\xECnh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1217,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: isMoonWalletAvailable ? \"status-ok\" : \"status-error\",\n              children: isMoonWalletAvailable ? '✅' : '❌'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1220,\n              columnNumber: 15\n            }, this), \"MoonWallet: \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: programID.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1223,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1219,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1218,\n          columnNumber: 11\n        }, this), renderValidatorNote(), !isMoonWalletAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"L\\u01B0u \\xFD:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1231,\n              columnNumber: 18\n            }, this), \" Ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet ch\\u01B0a \\u0111\\u01B0\\u1EE3c c\\xE0i \\u0111\\u1EB7t tr\\xEAn validator.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1231,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u0110\\u1EC3 c\\xE0i \\u0111\\u1EB7t, ch\\u1EA1y validator v\\u1EDBi l\\u1EC7nh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1232,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1230,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verify-signature-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"X\\xE1c minh ch\\u1EEF k\\xFD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Ki\\u1EC3m tra xem WebAuthn c\\u1EE7a b\\u1EA1n c\\xF3 ho\\u1EA1t \\u0111\\u1ED9ng \\u0111\\xFAng tr\\u01B0\\u1EDBc khi th\\u1EF1c hi\\u1EC7n giao d\\u1ECBch.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1244,\n        columnNumber: 9\n      }, this), verificationStatus !== VerificationStatus.IDLE && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: verificationStatus === VerificationStatus.SUCCESS ? \"success-message\" : verificationStatus === VerificationStatus.ERROR ? \"error-message\" : \"status-message\",\n        children: verificationMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1247,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"secondary-button\",\n        onClick: handleVerifySignatureOnly,\n        disabled: verificationStatus === VerificationStatus.VERIFYING || !isMoonWalletAvailable,\n        children: verificationStatus === VerificationStatus.VERIFYING ? 'Đang xác minh...' : 'Chỉ xác minh chữ ký'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"destination\",\n          children: \"\\u0110\\u1ECBa ch\\u1EC9 \\u0111\\xEDch:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"destination\",\n          value: destinationAddress,\n          onChange: handleDestinationChange,\n          placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa ch\\u1EC9 Solana\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amount\",\n          value: amount,\n          onChange: handleAmountChange,\n          placeholder: \"V\\xED d\\u1EE5: 0.1\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1280,\n        columnNumber: 9\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1293,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1294,\n        columnNumber: 19\n      }, this), txStatus !== TransactionStatus.IDLE && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: renderStatusMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1298,\n          columnNumber: 13\n        }, this), txStatus === TransactionStatus.CONFIRMING && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"\\u0110ang x\\xE1c nh\\u1EADn...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1300,\n          columnNumber: 15\n        }, this), txId && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"transaction-id\",\n          children: [\"ID Giao d\\u1ECBch: \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://explorer.solana.com/tx/${txId}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: [txId.slice(0, 8), \"...\", txId.slice(-8)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1304,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1303,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"primary-button\",\n        disabled: isTransferring || !isMoonWalletAvailable,\n        children: isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n          \n          .verify-signature-section {\n            margin: 20px 0;\n            padding: 15px;\n            background-color: #f8f9fa;\n            border-radius: 4px;\n            border: 1px solid #e9ecef;\n          }\n          \n          .secondary-button {\n            background-color: #6c757d;\n            color: white;\n            border: none;\n            padding: 10px 15px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-weight: 500;\n            margin-top: 10px;\n          }\n          \n          .secondary-button:hover {\n            background-color: #5a6268;\n          }\n          \n          .secondary-button:disabled {\n            background-color: #adb5bd;\n            cursor: not-allowed;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1319,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1208,\n    columnNumber: 5\n  }, this);\n};\n_s(TransferForm, \"2ITLgm8YZZXy3SW+2uV30GKYWQk=\");\n_c = TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","PublicKey","Transaction","SendTransactionError","web3","LAMPORTS_PER_SOL","createTransferTx","createSecp256r1Instruction","programID","SECP256R1_PROGRAM_ID","getWebAuthnAssertion","getGuardianPDA","getMultisigPDA","getWalletByCredentialId","Buffer","BN","jsxDEV","_jsxDEV","SECP256R1_ORDER","SECP256R1_HALF_ORDER","shrn","normalizeSignatureToLowS","signature","r","slice","s","sBN","gt","console","log","sNormalized","sub","sNormalizedBuffer","toArrayLike","concat","convertDERtoRaw","derSignature","error","Uint8Array","rLength","rStart","rEnd","sLength","sStart","sEnd","rPadded","sPadded","length","set","rawSignature","TransactionStatus","VerificationStatus","TransferForm","walletAddress","credentialId","guardianId","onTransferSuccess","onTransferError","connection","pdaBalance","_s","destinationAddress","setDestinationAddress","amount","setAmount","isTransferring","setIsTransferring","setError","success","setSuccess","walletBalance","setWalletBalance","nonce","setNonce","txStatus","setTxStatus","IDLE","txId","setTxId","isMoonWalletAvailable","setIsMoonWalletAvailable","connectionEndpoint","setConnectionEndpoint","verificationStatus","setVerificationStatus","verificationMessage","setVerificationMessage","checkPrograms","endpoint","rpcEndpoint","moonWalletInfo","getAccountInfo","warn","toString","undefined","loadWalletInfo","multisigPDA","accountInfo","transactionNonce","data","readBigUInt64LE","Number","handleDestinationChange","e","target","value","handleAmountChange","test","handleSubmit","preventDefault","PREPARING","errorMsg","Error","parseFloat","amountLamports","Math","floor","destinationPublicKey","nextNonce","timestamp","Date","now","formattedAmount","messageString","messageBytes","TextEncoder","encode","Array","from","map","b","padStart","join","messageHash","crypto","subtle","digest","messageHashBytes","toBase58","guardianPDA","SIGNING","assertion","TextDecoder","decode","clientDataJSON","clientDataObj","JSON","parse","challenge","challengeBase64","base64Standard","replace","padEnd","challengeBytes","originalHashHex","challengeHex","byteLength","normalizedSignature","credentialMapping","guardianPublicKey","localStorageData","localStorage","getItem","localMapping","webAuthnPubKey","BUILDING_TX","secp256r1Ix","programId","dataLength","dataHex","substring","pubkeyLength","signatureLength","messageLength","feePayer","Keypair","generate","airdropSignature","requestAirdrop","publicKey","confirmTransaction","feePayerBalance","getBalance","airdropError","transferTx","instructions","unshift","blockhash","getLatestBlockhash","recentBlockhash","sign","ix","keys","k","pubkey","isSigner","isWritable","dataSize","SUBMITTING","transactionId","sendRawTransaction","serialize","skipPreflight","preflightCommitment","CONFIRMING","confirmation","err","stringify","SUCCESS","sendError","message","logs","isArray","logError","errorMessage","includes","localStorageError","guardianAccount","hasWebAuthnPubKey","ERROR","handleVerifySignatureOnly","VERIFYING","testMessage","parseError","authenticatorData","clientDataJSONHash","compositeMessage","finalMessageHash","finalMessage","reversedComposite","reversedHash","authDataHash","pubkeyToUse","oppositePrefix","flippedPubKey","transactionResult","verificationSuccess","transaction1","add","blockhash1","txId1","confirmation1","error1","transaction2","blockhash2","txId2","confirmation2","error2","transaction3","blockhash3","txId3","confirmation3","error3","renderStatusMessage","renderValidatorNote","className","children","fileName","_jsxFileName","lineNumber","columnNumber","findMultisigPDA","findGuardianPDA","base64UrlToBuffer","base64Url","base64","binaryString","window","atob","bytes","i","charCodeAt","buffer","toFixed","type","onClick","disabled","onSubmit","htmlFor","id","onChange","placeholder","required","href","rel","_c","$RefreshReg$"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, Connection, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { \n  createTransferTx, \n  createSecp256r1Instruction,\n  programID,\n  SECP256R1_PROGRAM_ID\n} from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\n\n// Thêm hằng số cho chuẩn hóa signature\nconst SECP256R1_ORDER = new BN('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551', 16);\nconst SECP256R1_HALF_ORDER = SECP256R1_ORDER.shrn(1);\n\n/**\n * Chuẩn hóa chữ ký về dạng Low-S\n * @param signature - Chữ ký raw\n * @returns Chữ ký đã chuẩn hóa\n */\nfunction normalizeSignatureToLowS(signature: Buffer): Buffer {\n  const r = signature.slice(0, 32);\n  const s = signature.slice(32, 64);\n  \n  const sBN = new BN(s);\n  \n  // Kiểm tra nếu s > half_order\n  if (sBN.gt(SECP256R1_HALF_ORDER)) {\n    console.log(\"Chuẩn hóa signature về dạng Low-S\");\n    // Tính s' = order - s\n    const sNormalized = SECP256R1_ORDER.sub(sBN);\n    const sNormalizedBuffer = sNormalized.toArrayLike(Buffer, 'be', 32);\n    return Buffer.concat([r, sNormalizedBuffer]);\n  }\n  \n  console.log(\"Signature đã ở dạng Low-S\");\n  return signature;\n}\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = (derSignature: Uint8Array): Uint8Array => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n  \n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  \n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n  \n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n  \n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  \n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  \n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n  \n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  \n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  \n  return rawSignature;\n};\n\n// Interface cho props của component\ninterface TransferFormProps {\n  walletAddress: string;  \n  credentialId: string;   \n  guardianId: number;     \n  onTransferSuccess?: () => void;\n  onTransferError?: (error: Error) => void;\n  // Thêm connection vào props\n  connection: Connection;\n  // Thêm pdaBalance để hiển thị số dư chính xác\n  pdaBalance?: number;\n}\n\n// Enum cho các trạng thái giao dịch\nenum TransactionStatus {\n  IDLE = 'idle',\n  PREPARING = 'preparing',\n  SIGNING = 'signing',\n  BUILDING_TX = 'building_tx',\n  SUBMITTING = 'submitting',\n  CONFIRMING = 'confirming',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\n// Thêm enum để theo dõi trạng thái xác minh chữ ký\nenum VerificationStatus {\n  IDLE = 'idle',\n  VERIFYING = 'verifying',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\nexport const TransferForm: React.FC<TransferFormProps> = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  // State\n  const [destinationAddress, setDestinationAddress] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [isTransferring, setIsTransferring] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [nonce, setNonce] = useState<number>(0);\n  const [txStatus, setTxStatus] = useState<TransactionStatus>(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState<string>('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState<boolean>(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState<string>('');\n  // Thêm state cho chức năng xác minh chữ ký\n  const [verificationStatus, setVerificationStatus] = useState<VerificationStatus>(VerificationStatus.IDLE);\n  const [verificationMessage, setVerificationMessage] = useState<string>('');\n  \n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n        \n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          \n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    \n    checkPrograms();\n  }, [connection]);\n  \n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n  \n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n        \n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n        \n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        \n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        \n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n        \n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    \n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n  \n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n  \n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n  \n  // Xử lý khi submit form\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    \n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        \n        throw new Error(errorMsg);\n      }\n      \n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      \n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n      \n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n      \n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n      \n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey: PublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n      \n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n      \n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      \n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n      \n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n      \n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n      \n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n      \n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(null, messageString, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n      \n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n        \n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64\n            .replace(/-/g, '+')\n            .replace(/_/g, '/')\n            .padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          console.log('Challenge from WebAuthn (hex):', challengeBytes.toString('hex'));\n          \n          // Kiểm tra xem challenge từ WebAuthn có giống với hash của message không\n          const originalHashHex = Buffer.from(messageHashBytes).toString('hex');\n          const challengeHex = challengeBytes.toString('hex');\n          console.log('Original hash vs WebAuthn challenge:');\n          console.log('- Original hash:', originalHashHex);\n          console.log('- WebAuthn challenge:', challengeHex);\n          console.log('- Match?', originalHashHex === challengeHex);\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      \n      setSuccess(''); // Xóa thông báo thành công tạm thời\n      \n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n      \n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n      \n      // Thêm bước chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n      \n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n              \n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n              \n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n              \n              // Tạo instruction secp256r1\n              setTxStatus(TransactionStatus.BUILDING_TX);\n              \n              // Thêm tham số để thử với public key bị đảo\n              const secp256r1Ix = createSecp256r1Instruction(\n                Buffer.from(messageHashBytes), // Sử dụng hash của message thay vì message gốc\n                webAuthnPubKey, // publicKey\n                normalizedSignature, // signature đã chuẩn hóa\n                true // Đảo ngược public key để thử\n              );\n              \n              console.log(\"Secp256r1 instruction data:\", {\n                programId: secp256r1Ix.programId.toString(),\n                dataLength: secp256r1Ix.data.length,\n                dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n                pubkeyLength: webAuthnPubKey.length,\n                signatureLength: normalizedSignature.length,\n                messageLength: messageHashBytes.length\n              });\n              \n              // Tạo ví tạm để trả phí giao dịch\n              const feePayer = web3.Keypair.generate();\n              \n              // Xin SOL airdrop để trả phí\n              try {\n                const airdropSignature = await connection.requestAirdrop(\n                  feePayer.publicKey,\n                  web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n                );\n                await connection.confirmTransaction(airdropSignature);\n                \n                // Kiểm tra số dư sau khi airdrop\n                const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n                console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n                \n                if (feePayerBalance === 0) {\n                  throw new Error('Không thể airdrop SOL cho fee payer');\n                }\n              } catch (airdropError) {\n                console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n                // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n              }\n              \n              // Tiếp tục quá trình xử lý transaction như bình thường\n              const transferTx = createTransferTx(\n                multisigPDA,\n                guardianPDA,\n                destinationPublicKey,\n                amountLamports,\n                nextNonce,\n                timestamp,\n                Buffer.from(messageHashBytes), // Sử dụng messageHashBytes (message gốc, chưa hash) cho verify_and_execute\n                feePayer.publicKey\n              );\n              \n              // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n              \n              // Đặt fee payer và blockhash\n              transferTx.feePayer = feePayer.publicKey;\n              const { blockhash } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n              \n              // Ký transaction bằng fee payer\n              transferTx.sign(feePayer);\n              \n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: feePayer.publicKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n              \n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              \n              try {\n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                \n                console.log('Transaction đã được gửi với ID:', transactionId);\n                \n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n                \n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                \n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                \n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n                \n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n                \n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                \n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError: any) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  \n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n                  \n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n                  \n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  \n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  \n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n        \n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n        \n        // Lấy dữ liệu tài khoản guardian để lấy public key\n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      \n      if (!guardianAccount) {\n        throw new Error('Không thể tìm thấy thông tin guardian');\n      }\n      \n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n        \n        let webAuthnPubKey: Buffer; \n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n        \n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n      \n      // Tạo instruction secp256r1\n      setTxStatus(TransactionStatus.BUILDING_TX);\n      \n        // Thêm tham số để thử với public key bị đảo\n      const secp256r1Ix = createSecp256r1Instruction(\n        Buffer.from(messageHashBytes), // Sử dụng hash của message thay vì message gốc\n        webAuthnPubKey, // publicKey\n        normalizedSignature, // signature đã chuẩn hóa\n        true // Đảo ngược public key để thử\n      );\n      \n        console.log(\"Secp256r1 instruction data:\", {\n          programId: secp256r1Ix.programId.toString(),\n          dataLength: secp256r1Ix.data.length,\n          dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n          pubkeyLength: webAuthnPubKey.length,\n          signatureLength: normalizedSignature.length,\n          messageLength: messageHashBytes.length\n        });\n        \n        // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n        try {\n      const airdropSignature = await connection.requestAirdrop(\n        feePayer.publicKey,\n            web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n      );\n      await connection.confirmTransaction(airdropSignature);\n      \n          // Kiểm tra số dư sau khi airdrop\n          const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n          console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n          \n          if (feePayerBalance === 0) {\n            throw new Error('Không thể airdrop SOL cho fee payer');\n          }\n        } catch (airdropError) {\n          console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n          // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n        }\n        \n        // Tạo transaction với verify_and_execute instruction\n      const transferTx = createTransferTx(\n        multisigPDA,\n        guardianPDA,\n        destinationPublicKey,\n        amountLamports,\n        nextNonce,\n        timestamp,\n          Buffer.from(messageHashBytes), // Sử dụng messageHashBytes (message gốc, chưa hash) cho verify_and_execute\n        feePayer.publicKey\n      );\n      \n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n      \n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const { blockhash } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n      \n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n        \n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: feePayer.publicKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n      \n      // Gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      \n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          \n          console.log('Transaction đã được gửi với ID:', transactionId);\n          \n      setTxId(transactionId);\n      console.log('Transaction ID:', transactionId);\n      \n      // Chờ xác nhận\n      setTxStatus(TransactionStatus.CONFIRMING);\n      \n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n      \n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n      \n      // Hiển thị thông báo thành công\n      setTxStatus(TransactionStatus.SUCCESS);\n      setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n      setAmount('');\n      setDestinationAddress('');\n      \n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n          }\n        } catch (sendError: any) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            \n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n            \n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n            \n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            \n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            \n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n      \n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  \n  // Hàm chỉ xác minh chữ ký, không thực hiện chuyển tiền\n  const handleVerifySignatureOnly = async () => {\n    setVerificationStatus(VerificationStatus.VERIFYING);\n    setVerificationMessage('');\n    \n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        throw new Error(\"Chương trình MoonWallet không tồn tại trên validator\");\n      }\n      \n      // Tạo message mẫu để xác minh (có thể thay đổi theo yêu cầu)\n      const testMessage = `Test message for signature verification,timestamp:${Math.floor(Date.now() / 1000)}`;\n      console.log('Message gốc:', testMessage);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(testMessage);\n      \n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setVerificationMessage('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực...');\n      \n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(null, testMessage, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n      \n      // Phân tích ClientDataJSON để hiểu rõ hơn về cách WebAuthn xử lý\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData parsed:', clientDataObj);\n        console.log('Challenge from clientData:', clientDataObj.challenge);\n        \n        // Kiểm tra xem challenge có khớp với hash đã tính không\n        const challengeBytes = Buffer.from(clientDataObj.challenge, 'base64url');\n        console.log('Challenge bytes (from base64):', challengeBytes.toString('hex'));\n        console.log('Original hash bytes:', Buffer.from(messageHashBytes).toString('hex'));\n        console.log('Challenge matches hash?', challengeBytes.toString('hex') === Buffer.from(messageHashBytes).toString('hex'));\n      } catch (parseError) {\n        console.error('Lỗi khi parse clientDataJSON:', parseError);\n      }\n      \n      // Log authenticatorData để kiểm tra\n      console.log('AuthenticatorData (hex):', Buffer.from(assertion.authenticatorData).toString('hex'));\n      console.log('AuthenticatorData length:', assertion.authenticatorData.length);\n      \n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      \n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      \n      // Chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n      \n      // LẤY WEBAUTHN PUBLIC KEY từ Firebase hoặc localStorage\n      console.log('Lấy WebAuthn public key...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      let webAuthnPubKey: Buffer;\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n      \n      // Kiểm tra độ dài khóa\n      if (webAuthnPubKey.length !== 33) {\n        console.warn(`WebAuthn public key có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n      }\n      \n      // ====== Cách tiếp cận mới: Xử lý dữ liệu đúng cách theo WebAuthn spec ======\n      \n      // 1. Tính hash của clientDataJSON\n      const clientDataJSONHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      console.log('ClientDataJSON hash:', Buffer.from(clientDataJSONHash).toString('hex'));\n      \n      // 2. Tạo message là authenticatorData || clientDataJSONHash (đây là dữ liệu thực sự được ký)\n      const compositeMessage = Buffer.concat([\n        Buffer.from(assertion.authenticatorData),\n        Buffer.from(clientDataJSONHash)\n      ]);\n      console.log('Composite message (authenticatorData || clientDataJSONHash):', compositeMessage.toString('hex'));\n      console.log('Composite message length:', compositeMessage.length);\n      \n      // 3. Hash lại compositeMessage để có đúng 32 bytes\n      const finalMessageHash = await crypto.subtle.digest('SHA-256', compositeMessage);\n      const finalMessage = Buffer.from(finalMessageHash);\n      console.log('Final message hash (SHA-256 của compositeMessage):', finalMessage.toString('hex'));\n      console.log('Final message length:', finalMessage.length);\n      \n      // 4. Thử đảo các thành phần để tạo ra dạng khác\n      const reversedComposite = Buffer.concat([\n        Buffer.from(clientDataJSONHash),\n        Buffer.from(assertion.authenticatorData)\n      ]);\n      const reversedHash = await crypto.subtle.digest('SHA-256', reversedComposite);\n      console.log('Reversed composite hash:', Buffer.from(reversedHash).toString('hex'));\n      \n      // 5. Thử thêm một cách: Chỉ dùng authenticatorData\n      const authDataHash = await crypto.subtle.digest('SHA-256', assertion.authenticatorData);\n      console.log('AuthenticatorData hash only:', Buffer.from(authDataHash).toString('hex'));\n      \n      // Thử thay đổi public key\n      let pubkeyToUse = webAuthnPubKey;\n      if (pubkeyToUse[0] === 0x02 || pubkeyToUse[0] === 0x03) {\n        // Đảo bit đầu tiên của public key\n        const oppositePrefix = pubkeyToUse[0] === 0x02 ? 0x03 : 0x02;\n        let flippedPubKey = Buffer.from(pubkeyToUse);\n        flippedPubKey[0] = oppositePrefix;\n        pubkeyToUse = flippedPubKey;\n        console.log('Đã đảo bit đầu của public key:', pubkeyToUse.toString('hex'));\n      }\n      \n      console.log('Đang thử xác minh với các dạng message khác nhau...');\n      console.log('==== Thử nghiệm 1: Hash của (authenticatorData || clientDataJSONHash) ====');\n      \n      // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n      try {\n        const airdropSignature = await connection.requestAirdrop(\n          feePayer.publicKey,\n          web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n        );\n        await connection.confirmTransaction(airdropSignature);\n      } catch (airdropError) {\n        console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n        // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n      }\n      \n      // Thử lần lượt các phương pháp khác nhau\n      let transactionResult: string | null = null;\n      let verificationSuccess = false;\n      \n      // Thử nghiệm 1: Hash của (authenticatorData || clientDataJSONHash)\n      try {\n        console.log('\\n==== Thử nghiệm 1: Hash của (authenticatorData || clientDataJSONHash) ====');\n        // Tạo transaction chỉ với instruction xác minh chữ ký\n        const transaction1 = new Transaction().add(\n          createSecp256r1Instruction(\n            finalMessage, // Dùng hash của (authenticatorData || clientDataJSONHash)\n            pubkeyToUse, // publicKey đã đảo bit đầu\n            normalizedSignature, // signature đã chuẩn hóa\n            false // Không đảo ngược public key (đã đảo trước đó)\n          )\n        );\n        \n        // Đặt fee payer và blockhash\n        transaction1.feePayer = feePayer.publicKey;\n        const { blockhash: blockhash1 } = await connection.getLatestBlockhash();\n        transaction1.recentBlockhash = blockhash1;\n        \n        // Ký transaction bằng fee payer\n        transaction1.sign(feePayer);\n        \n        // Gửi transaction\n        const txId1 = await connection.sendRawTransaction(transaction1.serialize(), {\n          skipPreflight: true,\n          preflightCommitment: 'confirmed'\n        });\n        \n        console.log('Transaction xác minh #1 đã được gửi với ID:', txId1);\n        \n        // Chờ xác nhận\n        const confirmation1 = await connection.confirmTransaction(txId1, 'confirmed');\n        \n        if (confirmation1.value.err) {\n          console.error(`Thử nghiệm 1 thất bại: ${JSON.stringify(confirmation1.value.err)}`);\n        } else {\n          console.log('Thử nghiệm 1 thành công!');\n          verificationSuccess = true;\n          transactionResult = txId1;\n        }\n      } catch (error1) {\n        console.error('Thử nghiệm 1 thất bại:', error1);\n      }\n      \n      // Nếu thử nghiệm 1 thành công, không cần thử các cách khác\n      if (!verificationSuccess) {\n        // Thử nghiệm 2: Dùng hash của chỉ authenticatorData\n        try {\n          console.log('\\n==== Thử nghiệm 2: Hash của authenticatorData ====');\n          // Tạo transaction chỉ với instruction xác minh chữ ký\n          const transaction2 = new Transaction().add(\n            createSecp256r1Instruction(\n              Buffer.from(authDataHash), // Dùng hash của chỉ authenticatorData\n              pubkeyToUse, // publicKey đã đảo bit đầu\n              normalizedSignature, // signature đã chuẩn hóa\n              false // Không đảo ngược public key (đã đảo trước đó)\n            )\n          );\n          \n          // Đặt fee payer và blockhash\n          transaction2.feePayer = feePayer.publicKey;\n          const { blockhash: blockhash2 } = await connection.getLatestBlockhash();\n          transaction2.recentBlockhash = blockhash2;\n          \n          // Ký transaction bằng fee payer\n          transaction2.sign(feePayer);\n          \n          // Gửi transaction\n          const txId2 = await connection.sendRawTransaction(transaction2.serialize(), {\n            skipPreflight: true,\n            preflightCommitment: 'confirmed'\n          });\n          \n          console.log('Transaction xác minh #2 đã được gửi với ID:', txId2);\n          \n          // Chờ xác nhận\n          const confirmation2 = await connection.confirmTransaction(txId2, 'confirmed');\n          \n          if (confirmation2.value.err) {\n            console.error(`Thử nghiệm 2 thất bại: ${JSON.stringify(confirmation2.value.err)}`);\n          } else {\n            console.log('Thử nghiệm 2 thành công!');\n            verificationSuccess = true;\n            transactionResult = txId2;\n          }\n        } catch (error2) {\n          console.error('Thử nghiệm 2 thất bại:', error2);\n        }\n      }\n      \n      // Nếu thử nghiệm 2 cũng thất bại, thử nghiệm 3\n      if (!verificationSuccess) {\n        // Thử nghiệm 3: Dùng hash của (clientDataJSONHash || authenticatorData)\n        try {\n          console.log('\\n==== Thử nghiệm 3: Hash của (clientDataJSONHash || authenticatorData) ====');\n          // Tạo transaction chỉ với instruction xác minh chữ ký\n          const transaction3 = new Transaction().add(\n            createSecp256r1Instruction(\n              Buffer.from(reversedHash), // Dùng hash của (clientDataJSONHash || authenticatorData)\n              pubkeyToUse, // publicKey đã đảo bit đầu\n              normalizedSignature, // signature đã chuẩn hóa\n              false // Không đảo ngược public key (đã đảo trước đó)\n            )\n          );\n          \n          // Đặt fee payer và blockhash\n          transaction3.feePayer = feePayer.publicKey;\n          const { blockhash: blockhash3 } = await connection.getLatestBlockhash();\n          transaction3.recentBlockhash = blockhash3;\n          \n          // Ký transaction bằng fee payer\n          transaction3.sign(feePayer);\n          \n          // Gửi transaction\n          const txId3 = await connection.sendRawTransaction(transaction3.serialize(), {\n            skipPreflight: true,\n            preflightCommitment: 'confirmed'\n          });\n          \n          console.log('Transaction xác minh #3 đã được gửi với ID:', txId3);\n          \n          // Chờ xác nhận\n          const confirmation3 = await connection.confirmTransaction(txId3, 'confirmed');\n          \n          if (confirmation3.value.err) {\n            console.error(`Thử nghiệm 3 thất bại: ${JSON.stringify(confirmation3.value.err)}`);\n          } else {\n            console.log('Thử nghiệm 3 thành công!');\n            verificationSuccess = true;\n            transactionResult = txId3;\n          }\n        } catch (error3) {\n          console.error('Thử nghiệm 3 thất bại:', error3);\n        }\n      }\n      \n      // Cập nhật UI dựa trên kết quả\n      if (verificationSuccess && transactionResult) {\n        setVerificationStatus(VerificationStatus.SUCCESS);\n        setVerificationMessage(`Xác minh chữ ký thành công! ID giao dịch: ${transactionResult}`);\n      } else {\n        // Tất cả các phương pháp đều thất bại\n        throw new Error(\"Tất cả các phương pháp xác minh chữ ký đều thất bại. Vui lòng kiểm tra console để biết thêm chi tiết.\");\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi xác minh chữ ký:', error);\n      setVerificationStatus(VerificationStatus.ERROR);\n      setVerificationMessage(error.message || 'Đã xảy ra lỗi khi xác minh chữ ký');\n    }\n  };\n  \n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n  \n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return (\n        <div className=\"info-note\">\n          <p><strong>Lưu ý:</strong> Bạn đang kết nối đến validator cục bộ.</p>\n          <p>Cần khởi động validator với các tham số đúng để cài đặt chương trình MoonWallet:</p>\n          <pre>\n            solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n          </pre>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  // Thêm các hàm tiện ích\n  const findMultisigPDA = async () => {\n    const credentialId = localStorage.getItem('currentCredentialId');\n    if (!credentialId) {\n      throw new Error(\"Không tìm thấy credential ID\");\n    }\n    return getMultisigPDA(credentialId);\n  };\n\n  const findGuardianPDA = async (multisigPDA: PublicKey, guardianId: number) => {\n    return getGuardianPDA(multisigPDA, guardianId);\n  };\n\n  // Hàm chuyển đổi base64Url thành Buffer\n  const base64UrlToBuffer = (base64Url: string): ArrayBuffer => {\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const binaryString = window.atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  };\n  \n  return (\n    <div className=\"transfer-form\">\n      <h2>Chuyển SOL</h2>\n      \n      <div className=\"wallet-info\">\n        <p>Kết nối đến: <strong>{connectionEndpoint}</strong></p>\n        <p>Số dư hiện tại: <strong>{pdaBalance.toFixed(5)} SOL</strong></p>\n        \n        {/* Hiển thị trạng thái MoonWallet program */}\n        <div className={!isMoonWalletAvailable ? \"warning-message\" : \"info-message\"}>\n          <p><strong>Trạng thái chương trình:</strong></p>\n          <ul>\n            <li>\n              <span className={isMoonWalletAvailable ? \"status-ok\" : \"status-error\"}>\n                {isMoonWalletAvailable ? '✅' : '❌'}\n              </span> \n              MoonWallet: <code>{programID.toString()}</code>\n            </li>\n          </ul>\n          \n          {renderValidatorNote()}\n          \n          {!isMoonWalletAvailable && (\n            <div>\n              <p><strong>Lưu ý:</strong> Chương trình MoonWallet chưa được cài đặt trên validator.</p>\n              <p>Để cài đặt, chạy validator với lệnh:</p>\n              <pre>\n                solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n              </pre>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Thêm nút \"Chỉ xác minh chữ ký\" */}\n      <div className=\"verify-signature-section\">\n        <h3>Xác minh chữ ký</h3>\n        <p>Kiểm tra xem WebAuthn của bạn có hoạt động đúng trước khi thực hiện giao dịch.</p>\n        \n        {verificationStatus !== VerificationStatus.IDLE && (\n          <div className={\n            verificationStatus === VerificationStatus.SUCCESS ? \"success-message\" : \n            verificationStatus === VerificationStatus.ERROR ? \"error-message\" : \n            \"status-message\"\n          }>\n            {verificationMessage}\n          </div>\n        )}\n        \n        <button \n          type=\"button\" \n          className=\"secondary-button\" \n          onClick={handleVerifySignatureOnly}\n          disabled={verificationStatus === VerificationStatus.VERIFYING || !isMoonWalletAvailable}\n        >\n          {verificationStatus === VerificationStatus.VERIFYING ? 'Đang xác minh...' : 'Chỉ xác minh chữ ký'}\n        </button>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"destination\">Địa chỉ đích:</label>\n          <input\n            type=\"text\"\n            id=\"destination\"\n            value={destinationAddress}\n            onChange={handleDestinationChange}\n            placeholder=\"Nhập địa chỉ Solana\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Số lượng SOL:</label>\n          <input\n            type=\"text\"\n            id=\"amount\"\n            value={amount}\n            onChange={handleAmountChange}\n            placeholder=\"Ví dụ: 0.1\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        {success && <div className=\"success-message\">{success}</div>}\n        {error && <div className=\"error-message\">{error}</div>}\n        \n        {txStatus !== TransactionStatus.IDLE && (\n          <div className=\"status-message\">\n            <p>{renderStatusMessage()}</p>\n            {txStatus === TransactionStatus.CONFIRMING && (\n              <div className=\"loading-indicator\">Đang xác nhận...</div>\n            )}\n            {txId && (\n              <p className=\"transaction-id\">\n                ID Giao dịch: <a href={`https://explorer.solana.com/tx/${txId}`} target=\"_blank\" rel=\"noopener noreferrer\">{txId.slice(0, 8)}...{txId.slice(-8)}</a>\n              </p>\n            )}\n          </div>\n        )}\n        \n        <button \n          type=\"submit\" \n          className=\"primary-button\" \n          disabled={isTransferring || !isMoonWalletAvailable}\n        >\n          {isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'}\n        </button>\n      </form>\n      \n      <style>\n        {`\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n          \n          .verify-signature-section {\n            margin: 20px 0;\n            padding: 15px;\n            background-color: #f8f9fa;\n            border-radius: 4px;\n            border: 1px solid #e9ecef;\n          }\n          \n          .secondary-button {\n            background-color: #6c757d;\n            color: white;\n            border: none;\n            padding: 10px 15px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-weight: 500;\n            margin-top: 10px;\n          }\n          \n          .secondary-button:hover {\n            background-color: #5a6268;\n          }\n          \n          .secondary-button:disabled {\n            background-color: #adb5bd;\n            cursor: not-allowed;\n          }\n        `}\n      </style>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}