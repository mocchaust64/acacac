{"ast":null,"code":"import { Transaction, sendAndConfirmTransaction } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport { createSecp256r1Instruction } from './transactionUtils';\n\n// Hàm kiểm tra riêng secp256r1 instruction\nexport const testSecp256r1 = async (connection, message, publicKey, signature, payer) => {\n  try {\n    console.log('=== BẮT ĐẦU KIỂM TRA SECP256R1 ĐỘC LẬP ===');\n    console.log('Message:', message.toString('hex'));\n    console.log('Public key:', publicKey.toString('hex'));\n    console.log('Signature:', signature.toString('hex'));\n\n    // Tạo một instruction secp256r1 riêng biệt\n    const secp256r1Instruction = createSecp256r1Instruction(message, publicKey, signature);\n\n    // Tạo một transaction chỉ chứa instruction secp256r1\n    const transaction = new Transaction().add(secp256r1Instruction);\n\n    // Thiết lập thông tin transaction\n    transaction.feePayer = payer.publicKey;\n    const {\n      blockhash\n    } = await connection.getLatestBlockhash();\n    transaction.recentBlockhash = blockhash;\n\n    // Gửi transaction\n    console.log('Đang gửi transaction secp256r1 riêng biệt...');\n\n    // Log transaction cho debug\n    console.log('Transaction info:', {\n      feePayer: payer.publicKey.toString(),\n      recentBlockhash: blockhash,\n      instructions: transaction.instructions.map(ix => ({\n        programId: ix.programId.toString(),\n        data: ix.data.slice(0, 50).toString('hex') + '...'\n      }))\n    });\n    const txid = await sendAndConfirmTransaction(connection, transaction, [payer]);\n    console.log('✅ KIỂM TRA SECP256R1 THÀNH CÔNG!');\n    console.log('Transaction ID:', txid);\n    console.log('=== KẾT THÚC KIỂM TRA SECP256R1 ĐỘC LẬP ===');\n    return txid;\n  } catch (error) {\n    console.error('❌ KIỂM TRA SECP256R1 THẤT BẠI:', error);\n    console.log('=== KẾT THÚC KIỂM TRA SECP256R1 ĐỘC LẬP ===');\n    throw error;\n  }\n};\n\n// Hàm để thử nghiệm với nhiều khóa công khai khác nhau\nexport const testMultiplePublicKeys = async (connection, message, signature, payer, publicKeys) => {\n  console.log('=== BẮT ĐẦU KIỂM TRA VỚI NHIỀU KHÓA CÔNG KHAI ===');\n  for (let i = 0; i < publicKeys.length; i++) {\n    const pk = publicKeys[i];\n    console.log(`\\nThử nghiệm với khóa công khai #${i + 1}: ${pk.toString('hex')}`);\n    try {\n      // Tạo một instruction secp256r1 với khóa công khai hiện tại\n      const secp256r1Instruction = createSecp256r1Instruction(message, pk, signature);\n\n      // Tạo một transaction chỉ chứa instruction secp256r1\n      const transaction = new Transaction().add(secp256r1Instruction);\n\n      // Thiết lập thông tin transaction\n      transaction.feePayer = payer.publicKey;\n      const {\n        blockhash\n      } = await connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n\n      // Gửi transaction\n      console.log(`Đang gửi transaction với khóa #${i + 1}...`);\n      const txid = await sendAndConfirmTransaction(connection, transaction, [payer]);\n      console.log(`✅ THÀNH CÔNG với khóa #${i + 1}!`);\n      console.log('Transaction ID:', txid);\n    } catch (error) {\n      console.error(`❌ THẤT BẠI với khóa #${i + 1}:`, error);\n    }\n  }\n  console.log('=== KẾT THÚC KIỂM TRA VỚI NHIỀU KHÓA CÔNG KHAI ===');\n};\n\n// Tạo biến thể khóa công khai để thử nghiệm\nexport const generatePublicKeyVariants = publicKey => {\n  // Đảm bảo publicKey đúng kích thước\n  if (publicKey.length !== 33) {\n    throw new Error(`Public key phải có 33 bytes, nhưng có ${publicKey.length} bytes`);\n  }\n  const variants = [];\n\n  // Thêm khóa gốc\n  variants.push(Buffer.from(publicKey));\n\n  // Thêm khóa với byte đầu tiên thay đổi (nếu byte đầu là 0x02, đổi thành 0x03 và ngược lại)\n  const invertedPrefix = Buffer.from(publicKey);\n  invertedPrefix[0] = invertedPrefix[0] === 0x02 ? 0x03 : 0x02;\n  variants.push(invertedPrefix);\n\n  // Thêm khóa đảo ngược (trừ byte đầu tiên)\n  const reversed = Buffer.alloc(33);\n  reversed[0] = publicKey[0]; // Giữ nguyên byte đầu tiên\n  for (let i = 1; i < 33; i++) {\n    reversed[i] = publicKey[33 - i];\n  }\n  variants.push(reversed);\n  return variants;\n};","map":{"version":3,"names":["Transaction","sendAndConfirmTransaction","Buffer","createSecp256r1Instruction","testSecp256r1","connection","message","publicKey","signature","payer","console","log","toString","secp256r1Instruction","transaction","add","feePayer","blockhash","getLatestBlockhash","recentBlockhash","instructions","map","ix","programId","data","slice","txid","error","testMultiplePublicKeys","publicKeys","i","length","pk","generatePublicKeyVariants","Error","variants","push","from","invertedPrefix","reversed","alloc"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/utils/testUtils.ts"],"sourcesContent":["import { Connection, Transaction, PublicKey, Keypair, sendAndConfirmTransaction } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport { createSecp256r1Instruction } from './transactionUtils';\n\n// Hàm kiểm tra riêng secp256r1 instruction\nexport const testSecp256r1 = async (\n  connection: Connection,\n  message: Buffer,\n  publicKey: Buffer,\n  signature: Buffer,\n  payer: Keypair\n): Promise<string> => {\n  try {\n    console.log('=== BẮT ĐẦU KIỂM TRA SECP256R1 ĐỘC LẬP ===');\n    console.log('Message:', message.toString('hex'));\n    console.log('Public key:', publicKey.toString('hex'));\n    console.log('Signature:', signature.toString('hex'));\n    \n    // Tạo một instruction secp256r1 riêng biệt\n    const secp256r1Instruction = createSecp256r1Instruction(\n      message,\n      publicKey,\n      signature\n    );\n    \n    // Tạo một transaction chỉ chứa instruction secp256r1\n    const transaction = new Transaction().add(secp256r1Instruction);\n    \n    // Thiết lập thông tin transaction\n    transaction.feePayer = payer.publicKey;\n    const { blockhash } = await connection.getLatestBlockhash();\n    transaction.recentBlockhash = blockhash;\n    \n    // Gửi transaction\n    console.log('Đang gửi transaction secp256r1 riêng biệt...');\n    \n    // Log transaction cho debug\n    console.log('Transaction info:', {\n      feePayer: payer.publicKey.toString(),\n      recentBlockhash: blockhash,\n      instructions: transaction.instructions.map(ix => ({\n        programId: ix.programId.toString(),\n        data: ix.data.slice(0, 50).toString('hex') + '...'\n      }))\n    });\n    \n    const txid = await sendAndConfirmTransaction(\n      connection,\n      transaction,\n      [payer]\n    );\n    \n    console.log('✅ KIỂM TRA SECP256R1 THÀNH CÔNG!');\n    console.log('Transaction ID:', txid);\n    console.log('=== KẾT THÚC KIỂM TRA SECP256R1 ĐỘC LẬP ===');\n    \n    return txid;\n  } catch (error) {\n    console.error('❌ KIỂM TRA SECP256R1 THẤT BẠI:', error);\n    console.log('=== KẾT THÚC KIỂM TRA SECP256R1 ĐỘC LẬP ===');\n    throw error;\n  }\n};\n\n// Hàm để thử nghiệm với nhiều khóa công khai khác nhau\nexport const testMultiplePublicKeys = async (\n  connection: Connection,\n  message: Buffer,\n  signature: Buffer,\n  payer: Keypair,\n  publicKeys: Buffer[]\n): Promise<void> => {\n  console.log('=== BẮT ĐẦU KIỂM TRA VỚI NHIỀU KHÓA CÔNG KHAI ===');\n  \n  for (let i = 0; i < publicKeys.length; i++) {\n    const pk = publicKeys[i];\n    console.log(`\\nThử nghiệm với khóa công khai #${i+1}: ${pk.toString('hex')}`);\n    \n    try {\n      // Tạo một instruction secp256r1 với khóa công khai hiện tại\n      const secp256r1Instruction = createSecp256r1Instruction(\n        message,\n        pk,\n        signature\n      );\n      \n      // Tạo một transaction chỉ chứa instruction secp256r1\n      const transaction = new Transaction().add(secp256r1Instruction);\n      \n      // Thiết lập thông tin transaction\n      transaction.feePayer = payer.publicKey;\n      const { blockhash } = await connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      \n      // Gửi transaction\n      console.log(`Đang gửi transaction với khóa #${i+1}...`);\n      \n      const txid = await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer]\n      );\n      \n      console.log(`✅ THÀNH CÔNG với khóa #${i+1}!`);\n      console.log('Transaction ID:', txid);\n    } catch (error) {\n      console.error(`❌ THẤT BẠI với khóa #${i+1}:`, error);\n    }\n  }\n  \n  console.log('=== KẾT THÚC KIỂM TRA VỚI NHIỀU KHÓA CÔNG KHAI ===');\n};\n\n// Tạo biến thể khóa công khai để thử nghiệm\nexport const generatePublicKeyVariants = (publicKey: Buffer): Buffer[] => {\n  // Đảm bảo publicKey đúng kích thước\n  if (publicKey.length !== 33) {\n    throw new Error(`Public key phải có 33 bytes, nhưng có ${publicKey.length} bytes`);\n  }\n  \n  const variants: Buffer[] = [];\n  \n  // Thêm khóa gốc\n  variants.push(Buffer.from(publicKey));\n  \n  // Thêm khóa với byte đầu tiên thay đổi (nếu byte đầu là 0x02, đổi thành 0x03 và ngược lại)\n  const invertedPrefix = Buffer.from(publicKey);\n  invertedPrefix[0] = invertedPrefix[0] === 0x02 ? 0x03 : 0x02;\n  variants.push(invertedPrefix);\n  \n  // Thêm khóa đảo ngược (trừ byte đầu tiên)\n  const reversed = Buffer.alloc(33);\n  reversed[0] = publicKey[0]; // Giữ nguyên byte đầu tiên\n  for (let i = 1; i < 33; i++) {\n    reversed[i] = publicKey[33 - i];\n  }\n  variants.push(reversed);\n  \n  return variants;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}