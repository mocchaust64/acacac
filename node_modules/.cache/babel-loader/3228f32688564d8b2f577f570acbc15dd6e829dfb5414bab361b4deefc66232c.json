{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TrezorConnect = exports.CoreInSuiteDesktop = void 0;\nconst tslib_1 = require(\"tslib\");\nconst events_1 = tslib_1.__importDefault(require(\"events\"));\nconst ERRORS = tslib_1.__importStar(require(\"@trezor/connect/lib/constants/errors\"));\nconst events_2 = require(\"@trezor/connect/lib/events\");\nconst factory_1 = require(\"@trezor/connect/lib/factory\");\nconst utils_1 = require(\"@trezor/utils\");\nconst connectSettings_1 = require(\"../connectSettings\");\nclass CoreInSuiteDesktop {\n  eventEmitter = new events_1.default();\n  _settings;\n  ws;\n  messages;\n  constructor() {\n    this._settings = (0, connectSettings_1.parseConnectSettings)();\n    this.messages = (0, utils_1.createDeferredManager)();\n  }\n  manifest(data) {\n    this._settings = (0, connectSettings_1.parseConnectSettings)({\n      ...this._settings,\n      manifest: data\n    });\n  }\n  dispose() {\n    this.eventEmitter.removeAllListeners();\n    this._settings = (0, connectSettings_1.parseConnectSettings)();\n    this.ws?.close();\n    return Promise.resolve(undefined);\n  }\n  cancel(_error) {}\n  async handshake() {\n    const {\n      promise,\n      promiseId\n    } = this.messages.create(1000);\n    this.ws?.send(JSON.stringify({\n      id: promiseId,\n      type: events_2.POPUP.HANDSHAKE\n    }));\n    try {\n      await promise;\n    } catch (err) {\n      console.error(err);\n      throw new Error('Handshake timed out');\n    }\n  }\n  async init(settings = {}) {\n    const newSettings = (0, connectSettings_1.parseConnectSettings)({\n      ...this._settings,\n      ...settings\n    });\n    if (!newSettings.transports?.length) {\n      newSettings.transports = ['BridgeTransport', 'WebUsbTransport'];\n    }\n    this._settings = newSettings;\n    this.ws?.close();\n    const wsOpen = (0, utils_1.createDeferred)(1000);\n    this.ws = new WebSocket('ws://localhost:21335/connect-ws');\n    this.ws.addEventListener('opened', () => {\n      wsOpen.resolve();\n    });\n    this.ws.addEventListener('error', () => {\n      wsOpen.reject(new Error('WebSocket error'));\n      this.messages.rejectAll(new Error('WebSocket error'));\n    });\n    this.ws.addEventListener('message', event => {\n      try {\n        const data = JSON.parse(event.data);\n        this.messages.resolve(data.id, data);\n      } catch {}\n    });\n    this.ws.addEventListener('close', () => {\n      wsOpen.reject(new Error('WebSocket closed'));\n      this.messages.rejectAll(new Error('WebSocket closed'));\n    });\n    if (this.ws.readyState !== WebSocket.OPEN) {\n      setTimeout(() => {\n        if (this.ws?.readyState === WebSocket.OPEN) {\n          wsOpen.resolve();\n        }\n      }, 500);\n      await wsOpen.promise;\n    }\n    return await this.handshake();\n  }\n  setTransports() {\n    throw new Error('Unsupported right now');\n  }\n  async call(params) {\n    try {\n      if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        await this.init();\n      }\n      await this.handshake();\n      const {\n        promise,\n        promiseId\n      } = this.messages.create();\n      this.ws?.send(JSON.stringify({\n        id: promiseId,\n        type: events_2.IFRAME.CALL,\n        payload: params\n      }));\n      return promise;\n    } catch (err) {\n      return {\n        success: false,\n        payload: {\n          error: err.message\n        }\n      };\n    }\n  }\n  uiResponse(_response) {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  requestLogin() {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  disableWebUSB() {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  requestWebUSBDevice() {\n    throw ERRORS.TypedError('Method_InvalidPackage');\n  }\n  renderWebUSBButton() {}\n}\nexports.CoreInSuiteDesktop = CoreInSuiteDesktop;\nconst impl = new CoreInSuiteDesktop();\nexports.TrezorConnect = (0, factory_1.factory)({\n  eventEmitter: impl.eventEmitter,\n  init: impl.init.bind(impl),\n  call: impl.call.bind(impl),\n  setTransports: impl.setTransports.bind(impl),\n  manifest: impl.manifest.bind(impl),\n  requestLogin: impl.requestLogin.bind(impl),\n  uiResponse: impl.uiResponse.bind(impl),\n  cancel: impl.cancel.bind(impl),\n  dispose: impl.dispose.bind(impl)\n});\n//# sourceMappingURL=core-in-suite-desktop.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}