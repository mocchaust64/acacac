{"ast":null,"code":"import { Connection, Keypair, Transaction, SystemProgram, LAMPORTS_PER_SOL, clusterApiUrl, sendAndConfirmTransaction } from '@solana/web3.js';\n// Hàm chuyển đổi Buffer sang Uint8Array\nfunction bufferToUint8Array(buffer) {\n  return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n\n// Hàm concat cho Uint8Array\nfunction concatUint8Arrays(...arrays) {\n  // Tính tổng độ dài\n  const totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);\n\n  // Tạo mảng mới với tổng độ dài\n  const result = new Uint8Array(totalLength);\n\n  // Copy dữ liệu vào mảng mới\n  let offset = 0;\n  for (const arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\n\n// Hàm chuyển đổi từ BigInt (u64) sang bytes theo thứ tự little-endian\nconst bigIntToLeBytes = (value, bytesLength = 8) => {\n  const result = new Uint8Array(bytesLength);\n  for (let i = 0; i < bytesLength; i++) {\n    result[i] = Number(value >> BigInt(8 * i) & BigInt(0xff));\n  }\n  return result;\n};\n\n/**\n * Hàm đơn giản để chuyển SOL giữa các tài khoản\n * Phiên bản này chỉ sử dụng SystemProgram.transfer\n */\nexport const transferFunds = async (sender, recipient, amount, signatureInstruction) => {\n  try {\n    // Kết nối đến mạng Solana\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    // Lấy ví từ localStorage (hoặc từ nguồn phù hợp khác)\n    const privateKeyString = localStorage.getItem('privateKey');\n    if (!privateKeyString) {\n      throw new Error('Không tìm thấy khóa riêng tư trong localStorage');\n    }\n\n    // Tạo keypair từ khóa riêng tư\n    const privateKeyData = JSON.parse(privateKeyString);\n    const secretKey = new Uint8Array(privateKeyData);\n    const feePayer = Keypair.fromSecretKey(secretKey);\n\n    // Kiểm tra số dư\n    const senderBalance = await connection.getBalance(sender);\n    const lamportsToSend = Math.floor(amount * LAMPORTS_PER_SOL);\n    if (senderBalance < lamportsToSend) {\n      throw new Error(`Số dư không đủ. Hiện tại: ${senderBalance / LAMPORTS_PER_SOL} SOL`);\n    }\n\n    // Tạo transaction chuyển tiền\n    const transaction = new Transaction();\n\n    // Nếu có instruction xác minh chữ ký, thêm vào trước\n    if (signatureInstruction) {\n      console.log(\"Thêm instruction xác minh chữ ký WebAuthn vào transaction\");\n      transaction.add(signatureInstruction);\n    }\n\n    // Thêm instruction chuyển tiền\n    transaction.add(SystemProgram.transfer({\n      fromPubkey: sender,\n      toPubkey: recipient,\n      lamports: lamportsToSend\n    }));\n\n    // Gửi và xác nhận giao dịch\n    const signature = await sendAndConfirmTransaction(connection, transaction, [feePayer]);\n    console.log(`Chuyển ${amount} SOL thành công. Signature: ${signature}`);\n    return signature;\n  } catch (error) {\n    console.error('Lỗi khi chuyển tiền:', error);\n    throw new Error(`Lỗi khi chuyển tiền: ${error.message}`);\n  }\n};","map":{"version":3,"names":["Connection","Keypair","Transaction","SystemProgram","LAMPORTS_PER_SOL","clusterApiUrl","sendAndConfirmTransaction","bufferToUint8Array","buffer","Uint8Array","byteOffset","byteLength","concatUint8Arrays","arrays","totalLength","reduce","acc","arr","length","result","offset","set","bigIntToLeBytes","value","bytesLength","i","Number","BigInt","transferFunds","sender","recipient","amount","signatureInstruction","connection","privateKeyString","localStorage","getItem","Error","privateKeyData","JSON","parse","secretKey","feePayer","fromSecretKey","senderBalance","getBalance","lamportsToSend","Math","floor","transaction","console","log","add","transfer","fromPubkey","toPubkey","lamports","signature","error","message"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/acacac/src/utils/transferUtils.ts"],"sourcesContent":["import { \n  Connection,\n  PublicKey,\n  Keypair,\n  Transaction,\n  TransactionInstruction,\n  SystemProgram,\n  LAMPORTS_PER_SOL,\n  clusterApiUrl,\n  sendAndConfirmTransaction\n} from '@solana/web3.js';\nimport { Buffer } from 'buffer';\n\n// Hàm chuyển đổi Buffer sang Uint8Array\nfunction bufferToUint8Array(buffer: Buffer): Uint8Array {\n  return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n\n// Hàm concat cho Uint8Array\nfunction concatUint8Arrays(...arrays: Uint8Array[]): Uint8Array {\n  // Tính tổng độ dài\n  const totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);\n  \n  // Tạo mảng mới với tổng độ dài\n  const result = new Uint8Array(totalLength);\n  \n  // Copy dữ liệu vào mảng mới\n  let offset = 0;\n  for (const arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  \n  return result;\n}\n\n// Hàm chuyển đổi từ BigInt (u64) sang bytes theo thứ tự little-endian\nconst bigIntToLeBytes = (value: bigint, bytesLength: number = 8): Uint8Array => {\n  const result = new Uint8Array(bytesLength);\n  for (let i = 0; i < bytesLength; i++) {\n    result[i] = Number((value >> BigInt(8 * i)) & BigInt(0xff));\n  }\n  return result;\n};\n\n/**\n * Hàm đơn giản để chuyển SOL giữa các tài khoản\n * Phiên bản này chỉ sử dụng SystemProgram.transfer\n */\nexport const transferFunds = async (\n  sender: PublicKey,\n  recipient: PublicKey,\n  amount: number,\n  signatureInstruction?: TransactionInstruction\n): Promise<string> => {\n  try {\n    // Kết nối đến mạng Solana\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n    \n    // Lấy ví từ localStorage (hoặc từ nguồn phù hợp khác)\n    const privateKeyString = localStorage.getItem('privateKey');\n    if (!privateKeyString) {\n      throw new Error('Không tìm thấy khóa riêng tư trong localStorage');\n    }\n    \n    // Tạo keypair từ khóa riêng tư\n    const privateKeyData = JSON.parse(privateKeyString);\n    const secretKey = new Uint8Array(privateKeyData);\n    const feePayer = Keypair.fromSecretKey(secretKey);\n    \n    // Kiểm tra số dư\n    const senderBalance = await connection.getBalance(sender);\n    const lamportsToSend = Math.floor(amount * LAMPORTS_PER_SOL);\n    \n    if (senderBalance < lamportsToSend) {\n      throw new Error(`Số dư không đủ. Hiện tại: ${senderBalance / LAMPORTS_PER_SOL} SOL`);\n    }\n    \n    // Tạo transaction chuyển tiền\n    const transaction = new Transaction();\n    \n    // Nếu có instruction xác minh chữ ký, thêm vào trước\n    if (signatureInstruction) {\n      console.log(\"Thêm instruction xác minh chữ ký WebAuthn vào transaction\");\n      transaction.add(signatureInstruction);\n    }\n    \n    // Thêm instruction chuyển tiền\n    transaction.add(\n      SystemProgram.transfer({\n        fromPubkey: sender,\n        toPubkey: recipient,\n        lamports: lamportsToSend\n      })\n    );\n    \n    // Gửi và xác nhận giao dịch\n    const signature = await sendAndConfirmTransaction(\n      connection,\n      transaction,\n      [feePayer]\n    );\n    \n    console.log(`Chuyển ${amount} SOL thành công. Signature: ${signature}`);\n    return signature;\n  } catch (error: any) {\n    console.error('Lỗi khi chuyển tiền:', error);\n    throw new Error(`Lỗi khi chuyển tiền: ${error.message}`);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}