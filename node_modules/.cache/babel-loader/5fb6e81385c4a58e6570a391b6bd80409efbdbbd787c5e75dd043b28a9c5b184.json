{"ast":null,"code":"var _jsxFileName = \"/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicKey, SendTransactionError } from '@solana/web3.js';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createTransferTx, programID, SECP256R1_PROGRAM_ID, testSecp256r1Signature } from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst convertDERtoRaw = derSignature => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n\n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n\n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n\n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n\n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  return rawSignature;\n};\n\n// Interface cho props của component\n// Enum cho các trạng thái giao dịch\nvar TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[\"IDLE\"] = \"idle\";\n  TransactionStatus[\"PREPARING\"] = \"preparing\";\n  TransactionStatus[\"SIGNING\"] = \"signing\";\n  TransactionStatus[\"BUILDING_TX\"] = \"building_tx\";\n  TransactionStatus[\"SUBMITTING\"] = \"submitting\";\n  TransactionStatus[\"CONFIRMING\"] = \"confirming\";\n  TransactionStatus[\"SUCCESS\"] = \"success\";\n  TransactionStatus[\"ERROR\"] = \"error\";\n  return TransactionStatus;\n}(TransactionStatus || {});\nexport const TransferForm = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  _s();\n  // State\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [isTransferring, setIsTransferring] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [nonce, setNonce] = useState(0);\n  const [txStatus, setTxStatus] = useState(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState('');\n\n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n\n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    checkPrograms();\n  }, [connection]);\n\n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n\n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n\n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n\n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n\n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = e => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n\n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = e => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n\n  // Xử lý khi submit form\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        throw new Error(errorMsg);\n      }\n\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n\n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n\n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n\n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n\n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n\n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n\n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n\n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n\n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n\n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(null, messageString, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n\n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n\n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64.replace(/-/g, '+').replace(/_/g, '/').padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          console.log('Challenge from WebAuthn (hex):', challengeBytes.toString('hex'));\n\n          // Kiểm tra xem challenge từ WebAuthn có giống với hash của message không\n          const originalHashHex = Buffer.from(messageHashBytes).toString('hex');\n          const challengeHex = challengeBytes.toString('hex');\n          console.log('Original hash vs WebAuthn challenge:');\n          console.log('- Original hash:', originalHashHex);\n          console.log('- WebAuthn challenge:', challengeHex);\n          console.log('- Match?', originalHashHex === challengeHex);\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      setSuccess(''); // Xóa thông báo thành công tạm thời\n\n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n\n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n\n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n\n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n\n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n\n              // KIỂM TRA CHỮ KÝ SECP256R1 RIÊNG BIỆT\n              try {\n                setTxStatus(TransactionStatus.SIGNING);\n                setSuccess('Đang kiểm tra chữ ký secp256r1...');\n                const signatureTestResult = await testSecp256r1Signature(connection, webAuthnPubKey, signature, Buffer.from(messageHashBytes));\n                if (signatureTestResult.isValid) {\n                  console.log('✅ Kiểm tra chữ ký secp256r1 thành công!');\n                  setSuccess('Kiểm tra chữ ký thành công! Đang tiếp tục giao dịch...');\n                } else {\n                  console.error('❌ Kiểm tra chữ ký secp256r1 thất bại:', signatureTestResult.error);\n                  setError(`Lỗi khi kiểm tra chữ ký: ${signatureTestResult.error}`);\n                  setIsTransferring(false);\n                  setTxStatus(TransactionStatus.ERROR);\n                  return;\n                }\n              } catch (testError) {\n                console.error('Lỗi khi thực hiện kiểm tra chữ ký:', testError);\n                // Tiếp tục quá trình giao dịch ngay cả khi kiểm tra riêng thất bại\n                console.log('Tiếp tục giao dịch bình thường mặc dù kiểm tra riêng thất bại...');\n              }\n\n              // Tiếp tục quá trình tạo và gửi transaction với cả 2 instruction\n              setTxStatus(TransactionStatus.BUILDING_TX);\n\n              // Tạo transaction với verify_and_execute instruction\n              const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, messageBytes,\n              // Sử dụng messageBytes (chưa hash) cho verify_and_execute\n              webAuthnPubKey);\n\n              // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n\n              // Đặt fee payer và blockhash\n              transferTx.feePayer = webAuthnPubKey;\n              const {\n                blockhash\n              } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n\n              // Ký transaction bằng fee payer\n              transferTx.sign(webAuthnPubKey);\n\n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: webAuthnPubKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n\n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              try {\n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true,\n                  // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                console.log('Transaction đã được gửi với ID:', transactionId);\n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n\n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n\n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n\n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n\n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n\n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n\n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n\n        // Lấy dữ liệu tài khoản guardian để lấy public key\n        const guardianAccount = await connection.getAccountInfo(guardianPDA);\n        if (!guardianAccount) {\n          throw new Error('Không thể tìm thấy thông tin guardian');\n        }\n\n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n\n        let webAuthnPubKey;\n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n\n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n\n        // KIỂM TRA CHỮ KÝ SECP256R1 RIÊNG BIỆT\n        try {\n          setTxStatus(TransactionStatus.SIGNING);\n          setSuccess('Đang kiểm tra chữ ký secp256r1...');\n          const signatureTestResult = await testSecp256r1Signature(connection, webAuthnPubKey, signature, Buffer.from(messageHashBytes));\n          if (signatureTestResult.isValid) {\n            console.log('✅ Kiểm tra chữ ký secp256r1 thành công!');\n            setSuccess('Kiểm tra chữ ký thành công! Đang tiếp tục giao dịch...');\n          } else {\n            console.error('❌ Kiểm tra chữ ký secp256r1 thất bại:', signatureTestResult.error);\n            setError(`Lỗi khi kiểm tra chữ ký: ${signatureTestResult.error}`);\n            setIsTransferring(false);\n            setTxStatus(TransactionStatus.ERROR);\n            return;\n          }\n        } catch (testError) {\n          console.error('Lỗi khi thực hiện kiểm tra chữ ký:', testError);\n          // Tiếp tục quá trình giao dịch ngay cả khi kiểm tra riêng thất bại\n          console.log('Tiếp tục giao dịch bình thường mặc dù kiểm tra riêng thất bại...');\n        }\n\n        // Tiếp tục quá trình tạo và gửi transaction với cả 2 instruction\n        setTxStatus(TransactionStatus.BUILDING_TX);\n\n        // Tạo transaction với verify_and_execute instruction\n        const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, messageBytes,\n        // Sử dụng messageBytes (chưa hash) cho verify_and_execute\n        webAuthnPubKey);\n\n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n\n        // Đặt fee payer và blockhash\n        transferTx.feePayer = webAuthnPubKey;\n        const {\n          blockhash\n        } = await connection.getLatestBlockhash();\n        transferTx.recentBlockhash = blockhash;\n\n        // Ký transaction bằng fee payer\n        transferTx.sign(webAuthnPubKey);\n\n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: webAuthnPubKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n\n        // Gửi transaction\n        setTxStatus(TransactionStatus.SUBMITTING);\n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true,\n            // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          console.log('Transaction đã được gửi với ID:', transactionId);\n          setTxId(transactionId);\n          console.log('Transaction ID:', transactionId);\n\n          // Chờ xác nhận\n          setTxStatus(TransactionStatus.CONFIRMING);\n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n          if (confirmation.value.err) {\n            throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n          }\n\n          // Hiển thị thông báo thành công\n          setTxStatus(TransactionStatus.SUCCESS);\n          setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n          setAmount('');\n          setDestinationAddress('');\n\n          // Gọi callback nếu có\n          if (onTransferSuccess) {\n            onTransferSuccess();\n          }\n        } catch (sendError) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n\n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n\n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n\n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n\n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n\n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-note\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"L\\u01B0u \\xFD:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 14\n          }, this), \" B\\u1EA1n \\u0111ang k\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn validator c\\u1EE5c b\\u1ED9.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"C\\u1EA7n kh\\u1EDFi \\u0111\\u1ED9ng validator v\\u1EDBi c\\xE1c tham s\\u1ED1 \\u0111\\xFAng \\u0111\\u1EC3 c\\xE0i \\u0111\\u1EB7t ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transfer-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chuy\\u1EC3n SOL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"K\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: connectionEndpoint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"S\\u1ED1 d\\u01B0 hi\\u1EC7n t\\u1EA1i: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pdaBalance.toFixed(5), \" SOL\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: !isMoonWalletAvailable ? \"warning-message\" : \"info-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tr\\u1EA1ng th\\xE1i ch\\u01B0\\u01A1ng tr\\xECnh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: isMoonWalletAvailable ? \"status-ok\" : \"status-error\",\n              children: isMoonWalletAvailable ? '✅' : '❌'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 810,\n              columnNumber: 15\n            }, this), \"MoonWallet: \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: programID.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 11\n        }, this), renderValidatorNote(), !isMoonWalletAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"L\\u01B0u \\xFD:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 18\n            }, this), \" Ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet ch\\u01B0a \\u0111\\u01B0\\u1EE3c c\\xE0i \\u0111\\u1EB7t tr\\xEAn validator.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 821,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u0110\\u1EC3 c\\xE0i \\u0111\\u1EB7t, ch\\u1EA1y validator v\\u1EDBi l\\u1EC7nh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"destination\",\n          children: \"\\u0110\\u1ECBa ch\\u1EC9 \\u0111\\xEDch:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"destination\",\n          value: destinationAddress,\n          onChange: handleDestinationChange,\n          placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa ch\\u1EC9 Solana\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 834,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amount\",\n          value: amount,\n          onChange: handleAmountChange,\n          placeholder: \"V\\xED d\\u1EE5: 0.1\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 9\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 19\n      }, this), txStatus !== TransactionStatus.IDLE && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: renderStatusMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 13\n        }, this), txStatus === TransactionStatus.CONFIRMING && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"\\u0110ang x\\xE1c nh\\u1EADn...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 15\n        }, this), txId && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"transaction-id\",\n          children: [\"ID Giao d\\u1ECBch: \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://explorer.solana.com/tx/${txId}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: [txId.slice(0, 8), \"...\", txId.slice(-8)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"primary-button\",\n        disabled: isTransferring || !isMoonWalletAvailable,\n        children: isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 875,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 831,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 884,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 798,\n    columnNumber: 5\n  }, this);\n};\n_s(TransferForm, \"03LlHdEfN95TQ4IN3Tx5AKL7gOo=\");\n_c = TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","PublicKey","SendTransactionError","LAMPORTS_PER_SOL","createTransferTx","programID","SECP256R1_PROGRAM_ID","testSecp256r1Signature","getWebAuthnAssertion","getGuardianPDA","getMultisigPDA","getWalletByCredentialId","jsxDEV","_jsxDEV","convertDERtoRaw","derSignature","console","error","Uint8Array","rLength","rStart","rEnd","sLength","sStart","sEnd","r","slice","s","rPadded","sPadded","length","set","rawSignature","log","TransactionStatus","TransferForm","walletAddress","credentialId","guardianId","onTransferSuccess","onTransferError","connection","pdaBalance","_s","destinationAddress","setDestinationAddress","amount","setAmount","isTransferring","setIsTransferring","setError","success","setSuccess","walletBalance","setWalletBalance","nonce","setNonce","txStatus","setTxStatus","IDLE","txId","setTxId","isMoonWalletAvailable","setIsMoonWalletAvailable","connectionEndpoint","setConnectionEndpoint","checkPrograms","endpoint","rpcEndpoint","moonWalletInfo","getAccountInfo","warn","toString","undefined","loadWalletInfo","multisigPDA","accountInfo","transactionNonce","data","readBigUInt64LE","Number","handleDestinationChange","e","target","value","handleAmountChange","test","handleSubmit","preventDefault","PREPARING","errorMsg","Error","parseFloat","amountLamports","Math","floor","destinationPublicKey","nextNonce","timestamp","Date","now","formattedAmount","messageString","messageBytes","TextEncoder","encode","Array","from","map","b","padStart","join","messageHash","crypto","subtle","digest","messageHashBytes","Buffer","toBase58","guardianPDA","SIGNING","assertion","TextDecoder","decode","clientDataJSON","clientDataObj","JSON","parse","challenge","challengeBase64","base64Standard","replace","padEnd","challengeBytes","originalHashHex","challengeHex","signature","byteLength","credentialMapping","guardianPublicKey","localStorageData","localStorage","getItem","localMapping","webAuthnPubKey","signatureTestResult","isValid","ERROR","testError","BUILDING_TX","transferTx","instructions","unshift","secp256r1Ix","feePayer","blockhash","getLatestBlockhash","recentBlockhash","sign","ix","programId","keys","k","pubkey","isSigner","isWritable","dataSize","SUBMITTING","transactionId","sendRawTransaction","serialize","skipPreflight","preflightCommitment","CONFIRMING","confirmation","confirmTransaction","err","stringify","SUCCESS","sendError","message","logs","isArray","logError","errorMessage","includes","localStorageError","guardianAccount","hasWebAuthnPubKey","renderStatusMessage","renderValidatorNote","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onSubmit","htmlFor","type","id","onChange","placeholder","disabled","required","href","rel","_c","$RefreshReg$"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, Connection, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { \n  createTransferTx, \n  createSecp256r1Instruction,\n  programID,\n  SECP256R1_PROGRAM_ID,\n  testSecp256r1Signature\n} from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = (derSignature: Uint8Array): Uint8Array => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n  \n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  \n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n  \n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n  \n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  \n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  \n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n  \n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  \n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  \n  return rawSignature;\n};\n\n// Interface cho props của component\ninterface TransferFormProps {\n  walletAddress: string;  \n  credentialId: string;   \n  guardianId: number;     \n  onTransferSuccess?: () => void;\n  onTransferError?: (error: Error) => void;\n  // Thêm connection vào props\n  connection: Connection;\n  // Thêm pdaBalance để hiển thị số dư chính xác\n  pdaBalance?: number;\n}\n\n// Enum cho các trạng thái giao dịch\nenum TransactionStatus {\n  IDLE = 'idle',\n  PREPARING = 'preparing',\n  SIGNING = 'signing',\n  BUILDING_TX = 'building_tx',\n  SUBMITTING = 'submitting',\n  CONFIRMING = 'confirming',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\nexport const TransferForm: React.FC<TransferFormProps> = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  // State\n  const [destinationAddress, setDestinationAddress] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [isTransferring, setIsTransferring] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [nonce, setNonce] = useState<number>(0);\n  const [txStatus, setTxStatus] = useState<TransactionStatus>(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState<string>('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState<boolean>(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState<string>('');\n  \n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n        \n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          \n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    \n    checkPrograms();\n  }, [connection]);\n  \n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n  \n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n        \n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n        \n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        \n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        \n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n        \n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    \n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n  \n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n  \n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n  \n  // Xử lý khi submit form\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    \n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        \n        throw new Error(errorMsg);\n      }\n      \n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      \n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n      \n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n      \n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n      \n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey: PublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n      \n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n      \n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      \n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n      \n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n      \n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n      \n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n      \n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(null, messageString, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n      \n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n        \n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64\n            .replace(/-/g, '+')\n            .replace(/_/g, '/')\n            .padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          console.log('Challenge from WebAuthn (hex):', challengeBytes.toString('hex'));\n          \n          // Kiểm tra xem challenge từ WebAuthn có giống với hash của message không\n          const originalHashHex = Buffer.from(messageHashBytes).toString('hex');\n          const challengeHex = challengeBytes.toString('hex');\n          console.log('Original hash vs WebAuthn challenge:');\n          console.log('- Original hash:', originalHashHex);\n          console.log('- WebAuthn challenge:', challengeHex);\n          console.log('- Match?', originalHashHex === challengeHex);\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      \n      setSuccess(''); // Xóa thông báo thành công tạm thời\n      \n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n      \n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n      \n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n              \n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n              \n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n              \n              // KIỂM TRA CHỮ KÝ SECP256R1 RIÊNG BIỆT\n              try {\n                setTxStatus(TransactionStatus.SIGNING);\n                setSuccess('Đang kiểm tra chữ ký secp256r1...');\n                \n                const signatureTestResult = await testSecp256r1Signature(\n                  connection,\n                  webAuthnPubKey,\n                  signature,\n                  Buffer.from(messageHashBytes)\n                );\n                \n                if (signatureTestResult.isValid) {\n                  console.log('✅ Kiểm tra chữ ký secp256r1 thành công!');\n                  setSuccess('Kiểm tra chữ ký thành công! Đang tiếp tục giao dịch...');\n                } else {\n                  console.error('❌ Kiểm tra chữ ký secp256r1 thất bại:', signatureTestResult.error);\n                  setError(`Lỗi khi kiểm tra chữ ký: ${signatureTestResult.error}`);\n                  setIsTransferring(false);\n                  setTxStatus(TransactionStatus.ERROR);\n                  return;\n                }\n              } catch (testError) {\n                console.error('Lỗi khi thực hiện kiểm tra chữ ký:', testError);\n                // Tiếp tục quá trình giao dịch ngay cả khi kiểm tra riêng thất bại\n                console.log('Tiếp tục giao dịch bình thường mặc dù kiểm tra riêng thất bại...');\n              }\n              \n              // Tiếp tục quá trình tạo và gửi transaction với cả 2 instruction\n              setTxStatus(TransactionStatus.BUILDING_TX);\n              \n              // Tạo transaction với verify_and_execute instruction\n              const transferTx = createTransferTx(\n                multisigPDA,\n                guardianPDA,\n                destinationPublicKey,\n                amountLamports,\n                nextNonce,\n                timestamp,\n                messageBytes, // Sử dụng messageBytes (chưa hash) cho verify_and_execute\n                webAuthnPubKey\n              );\n              \n              // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n              \n              // Đặt fee payer và blockhash\n              transferTx.feePayer = webAuthnPubKey;\n              const { blockhash } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n              \n              // Ký transaction bằng fee payer\n              transferTx.sign(webAuthnPubKey);\n              \n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: webAuthnPubKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n              \n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              \n              try {\n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                \n                console.log('Transaction đã được gửi với ID:', transactionId);\n                \n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n                \n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                \n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                \n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n                \n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n                \n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                \n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError: any) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  \n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n                  \n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n                  \n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  \n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  \n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n        \n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n        \n        // Lấy dữ liệu tài khoản guardian để lấy public key\n        const guardianAccount = await connection.getAccountInfo(guardianPDA);\n        \n        if (!guardianAccount) {\n          throw new Error('Không thể tìm thấy thông tin guardian');\n        }\n        \n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n        \n        let webAuthnPubKey: Buffer; \n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n        \n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n      \n        // KIỂM TRA CHỮ KÝ SECP256R1 RIÊNG BIỆT\n        try {\n          setTxStatus(TransactionStatus.SIGNING);\n          setSuccess('Đang kiểm tra chữ ký secp256r1...');\n          \n          const signatureTestResult = await testSecp256r1Signature(\n            connection,\n            webAuthnPubKey,\n            signature,\n            Buffer.from(messageHashBytes)\n          );\n          \n          if (signatureTestResult.isValid) {\n            console.log('✅ Kiểm tra chữ ký secp256r1 thành công!');\n            setSuccess('Kiểm tra chữ ký thành công! Đang tiếp tục giao dịch...');\n          } else {\n            console.error('❌ Kiểm tra chữ ký secp256r1 thất bại:', signatureTestResult.error);\n            setError(`Lỗi khi kiểm tra chữ ký: ${signatureTestResult.error}`);\n            setIsTransferring(false);\n            setTxStatus(TransactionStatus.ERROR);\n            return;\n          }\n        } catch (testError) {\n          console.error('Lỗi khi thực hiện kiểm tra chữ ký:', testError);\n          // Tiếp tục quá trình giao dịch ngay cả khi kiểm tra riêng thất bại\n          console.log('Tiếp tục giao dịch bình thường mặc dù kiểm tra riêng thất bại...');\n        }\n        \n        // Tiếp tục quá trình tạo và gửi transaction với cả 2 instruction\n        setTxStatus(TransactionStatus.BUILDING_TX);\n        \n        // Tạo transaction với verify_and_execute instruction\n        const transferTx = createTransferTx(\n          multisigPDA,\n          guardianPDA,\n          destinationPublicKey,\n          amountLamports,\n          nextNonce,\n          timestamp,\n          messageBytes, // Sử dụng messageBytes (chưa hash) cho verify_and_execute\n          webAuthnPubKey\n        );\n        \n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n        \n        // Đặt fee payer và blockhash\n        transferTx.feePayer = webAuthnPubKey;\n        const { blockhash } = await connection.getLatestBlockhash();\n        transferTx.recentBlockhash = blockhash;\n        \n        // Ký transaction bằng fee payer\n        transferTx.sign(webAuthnPubKey);\n        \n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: webAuthnPubKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n        \n        // Gửi transaction\n        setTxStatus(TransactionStatus.SUBMITTING);\n        \n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          \n          console.log('Transaction đã được gửi với ID:', transactionId);\n          \n          setTxId(transactionId);\n          console.log('Transaction ID:', transactionId);\n          \n          // Chờ xác nhận\n          setTxStatus(TransactionStatus.CONFIRMING);\n          \n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n          \n          if (confirmation.value.err) {\n            throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n          }\n          \n          // Hiển thị thông báo thành công\n          setTxStatus(TransactionStatus.SUCCESS);\n          setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n          setAmount('');\n          setDestinationAddress('');\n          \n          // Gọi callback nếu có\n          if (onTransferSuccess) {\n            onTransferSuccess();\n          }\n        } catch (sendError: any) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            \n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n            \n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n            \n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            \n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            \n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n      \n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  \n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n  \n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return (\n        <div className=\"info-note\">\n          <p><strong>Lưu ý:</strong> Bạn đang kết nối đến validator cục bộ.</p>\n          <p>Cần khởi động validator với các tham số đúng để cài đặt chương trình MoonWallet:</p>\n          <pre>\n            solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n          </pre>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  return (\n    <div className=\"transfer-form\">\n      <h2>Chuyển SOL</h2>\n      \n      <div className=\"wallet-info\">\n        <p>Kết nối đến: <strong>{connectionEndpoint}</strong></p>\n        <p>Số dư hiện tại: <strong>{pdaBalance.toFixed(5)} SOL</strong></p>\n        \n        {/* Hiển thị trạng thái MoonWallet program */}\n        <div className={!isMoonWalletAvailable ? \"warning-message\" : \"info-message\"}>\n          <p><strong>Trạng thái chương trình:</strong></p>\n          <ul>\n            <li>\n              <span className={isMoonWalletAvailable ? \"status-ok\" : \"status-error\"}>\n                {isMoonWalletAvailable ? '✅' : '❌'}\n              </span> \n              MoonWallet: <code>{programID.toString()}</code>\n            </li>\n          </ul>\n          \n          {renderValidatorNote()}\n          \n          {!isMoonWalletAvailable && (\n            <div>\n              <p><strong>Lưu ý:</strong> Chương trình MoonWallet chưa được cài đặt trên validator.</p>\n              <p>Để cài đặt, chạy validator với lệnh:</p>\n              <pre>\n                solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n              </pre>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"destination\">Địa chỉ đích:</label>\n          <input\n            type=\"text\"\n            id=\"destination\"\n            value={destinationAddress}\n            onChange={handleDestinationChange}\n            placeholder=\"Nhập địa chỉ Solana\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Số lượng SOL:</label>\n          <input\n            type=\"text\"\n            id=\"amount\"\n            value={amount}\n            onChange={handleAmountChange}\n            placeholder=\"Ví dụ: 0.1\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        {success && <div className=\"success-message\">{success}</div>}\n        {error && <div className=\"error-message\">{error}</div>}\n        \n        {txStatus !== TransactionStatus.IDLE && (\n          <div className=\"status-message\">\n            <p>{renderStatusMessage()}</p>\n            {txStatus === TransactionStatus.CONFIRMING && (\n              <div className=\"loading-indicator\">Đang xác nhận...</div>\n            )}\n            {txId && (\n              <p className=\"transaction-id\">\n                ID Giao dịch: <a href={`https://explorer.solana.com/tx/${txId}`} target=\"_blank\" rel=\"noopener noreferrer\">{txId.slice(0, 8)}...{txId.slice(-8)}</a>\n              </p>\n            )}\n          </div>\n        )}\n        \n        <button \n          type=\"submit\" \n          className=\"primary-button\" \n          disabled={isTransferring || !isMoonWalletAvailable}\n        >\n          {isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'}\n        </button>\n      </form>\n      \n      <style>\n        {`\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n        `}\n      </style>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}