{"ast":null,"code":"var _jsxFileName = \"/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createTransferTx, createSecp256r1Instruction } from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\n\n// Interface cho props của component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransferForm = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  _s();\n  // State\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [isTransferring, setIsTransferring] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [nonce, setNonce] = useState(0);\n\n  // Xóa dòng này vì đã nhận connection từ props\n  // const { connection } = useConnection();\n\n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n\n  // Lấy số dư ví và nonce hiện tại - giữ nguyên nếu vẫn cần lấy nonce\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n\n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n\n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n\n        // Chỉ cập nhật nonce từ accountInfo, không cập nhật balance nữa vì đã có pdaBalance\n        // const balance = await connection.getBalance(multisigPDA);\n        // setWalletBalance(balance / LAMPORTS_PER_SOL);\n\n        // Tạm thời đặt nonce = 0 cho demo\n        setNonce(0);\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n\n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = e => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n  };\n\n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = e => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n    }\n  };\n\n  // Xử lý khi submit form - cập nhật phần check balance để sử dụng pdaBalance từ props\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    try {\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n\n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n\n      // Kiểm tra số dư - sử dụng pdaBalance từ props thay vì walletBalance từ state\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n\n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n\n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n\n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // Tạo message chuẩn cho giao dịch chuyển tiền\n      const messageString = `transfer:${amount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message chuẩn:', messageString);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n\n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n\n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n\n      // Ký message bằng WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn');\n      }\n\n      // Sử dụng kết quả từ WebAuthn assertion\n      const signature = Buffer.from(assertion.signature);\n\n      // Tạo một buffer chứa public key nén\n      // Lưu ý: Trong trường hợp thực tế, bạn cần lấy public key từ guardian account hoặc localStorage\n      // Đây chỉ là giả định, trong thực tế bạn cần triển khai phù hợp\n      const publicKey = Buffer.from(new Uint8Array(33)); // Giả định 33 bytes cho publicKey nén\n\n      // Tạo instruction secp256r1\n      const secp256r1Ix = createSecp256r1Instruction(publicKey, signature, Buffer.from(messageHashBytes));\n\n      // Fee payer (tạm thời là keypair ngẫu nhiên)\n      const feePayer = web3.Keypair.generate();\n\n      // Xin SOL airdrop để trả phí\n      const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 100 // 0.01 SOL để trả phí\n      );\n      await connection.confirmTransaction(airdropSignature);\n\n      // Tạo instruction verify_and_execute\n      const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, messageBytes, feePayer.publicKey);\n\n      // Thêm cả hai instruction vào transaction\n      transferTx.add(secp256r1Ix);\n\n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const {\n        blockhash\n      } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n\n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n\n      // Gửi transaction\n      const txId = await connection.sendRawTransaction(transferTx.serialize());\n      console.log('Transaction ID:', txId);\n\n      // Chờ xác nhận\n      const confirmation = await connection.confirmTransaction(txId);\n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n\n      // Hiển thị thông báo thành công\n      setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công!`);\n      setAmount('');\n      setDestinationAddress('');\n\n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n\n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transfer-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chuy\\u1EC3n SOL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"S\\u1ED1 d\\u01B0 hi\\u1EC7n t\\u1EA1i: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pdaBalance.toFixed(5), \" SOL\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"destination\",\n          children: \"\\u0110\\u1ECBa ch\\u1EC9 \\u0111\\xEDch:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"destination\",\n          value: destinationAddress,\n          onChange: handleDestinationChange,\n          placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa ch\\u1EC9 Solana\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amount\",\n          value: amount,\n          onChange: handleAmountChange,\n          placeholder: \"V\\xED d\\u1EE5: 0.1\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 19\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"primary-button\",\n        disabled: isTransferring,\n        children: isTransferring ? 'Đang chuyển...' : 'Chuyển SOL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(TransferForm, \"CPOKMObiq+ZXvFAbOZn1x0ECffo=\");\n_c = TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","PublicKey","web3","LAMPORTS_PER_SOL","createTransferTx","createSecp256r1Instruction","getWebAuthnAssertion","getGuardianPDA","getMultisigPDA","jsxDEV","_jsxDEV","TransferForm","walletAddress","credentialId","guardianId","onTransferSuccess","onTransferError","connection","pdaBalance","_s","destinationAddress","setDestinationAddress","amount","setAmount","isTransferring","setIsTransferring","error","setError","success","setSuccess","walletBalance","setWalletBalance","nonce","setNonce","undefined","loadWalletInfo","multisigPDA","accountInfo","getAccountInfo","console","handleDestinationChange","e","target","value","handleAmountChange","test","handleSubmit","preventDefault","Error","parseFloat","amountLamports","Math","floor","destinationPublicKey","nextNonce","timestamp","Date","now","messageString","log","messageBytes","TextEncoder","encode","messageHash","crypto","subtle","digest","messageHashBytes","Uint8Array","toBase58","guardianPDA","assertion","signature","Buffer","from","publicKey","secp256r1Ix","feePayer","Keypair","generate","airdropSignature","requestAirdrop","confirmTransaction","transferTx","add","blockhash","getLatestBlockhash","recentBlockhash","sign","txId","sendRawTransaction","serialize","confirmation","err","JSON","stringify","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onSubmit","htmlFor","type","id","onChange","placeholder","disabled","required","_c","$RefreshReg$"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, Connection } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { \n  createTransferTx, \n  createSecp256r1Instruction \n} from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\n\n// Interface cho props của component\ninterface TransferFormProps {\n  walletAddress: string;  \n  credentialId: string;   \n  guardianId: number;     \n  onTransferSuccess?: () => void;\n  onTransferError?: (error: Error) => void;\n  // Thêm connection vào props\n  connection: Connection;\n  // Thêm pdaBalance để hiển thị số dư chính xác\n  pdaBalance?: number;\n}\n\nexport const TransferForm: React.FC<TransferFormProps> = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  // State\n  const [destinationAddress, setDestinationAddress] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [isTransferring, setIsTransferring] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [nonce, setNonce] = useState<number>(0);\n  \n  // Xóa dòng này vì đã nhận connection từ props\n  // const { connection } = useConnection();\n  \n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n  \n  // Lấy số dư ví và nonce hiện tại - giữ nguyên nếu vẫn cần lấy nonce\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n        \n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n        \n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        \n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        \n        // Chỉ cập nhật nonce từ accountInfo, không cập nhật balance nữa vì đã có pdaBalance\n        // const balance = await connection.getBalance(multisigPDA);\n        // setWalletBalance(balance / LAMPORTS_PER_SOL);\n        \n        // Tạm thời đặt nonce = 0 cho demo\n        setNonce(0);\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    \n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n  \n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n  };\n  \n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n    }\n  };\n  \n  // Xử lý khi submit form - cập nhật phần check balance để sử dụng pdaBalance từ props\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      \n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n      \n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n      \n      // Kiểm tra số dư - sử dụng pdaBalance từ props thay vì walletBalance từ state\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n      \n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey: PublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n      \n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n      \n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // Tạo message chuẩn cho giao dịch chuyển tiền\n      const messageString = `transfer:${amount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message chuẩn:', messageString);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      \n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n      \n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n      \n      // Ký message bằng WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn');\n      }\n      \n      // Sử dụng kết quả từ WebAuthn assertion\n      const signature = Buffer.from(assertion.signature);\n      \n      // Tạo một buffer chứa public key nén\n      // Lưu ý: Trong trường hợp thực tế, bạn cần lấy public key từ guardian account hoặc localStorage\n      // Đây chỉ là giả định, trong thực tế bạn cần triển khai phù hợp\n      const publicKey = Buffer.from(new Uint8Array(33)); // Giả định 33 bytes cho publicKey nén\n      \n      // Tạo instruction secp256r1\n      const secp256r1Ix = createSecp256r1Instruction(\n        publicKey,\n        signature,\n        Buffer.from(messageHashBytes)\n      );\n      \n      // Fee payer (tạm thời là keypair ngẫu nhiên)\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n      const airdropSignature = await connection.requestAirdrop(\n        feePayer.publicKey,\n        web3.LAMPORTS_PER_SOL / 100 // 0.01 SOL để trả phí\n      );\n      await connection.confirmTransaction(airdropSignature);\n      \n      // Tạo instruction verify_and_execute\n      const transferTx = createTransferTx(\n        multisigPDA,\n        guardianPDA,\n        destinationPublicKey,\n        amountLamports,\n        nextNonce,\n        timestamp,\n        messageBytes,\n        feePayer.publicKey\n      );\n      \n      // Thêm cả hai instruction vào transaction\n      transferTx.add(secp256r1Ix);\n      \n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const { blockhash } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n      \n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n      \n      // Gửi transaction\n      const txId = await connection.sendRawTransaction(transferTx.serialize());\n      console.log('Transaction ID:', txId);\n      \n      // Chờ xác nhận\n      const confirmation = await connection.confirmTransaction(txId);\n      \n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n      \n      // Hiển thị thông báo thành công\n      setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công!`);\n      setAmount('');\n      setDestinationAddress('');\n      \n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      \n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  \n  return (\n    <div className=\"transfer-form\">\n      <h2>Chuyển SOL</h2>\n      \n      <div className=\"wallet-info\">\n        <p>Số dư hiện tại: <strong>{pdaBalance.toFixed(5)} SOL</strong></p>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"destination\">Địa chỉ đích:</label>\n          <input\n            type=\"text\"\n            id=\"destination\"\n            value={destinationAddress}\n            onChange={handleDestinationChange}\n            placeholder=\"Nhập địa chỉ Solana\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Số lượng SOL:</label>\n          <input\n            type=\"text\"\n            id=\"amount\"\n            value={amount}\n            onChange={handleAmountChange}\n            placeholder=\"Ví dụ: 0.1\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        {error && <div className=\"error-message\">{error}</div>}\n        {success && <div className=\"success-message\">{success}</div>}\n        \n        <button \n          type=\"submit\" \n          className=\"primary-button\" \n          disabled={isTransferring}\n        >\n          {isTransferring ? 'Đang chuyển...' : 'Chuyển SOL'}\n        </button>\n      </form>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}