{"ast":null,"code":"var _jsxFileName = \"/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createTransferTx, createSecp256r1Instruction, programID, SECP256R1_PROGRAM_ID } from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Thêm hằng số cho chuẩn hóa signature\nconst SECP256R1_ORDER = new BN('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551', 16);\nconst SECP256R1_HALF_ORDER = SECP256R1_ORDER.shrn(1);\n\n/**\n * Chuẩn hóa chữ ký về dạng Low-S\n * @param signature - Chữ ký raw\n * @returns Chữ ký đã chuẩn hóa\n */\nconst normalizeSignatureToLowS = sig => {\n  const r = sig.slice(0, 32);\n  const s = sig.slice(32, 64);\n  const sBN = new BN(s);\n  console.log(\"S value (BN):\", sBN.toString(16));\n  console.log(\"HALF_ORDER:\", SECP256R1_HALF_ORDER.toString(16));\n\n  // Kiểm tra nếu s > half_order\n  if (sBN.gt(SECP256R1_HALF_ORDER)) {\n    console.log(\"Chuẩn hóa signature về dạng Low-S\");\n    // Tính s' = order - s\n    const sNormalized = SECP256R1_ORDER.sub(sBN);\n    console.log(\"S normalized:\", sNormalized.toString(16));\n    const sNormalizedBuffer = sNormalized.toArrayLike(Buffer, 'be', 32);\n    return Buffer.concat([r, sNormalizedBuffer]);\n  }\n  console.log(\"Signature đã ở dạng Low-S\");\n  return sig;\n};\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = derSignature => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n\n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n\n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n\n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n\n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  return rawSignature;\n};\n\n// Interface cho props của component\n// Enum cho các trạng thái giao dịch\nvar TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[\"IDLE\"] = \"idle\";\n  TransactionStatus[\"PREPARING\"] = \"preparing\";\n  TransactionStatus[\"SIGNING\"] = \"signing\";\n  TransactionStatus[\"BUILDING_TX\"] = \"building_tx\";\n  TransactionStatus[\"SUBMITTING\"] = \"submitting\";\n  TransactionStatus[\"CONFIRMING\"] = \"confirming\";\n  TransactionStatus[\"SUCCESS\"] = \"success\";\n  TransactionStatus[\"ERROR\"] = \"error\";\n  return TransactionStatus;\n}(TransactionStatus || {}); // Thêm enum để theo dõi trạng thái xác minh chữ ký\nvar VerificationStatus = /*#__PURE__*/function (VerificationStatus) {\n  VerificationStatus[\"IDLE\"] = \"idle\";\n  VerificationStatus[\"VERIFYING\"] = \"verifying\";\n  VerificationStatus[\"SUCCESS\"] = \"success\";\n  VerificationStatus[\"ERROR\"] = \"error\";\n  return VerificationStatus;\n}(VerificationStatus || {}); // Function helper để định dạng số giống Rust - format!(\"{}\", f64)\nfunction formatLikeRust(num) {\n  // Chuyển thành chuỗi với đủ số thập phân\n  const str = num.toString();\n\n  // Loại bỏ các số 0 ở cuối và dấu thập phân nếu không cần thiết\n  return str.replace(/\\.?0+$/, '');\n}\nexport const TransferForm = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  _s();\n  // State\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [isTransferring, setIsTransferring] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [nonce, setNonce] = useState(0);\n  const [txStatus, setTxStatus] = useState(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState('');\n  // Thêm state cho chức năng xác minh chữ ký\n  const [verificationStatus, setVerificationStatus] = useState(VerificationStatus.IDLE);\n  const [verificationMessage, setVerificationMessage] = useState('');\n\n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n\n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    checkPrograms();\n  }, [connection]);\n\n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n\n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n\n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n\n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n\n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = e => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n\n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = e => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n\n  // Xử lý khi submit form\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        throw new Error(errorMsg);\n      }\n\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n\n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n\n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n\n      // Chuyển đổi SOL sang lamports\n      const amountLamports = parseFloat(amount) * LAMPORTS_PER_SOL;\n\n      // Kiểm tra số dư\n      const balance = await connection.getBalance(multisigPDA);\n      if (balance < amountLamports) {\n        throw new Error(`Số dư không đủ. Hiện tại: ${balance / LAMPORTS_PER_SOL} SOL, Cần: ${amount} SOL`);\n      }\n\n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n\n      // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n\n      // Xin SOL airdrop để trả phí\n      try {\n        const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n        );\n        await connection.confirmTransaction(airdropSignature);\n\n        // Kiểm tra số dư sau khi airdrop\n        const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n        console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n        if (feePayerBalance === 0) {\n          throw new Error(\"Không thể airdrop SOL cho fee payer\");\n        }\n      } catch (airdropError) {\n        console.warn(\"Không thể airdrop SOL để trả phí:\", airdropError);\n        // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n      }\n\n      // ĐỌC NONCE TỪ BLOCKCHAIN\n      console.log('=== ĐỌC TRANSACTION NONCE HIỆN TẠI TỪ BLOCKCHAIN ===');\n\n      // Đọc thông tin tài khoản multisig từ blockchain\n      const multisigAccountInfo = await connection.getAccountInfo(multisigPDA);\n      if (!multisigAccountInfo) {\n        throw new Error(`Không tìm thấy tài khoản multisig: ${multisigPDA.toString()}`);\n      }\n      console.log('Tài khoản multisig tồn tại, độ dài data:', multisigAccountInfo.data.length);\n\n      // Offset của transaction_nonce\n      // 8 bytes (discriminator) + 1 byte (threshold) + 1 byte (guardian_count) + 8 bytes (recovery_nonce) + 1 byte (bump) = 19\n      const nonceOffset = 19;\n\n      // Đọc 8 bytes của transaction_nonce\n      const nonceBytes = multisigAccountInfo.data.slice(nonceOffset, nonceOffset + 8);\n      const currentNonce = new BN(nonceBytes, 'le');\n\n      // Tính nonce tiếp theo\n      const nextNonce = currentNonce.addn(1).toNumber();\n      console.log('Nonce hiện tại (hex):', Buffer.from(nonceBytes).toString('hex'));\n      console.log('Nonce hiện tại:', currentNonce.toString());\n      console.log('Nonce tiếp theo (sẽ sử dụng):', nextNonce);\n\n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // LẤY WEBAUTHN PUBLIC KEY\n      console.log('Lấy WebAuthn public key...');\n      let webAuthnPubKey;\n\n      // Thử tìm trong Firebase\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n\n      // Kiểm tra độ dài khóa\n      if (webAuthnPubKey.length !== 33) {\n        console.warn(`WebAuthn public key có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n      }\n\n      // Tính toán hash của WebAuthn public key - thực hiện đúng như trong contract\n      console.log('WebAuthn Public Key (Hex):', Buffer.from(webAuthnPubKey).toString('hex'));\n\n      // Tính hash sử dụng sha256 giống contract\n      const hashBytes = sha256(Buffer.from(webAuthnPubKey));\n      const fullHashHex = Buffer.from(hashBytes).toString('hex');\n      console.log('Full SHA-256 Hash (Hex):', fullHashHex);\n\n      // Lấy 6 bytes đầu tiên của hash\n      const hashBytesStart = hashBytes.slice(0, 6);\n\n      // Chuyển đổi sang hex string giống hàm to_hex trong contract\n      const pubkeyHashHex = Array.from(hashBytesStart).map(b => b.toString(16).padStart(2, '0')).join('');\n      console.log('First 6 bytes of Hash (12 hex chars):', pubkeyHashHex);\n\n      // Thử thêm log để debug từng byte\n      console.log('Hash bytes (first 6):', Array.from(hashBytesStart));\n      console.log('Hash hex format with contract matching:');\n      Array.from(hashBytesStart).forEach((byte, i) => {\n        const hex = byte.toString(16).padStart(2, '0');\n        console.log(`Byte ${i}: ${byte} -> hex: ${hex}`);\n      });\n\n      // Thêm log để kiểm tra nếu nonce, timestamp, và các giá trị khác được xử lý đúng\n      console.log('Nonce:', nextNonce);\n      console.log('Timestamp:', timestamp);\n      console.log('Destination address:', destinationAddress);\n      console.log('===========================');\n\n      // Format số lượng SOL để khớp với Rust\n      // Rust sẽ tính lại: amount as f64 / 1_000_000_000.0\n      // Rust sẽ chuyển số thực sang chuỗi sử dụng format! không có trailing zeros\n      const amountInSol = amountLamports / LAMPORTS_PER_SOL;\n\n      // Thử các cách định dạng số khác nhau\n      console.log('===== DEBUG AMOUNT FORMAT =====');\n      console.log('Amount (lamports):', amountLamports);\n      console.log('Amount (SOL):', amountInSol);\n\n      // Cách 1: Loại bỏ số 0 ở cuối và trong một số trường hợp cả dấu chấm thập phân\n      const amount1 = amountInSol.toString().replace(/\\.?0+$/, '');\n      console.log('Format 1 (remove trailing zeros):', amount1);\n\n      // Cách 2: Định dạng số theo Rust - format!(\"{}\", f64)\n      const amount2 = formatLikeRust(amountInSol);\n      console.log('Format 2 (Rust format!):', amount2);\n\n      // Cách 3: Sử dụng phương thức Rust thực tế gọi là Display \n      const amount3 = parseFloat(amountInSol.toString()).toString();\n      console.log('Format 3 (parseFloat):', amount3);\n\n      // Sử dụng định dạng giống Rust nhất\n      const formattedAmount = amount2;\n      console.log('Formatted amount được sử dụng:', formattedAmount);\n      console.log('============================');\n\n      // Thêm phần này để kiểm tra các giá trị trước khi gửi\n      console.log('===== TEST MESSAGE WITH DIFFERENT HASH VALUES =====');\n\n      // Tạo các hash thử nghiệm khác nhau\n      const testHashes = [pubkeyHashHex,\n      // Hash tính từ frontend\n      \"e6cda2b8e0ad\",\n      // Hash tính từ log trước đó\n      \"000000000000\",\n      // Hash zero\n      \"cafebabe1234\" // Hash tùy ý khác\n      ];\n\n      // Thử từng hash và in ra message tương ứng\n      for (const testHash of testHashes) {\n        const testMessage = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp},pubkey:${testHash}`;\n        console.log(`Test message với hash [${testHash}]:`, testMessage);\n      }\n      console.log('=================================================');\n\n      // Sử dụng hash tính được để tạo message\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp},pubkey:${pubkeyHashHex}`;\n\n      // Debug chi tiết hơn\n      console.log('===== DEBUG MESSAGE =====');\n      console.log('Message gốc:', messageString);\n      console.log('Message length:', messageString.length);\n      console.log('Message bytes array:', Array.from(new TextEncoder().encode(messageString)));\n      console.log('Message bytes detailed:', Array.from(new TextEncoder().encode(messageString)).map((b, i) => `[${i}] ${b} (${String.fromCharCode(b)})`).join(', '));\n      console.log('Message hex:', Buffer.from(messageString).toString('hex'));\n      console.log('========================');\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n\n      // Thử ký bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n\n      // Sử dụng trực tiếp message làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId, messageString, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n      setSuccess(''); // Xóa thông báo thành công tạm thời\n\n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const derToRaw = derSignature => {\n        try {\n          // Kiểm tra format DER\n          if (derSignature[0] !== 0x30) {\n            throw new Error('Chữ ký không đúng định dạng DER: byte đầu tiên không phải 0x30');\n          }\n\n          // DER format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n          const rLength = derSignature[3];\n          const rStart = 4;\n          const rEnd = rStart + rLength;\n          const sLength = derSignature[rEnd + 1];\n          const sStart = rEnd + 2;\n          const sEnd = sStart + sLength;\n\n          // Trích xuất r và s\n          let r = derSignature.slice(rStart, rEnd);\n          let s = derSignature.slice(sStart, sEnd);\n          console.log('DER r length:', r.length, 'r (hex):', Buffer.from(r).toString('hex'));\n          console.log('DER s length:', s.length, 's (hex):', Buffer.from(s).toString('hex'));\n\n          // Chuẩn bị r và s cho định dạng raw (mỗi phần 32 bytes)\n          const rPadded = new Uint8Array(32);\n          const sPadded = new Uint8Array(32);\n          if (r.length <= 32) {\n            // Trường hợp r ngắn hơn 32 bytes, thêm padding\n            rPadded.set(r, 32 - r.length);\n          } else {\n            // Trường hợp r dài hơn 32 bytes (thường là có byte 0x00 ở đầu), lấy 32 bytes cuối\n            rPadded.set(r.slice(r.length - 32));\n          }\n          if (s.length <= 32) {\n            // Trường hợp s ngắn hơn 32 bytes, thêm padding\n            sPadded.set(s, 32 - s.length);\n          } else {\n            // Trường hợp s dài hơn 32 bytes, lấy 32 bytes cuối\n            sPadded.set(s.slice(s.length - 32));\n          }\n\n          // Nối r và s lại\n          const rawSignature = new Uint8Array(64);\n          rawSignature.set(rPadded);\n          rawSignature.set(sPadded, 32);\n          return rawSignature;\n        } catch (e) {\n          console.error('Lỗi khi chuyển đổi DER sang raw:', e);\n          throw e;\n        }\n      };\n      const rawSignature = derToRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n\n      // Chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n\n      // Tạo instruction secp256r1\n      setTxStatus(TransactionStatus.BUILDING_TX);\n\n      // ĐÚNG QUY TRÌNH XÁC MINH WEBAUTHN:\n      // 1. Tính hash của clientDataJSON\n      const clientDataHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      const clientDataHashBytes = new Uint8Array(clientDataHash);\n      console.log('clientDataJSON hash:', Buffer.from(clientDataHashBytes).toString('hex'));\n\n      // 2. Tạo verification data đúng cách: authenticatorData + hash(clientDataJSON)\n      const verificationData = new Uint8Array(assertion.authenticatorData.length + clientDataHashBytes.length);\n      verificationData.set(new Uint8Array(assertion.authenticatorData), 0);\n      verificationData.set(clientDataHashBytes, assertion.authenticatorData.length);\n      console.log('Verification data length:', verificationData.length);\n      console.log('Verification data (hex):', Buffer.from(verificationData).toString('hex'));\n\n      // Tạo instruction cho secp256r1 với verification data\n      const secp256r1Ix = createSecp256r1Instruction(Buffer.from(verificationData),\n      // Sử dụng verification data\n      webAuthnPubKey,\n      // publicKey\n      normalizedSignature,\n      // signature đã chuẩn hóa\n      false // Không đảo ngược public key\n      );\n      console.log(\"Secp256r1 instruction data:\", {\n        programId: secp256r1Ix.programId.toString(),\n        dataLength: secp256r1Ix.data.length,\n        dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n        pubkeyLength: webAuthnPubKey.length,\n        signatureLength: normalizedSignature.length,\n        messageLength: verificationData.length\n      });\n\n      // Tiếp tục quá trình xử lý transaction như bình thường\n      const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, Buffer.from(messageBytes),\n      // Sử dụng message gốc, không phải hash\n      feePayer.publicKey, credentialId // Truyền credential ID gốc\n      );\n\n      // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n      transferTx.instructions.unshift(secp256r1Ix);\n\n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const {\n        blockhash\n      } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n\n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n\n      // Log transaction để debug\n      console.log(\"Transaction info:\", {\n        feePayer: feePayer.publicKey.toString(),\n        instructions: transferTx.instructions.map(ix => ({\n          programId: ix.programId.toString(),\n          keys: ix.keys.map(k => ({\n            pubkey: k.pubkey.toString(),\n            isSigner: k.isSigner,\n            isWritable: k.isWritable\n          })),\n          dataSize: ix.data.length\n        }))\n      });\n\n      // Gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      try {\n        console.log('Sending transaction with secp256r1 instruction...');\n        console.log('Skip preflight:', true);\n        const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n          skipPreflight: true,\n          // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n          preflightCommitment: 'confirmed'\n        });\n        console.log('Transaction đã được gửi với ID:', transactionId);\n        setTxId(transactionId);\n        console.log('Transaction ID:', transactionId);\n\n        // Chờ xác nhận\n        setTxStatus(TransactionStatus.CONFIRMING);\n        const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n        if (confirmation.value.err) {\n          throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n        }\n\n        // Hiển thị thông báo thành công\n        setTxStatus(TransactionStatus.SUCCESS);\n        setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n        setAmount('');\n        setDestinationAddress('');\n\n        // Gọi callback nếu có\n        if (onTransferSuccess) {\n          onTransferSuccess();\n        }\n        return; // Không tiếp tục chạy code bên dưới\n      } catch (sendError) {\n        // Xử lý lỗi SendTransactionError\n        if (sendError instanceof SendTransactionError) {\n          console.error(\"Transaction simulation failed:\", sendError);\n          console.error(\"Error details:\", sendError.message);\n          if (sendError.logs) {\n            console.error(\"Transaction logs:\", sendError.logs);\n          }\n\n          // Cố gắng lấy logs chi tiết\n          let logs = \"\";\n          try {\n            if (sendError.logs && Array.isArray(sendError.logs)) {\n              logs = sendError.logs.join('\\n');\n            } else {\n              logs = \"Không có logs chi tiết.\";\n            }\n          } catch (logError) {\n            logs = \"Không thể lấy logs chi tiết.\";\n          }\n\n          // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n          let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n          if (logs.includes(\"Attempt to load a program that does not exist\")) {\n            // Xử lý lỗi chương trình không tồn tại\n            if (logs.includes(programID.toString())) {\n              errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n              errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n              errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n              errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n            } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n              errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n              errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n              errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n              errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n            } else {\n              errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n            }\n          } else {\n            // Lỗi khác\n            errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n            errorMessage += `Thông tin kết nối:\\n`;\n            errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n            errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n          }\n          throw new Error(errorMessage);\n        } else {\n          throw sendError;\n        }\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n\n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n\n  // Hàm chỉ xác minh chữ ký, không thực hiện chuyển tiền\n  const handleVerifySignatureOnly = async () => {\n    setVerificationStatus(VerificationStatus.VERIFYING);\n    setVerificationMessage('');\n    try {\n      // Tạo message mẫu để xác minh (có thể thay đổi theo yêu cầu)\n      const testMessage = `Test message for signature verification,timestamp:${Math.floor(Date.now() / 1000)}`;\n      console.log('Message gốc:', testMessage);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(testMessage);\n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setVerificationMessage('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực...');\n\n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId, testMessage, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n      const derToRaw = derSignature => {\n        try {\n          // Kiểm tra format DER\n          if (derSignature[0] !== 0x30) {\n            throw new Error('Chữ ký không đúng định dạng DER: byte đầu tiên không phải 0x30');\n          }\n\n          // DER format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n          const rLength = derSignature[3];\n          const rStart = 4;\n          const rEnd = rStart + rLength;\n          const sLength = derSignature[rEnd + 1];\n          const sStart = rEnd + 2;\n          const sEnd = sStart + sLength;\n\n          // Trích xuất r và s\n          let r = derSignature.slice(rStart, rEnd);\n          let s = derSignature.slice(sStart, sEnd);\n          console.log('DER r length:', r.length, 'r (hex):', Buffer.from(r).toString('hex'));\n          console.log('DER s length:', s.length, 's (hex):', Buffer.from(s).toString('hex'));\n\n          // Chuẩn bị r và s cho định dạng raw (mỗi phần 32 bytes)\n          const rPadded = new Uint8Array(32);\n          const sPadded = new Uint8Array(32);\n          if (r.length <= 32) {\n            // Trường hợp r ngắn hơn 32 bytes, thêm padding\n            rPadded.set(r, 32 - r.length);\n          } else {\n            // Trường hợp r dài hơn 32 bytes (thường là có byte 0x00 ở đầu), lấy 32 bytes cuối\n            rPadded.set(r.slice(r.length - 32));\n          }\n          if (s.length <= 32) {\n            // Trường hợp s ngắn hơn 32 bytes, thêm padding\n            sPadded.set(s, 32 - s.length);\n          } else {\n            // Trường hợp s dài hơn 32 bytes, lấy 32 bytes cuối\n            sPadded.set(s.slice(s.length - 32));\n          }\n\n          // Nối r và s lại\n          const rawSignature = new Uint8Array(64);\n          rawSignature.set(rPadded);\n          rawSignature.set(sPadded, 32);\n          return rawSignature;\n        } catch (e) {\n          console.error('Lỗi khi chuyển đổi DER sang raw:', e);\n          throw e;\n        }\n      };\n      const rawSignature = derToRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n\n      // Chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n\n      // LẤY WEBAUTHN PUBLIC KEY\n      console.log('Lấy WebAuthn public key...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      let webAuthnPubKey;\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n\n      // Kiểm tra độ dài khóa\n      if (webAuthnPubKey.length !== 33) {\n        console.warn(`WebAuthn public key có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n      }\n\n      // ĐÚNG QUY TRÌNH XÁC MINH WEBAUTHN:\n      // 1. Tính hash của clientDataJSON\n      const clientDataHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      const clientDataHashBytes = new Uint8Array(clientDataHash);\n      console.log('clientDataJSON hash:', Buffer.from(clientDataHashBytes).toString('hex'));\n\n      // 2. Tạo verification data đúng cách: authenticatorData + hash(clientDataJSON)\n      const verificationData = new Uint8Array(assertion.authenticatorData.length + clientDataHashBytes.length);\n      verificationData.set(new Uint8Array(assertion.authenticatorData), 0);\n      verificationData.set(clientDataHashBytes, assertion.authenticatorData.length);\n      console.log('Verification data length:', verificationData.length);\n      console.log('Verification data (hex):', Buffer.from(verificationData).toString('hex'));\n\n      // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n\n      // Xin SOL airdrop để trả phí\n      try {\n        const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n        );\n        await connection.confirmTransaction(airdropSignature);\n      } catch (airdropError) {\n        console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n        // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n      }\n\n      // Thử cả hai cách: đảo và không đảo byte đầu tiên của public key\n      const verificationDataBuffer = Buffer.from(verificationData);\n\n      // Cách 1: Không đảo byte đầu tiên\n      try {\n        console.log(\"Thử xác minh với public key không đảo ngược...\");\n        const secp256r1Ix1 = createSecp256r1Instruction(verificationDataBuffer, webAuthnPubKey, normalizedSignature, false // Không đảo ngược public key\n        );\n        const transaction1 = new Transaction().add(secp256r1Ix1);\n        transaction1.feePayer = feePayer.publicKey;\n        const {\n          blockhash\n        } = await connection.getLatestBlockhash();\n        transaction1.recentBlockhash = blockhash;\n        transaction1.sign(feePayer);\n        console.log(\"Gửi transaction với public key không đảo ngược...\");\n        const txid1 = await connection.sendRawTransaction(transaction1.serialize(), {\n          skipPreflight: true,\n          preflightCommitment: 'confirmed'\n        });\n        console.log('Transaction xác minh chữ ký đã được gửi với ID:', txid1);\n        const confirmation1 = await connection.confirmTransaction(txid1, 'confirmed');\n        if (confirmation1.value.err) {\n          console.error(\"Lỗi khi xác minh với public key không đảo ngược:\", confirmation1.value.err);\n          throw new Error(`Lỗi: ${JSON.stringify(confirmation1.value.err)}`);\n        } else {\n          console.log(\"XÁC MINH THÀNH CÔNG với public key không đảo ngược!\");\n          setVerificationStatus(VerificationStatus.SUCCESS);\n          setVerificationMessage(`Xác minh chữ ký thành công! ID giao dịch: ${txid1}`);\n          return;\n        }\n      } catch (error1) {\n        console.error(\"Lỗi khi xác minh với public key không đảo ngược:\", error1);\n      }\n    } catch (error) {\n      console.error('Lỗi khi xác minh chữ ký:', error);\n      setVerificationStatus(VerificationStatus.ERROR);\n      setVerificationMessage(error.message || 'Đã xảy ra lỗi khi xác minh chữ ký');\n    }\n  };\n\n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n\n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-note\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"L\\u01B0u \\xFD:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1015,\n            columnNumber: 14\n          }, this), \" B\\u1EA1n \\u0111ang k\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn validator c\\u1EE5c b\\u1ED9.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"C\\u1EA7n kh\\u1EDFi \\u0111\\u1ED9ng validator v\\u1EDBi c\\xE1c tham s\\u1ED1 \\u0111\\xFAng \\u0111\\u1EC3 c\\xE0i \\u0111\\u1EB7t ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1017,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transfer-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chuy\\u1EC3n SOL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1030,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"K\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: connectionEndpoint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1033,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"S\\u1ED1 d\\u01B0 hi\\u1EC7n t\\u1EA1i: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pdaBalance.toFixed(5), \" SOL\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1034,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: !isMoonWalletAvailable ? \"warning-message\" : \"info-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tr\\u1EA1ng th\\xE1i ch\\u01B0\\u01A1ng tr\\xECnh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1038,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: isMoonWalletAvailable ? \"status-ok\" : \"status-error\",\n              children: isMoonWalletAvailable ? '✅' : '❌'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1041,\n              columnNumber: 15\n            }, this), \"MoonWallet: \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: programID.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1044,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1040,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1039,\n          columnNumber: 11\n        }, this), renderValidatorNote(), !isMoonWalletAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"L\\u01B0u \\xFD:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1052,\n              columnNumber: 18\n            }, this), \" Ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet ch\\u01B0a \\u0111\\u01B0\\u1EE3c c\\xE0i \\u0111\\u1EB7t tr\\xEAn validator.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1052,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u0110\\u1EC3 c\\xE0i \\u0111\\u1EB7t, ch\\u1EA1y validator v\\u1EDBi l\\u1EC7nh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1054,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1037,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1032,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verify-signature-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"X\\xE1c minh ch\\u1EEF k\\xFD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1064,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Ki\\u1EC3m tra xem WebAuthn c\\u1EE7a b\\u1EA1n c\\xF3 ho\\u1EA1t \\u0111\\u1ED9ng \\u0111\\xFAng tr\\u01B0\\u1EDBc khi th\\u1EF1c hi\\u1EC7n giao d\\u1ECBch.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1065,\n        columnNumber: 9\n      }, this), verificationStatus !== VerificationStatus.IDLE && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: verificationStatus === VerificationStatus.SUCCESS ? \"success-message\" : verificationStatus === VerificationStatus.ERROR ? \"error-message\" : \"status-message\",\n        children: verificationMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"secondary-button\",\n        onClick: handleVerifySignatureOnly,\n        disabled: verificationStatus === VerificationStatus.VERIFYING || !isMoonWalletAvailable,\n        children: verificationStatus === VerificationStatus.VERIFYING ? 'Đang xác minh...' : 'Chỉ xác minh chữ ký'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1063,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"destination\",\n          children: \"\\u0110\\u1ECBa ch\\u1EC9 \\u0111\\xEDch:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1089,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"destination\",\n          value: destinationAddress,\n          onChange: handleDestinationChange,\n          placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa ch\\u1EC9 Solana\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1090,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amount\",\n          value: amount,\n          onChange: handleAmountChange,\n          placeholder: \"V\\xED d\\u1EE5: 0.1\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 9\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 19\n      }, this), txStatus !== TransactionStatus.IDLE && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: renderStatusMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1119,\n          columnNumber: 13\n        }, this), txStatus === TransactionStatus.CONFIRMING && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"\\u0110ang x\\xE1c nh\\u1EADn...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1121,\n          columnNumber: 15\n        }, this), txId && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"transaction-id\",\n          children: [\"ID Giao d\\u1ECBch: \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://explorer.solana.com/tx/${txId}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: [txId.slice(0, 8), \"...\", txId.slice(-8)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1125,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1124,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"primary-button\",\n        disabled: isTransferring || !isMoonWalletAvailable,\n        children: isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1087,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n          \n          .verify-signature-section {\n            margin: 20px 0;\n            padding: 15px;\n            background-color: #f8f9fa;\n            border-radius: 4px;\n            border: 1px solid #e9ecef;\n          }\n          \n          .secondary-button {\n            background-color: #6c757d;\n            color: white;\n            border: none;\n            padding: 10px 15px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-weight: 500;\n            margin-top: 10px;\n          }\n          \n          .secondary-button:hover {\n            background-color: #5a6268;\n          }\n          \n          .secondary-button:disabled {\n            background-color: #adb5bd;\n            cursor: not-allowed;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1029,\n    columnNumber: 5\n  }, this);\n};\n_s(TransferForm, \"2ITLgm8YZZXy3SW+2uV30GKYWQk=\");\n_c = TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","PublicKey","Transaction","SendTransactionError","web3","LAMPORTS_PER_SOL","createTransferTx","createSecp256r1Instruction","programID","SECP256R1_PROGRAM_ID","getWebAuthnAssertion","getGuardianPDA","getMultisigPDA","getWalletByCredentialId","Buffer","BN","sha256","jsxDEV","_jsxDEV","SECP256R1_ORDER","SECP256R1_HALF_ORDER","shrn","normalizeSignatureToLowS","sig","r","slice","s","sBN","console","log","toString","gt","sNormalized","sub","sNormalizedBuffer","toArrayLike","concat","convertDERtoRaw","derSignature","error","Uint8Array","rLength","rStart","rEnd","sLength","sStart","sEnd","rPadded","sPadded","length","set","rawSignature","TransactionStatus","VerificationStatus","formatLikeRust","num","str","replace","TransferForm","walletAddress","credentialId","guardianId","onTransferSuccess","onTransferError","connection","pdaBalance","_s","destinationAddress","setDestinationAddress","amount","setAmount","isTransferring","setIsTransferring","setError","success","setSuccess","walletBalance","setWalletBalance","nonce","setNonce","txStatus","setTxStatus","IDLE","txId","setTxId","isMoonWalletAvailable","setIsMoonWalletAvailable","connectionEndpoint","setConnectionEndpoint","verificationStatus","setVerificationStatus","verificationMessage","setVerificationMessage","checkPrograms","endpoint","rpcEndpoint","moonWalletInfo","getAccountInfo","warn","undefined","loadWalletInfo","multisigPDA","accountInfo","transactionNonce","data","readBigUInt64LE","Number","handleDestinationChange","e","target","value","handleAmountChange","test","handleSubmit","preventDefault","PREPARING","errorMsg","Error","parseFloat","toBase58","guardianPDA","amountLamports","balance","getBalance","destinationPublicKey","feePayer","Keypair","generate","airdropSignature","requestAirdrop","publicKey","confirmTransaction","feePayerBalance","airdropError","multisigAccountInfo","nonceOffset","nonceBytes","currentNonce","nextNonce","addn","toNumber","from","timestamp","Math","floor","Date","now","webAuthnPubKey","credentialMapping","guardianPublicKey","localStorageData","localStorage","getItem","localMapping","JSON","parse","hashBytes","fullHashHex","hashBytesStart","pubkeyHashHex","Array","map","b","padStart","join","forEach","byte","i","hex","amountInSol","amount1","amount2","amount3","formattedAmount","testHashes","testHash","testMessage","messageString","TextEncoder","encode","String","fromCharCode","messageBytes","SIGNING","assertion","TextDecoder","decode","clientDataJSON","derToRaw","signature","normalizedSignature","BUILDING_TX","clientDataHash","crypto","subtle","digest","clientDataHashBytes","verificationData","authenticatorData","secp256r1Ix","programId","dataLength","dataHex","substring","pubkeyLength","signatureLength","messageLength","transferTx","instructions","unshift","blockhash","getLatestBlockhash","recentBlockhash","sign","ix","keys","k","pubkey","isSigner","isWritable","dataSize","SUBMITTING","transactionId","sendRawTransaction","serialize","skipPreflight","preflightCommitment","CONFIRMING","confirmation","err","stringify","SUCCESS","sendError","message","logs","isArray","logError","errorMessage","includes","ERROR","handleVerifySignatureOnly","VERIFYING","messageHash","messageHashBytes","clientDataObj","verificationDataBuffer","secp256r1Ix1","transaction1","add","txid1","confirmation1","error1","renderStatusMessage","renderValidatorNote","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","type","onClick","disabled","onSubmit","htmlFor","id","onChange","placeholder","required","href","rel","_c","$RefreshReg$"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, Connection, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { \n  createTransferTx, \n  createSecp256r1Instruction,\n  programID,\n  SECP256R1_PROGRAM_ID\n} from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { BorshAccountsCoder } from '@coral-xyz/anchor';\n\n// Thêm hằng số cho chuẩn hóa signature\nconst SECP256R1_ORDER = new BN('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551', 16);\nconst SECP256R1_HALF_ORDER = SECP256R1_ORDER.shrn(1);\n\n/**\n * Chuẩn hóa chữ ký về dạng Low-S\n * @param signature - Chữ ký raw\n * @returns Chữ ký đã chuẩn hóa\n */\nconst normalizeSignatureToLowS = (sig: Buffer): Buffer => {\n  const r = sig.slice(0, 32);\n  const s = sig.slice(32, 64);\n  \n  const sBN = new BN(s);\n  console.log(\"S value (BN):\", sBN.toString(16));\n  console.log(\"HALF_ORDER:\", SECP256R1_HALF_ORDER.toString(16));\n  \n  // Kiểm tra nếu s > half_order\n  if (sBN.gt(SECP256R1_HALF_ORDER)) {\n    console.log(\"Chuẩn hóa signature về dạng Low-S\");\n    // Tính s' = order - s\n    const sNormalized = SECP256R1_ORDER.sub(sBN);\n    console.log(\"S normalized:\", sNormalized.toString(16));\n    const sNormalizedBuffer = sNormalized.toArrayLike(Buffer, 'be', 32);\n    return Buffer.concat([r, sNormalizedBuffer]);\n  }\n  \n  console.log(\"Signature đã ở dạng Low-S\");\n  return sig;\n};\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = (derSignature: Uint8Array): Uint8Array => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n  \n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  \n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n  \n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n  \n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  \n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  \n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n  \n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  \n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  \n  return rawSignature;\n};\n\n// Interface cho props của component\ninterface TransferFormProps {\n  walletAddress: string;  \n  credentialId: string;   \n  guardianId: number;     \n  onTransferSuccess?: () => void;\n  onTransferError?: (error: Error) => void;\n  // Thêm connection vào props\n  connection: Connection;\n  // Thêm pdaBalance để hiển thị số dư chính xác\n  pdaBalance?: number;\n}\n\n// Enum cho các trạng thái giao dịch\nenum TransactionStatus {\n  IDLE = 'idle',\n  PREPARING = 'preparing',\n  SIGNING = 'signing',\n  BUILDING_TX = 'building_tx',\n  SUBMITTING = 'submitting',\n  CONFIRMING = 'confirming',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\n// Thêm enum để theo dõi trạng thái xác minh chữ ký\nenum VerificationStatus {\n  IDLE = 'idle',\n  VERIFYING = 'verifying',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\n// Function helper để định dạng số giống Rust - format!(\"{}\", f64)\nfunction formatLikeRust(num: number): string {\n  // Chuyển thành chuỗi với đủ số thập phân\n  const str = num.toString();\n  \n  // Loại bỏ các số 0 ở cuối và dấu thập phân nếu không cần thiết\n  return str.replace(/\\.?0+$/, '');\n}\n\nexport const TransferForm: React.FC<TransferFormProps> = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  // State\n  const [destinationAddress, setDestinationAddress] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [isTransferring, setIsTransferring] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [nonce, setNonce] = useState<number>(0);\n  const [txStatus, setTxStatus] = useState<TransactionStatus>(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState<string>('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState<boolean>(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState<string>('');\n  // Thêm state cho chức năng xác minh chữ ký\n  const [verificationStatus, setVerificationStatus] = useState<VerificationStatus>(VerificationStatus.IDLE);\n  const [verificationMessage, setVerificationMessage] = useState<string>('');\n  \n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n        \n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          \n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    \n    checkPrograms();\n  }, [connection]);\n  \n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n  \n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n        \n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n        \n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        \n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        \n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n        \n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    \n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n  \n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n  \n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n  \n  // Xử lý khi submit form\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    \n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        \n        throw new Error(errorMsg);\n      }\n      \n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      \n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n      \n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n      \n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n      \n      // Chuyển đổi SOL sang lamports\n      const amountLamports = parseFloat(amount) * LAMPORTS_PER_SOL;\n      \n      // Kiểm tra số dư\n      const balance = await connection.getBalance(multisigPDA);\n      if (balance < amountLamports) {\n        throw new Error(\n          `Số dư không đủ. Hiện tại: ${\n            balance / LAMPORTS_PER_SOL\n          } SOL, Cần: ${amount} SOL`\n        );\n      }\n      \n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey: PublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n      \n      // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n      try {\n        const airdropSignature = await connection.requestAirdrop(\n          feePayer.publicKey,\n          web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n        );\n        await connection.confirmTransaction(airdropSignature);\n        \n        // Kiểm tra số dư sau khi airdrop\n        const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n        console.log(\n          `Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`\n        );\n        \n        if (feePayerBalance === 0) {\n          throw new Error(\"Không thể airdrop SOL cho fee payer\");\n        }\n      } catch (airdropError) {\n        console.warn(\"Không thể airdrop SOL để trả phí:\", airdropError);\n        // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n      }\n      \n      // ĐỌC NONCE TỪ BLOCKCHAIN\n      console.log('=== ĐỌC TRANSACTION NONCE HIỆN TẠI TỪ BLOCKCHAIN ===');\n      \n      // Đọc thông tin tài khoản multisig từ blockchain\n      const multisigAccountInfo = await connection.getAccountInfo(multisigPDA);\n      if (!multisigAccountInfo) {\n          throw new Error(`Không tìm thấy tài khoản multisig: ${multisigPDA.toString()}`);\n      }\n      \n      console.log('Tài khoản multisig tồn tại, độ dài data:', multisigAccountInfo.data.length);\n      \n      // Offset của transaction_nonce\n      // 8 bytes (discriminator) + 1 byte (threshold) + 1 byte (guardian_count) + 8 bytes (recovery_nonce) + 1 byte (bump) = 19\n      const nonceOffset = 19;\n      \n      // Đọc 8 bytes của transaction_nonce\n      const nonceBytes = multisigAccountInfo.data.slice(nonceOffset, nonceOffset + 8);\n      const currentNonce = new BN(nonceBytes, 'le');\n      \n      // Tính nonce tiếp theo\n      const nextNonce = currentNonce.addn(1).toNumber();\n      \n      console.log('Nonce hiện tại (hex):', Buffer.from(nonceBytes).toString('hex'));\n      console.log('Nonce hiện tại:', currentNonce.toString());\n      console.log('Nonce tiếp theo (sẽ sử dụng):', nextNonce);\n      \n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // LẤY WEBAUTHN PUBLIC KEY\n      console.log('Lấy WebAuthn public key...');\n      let webAuthnPubKey: Buffer;\n      \n      // Thử tìm trong Firebase\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n      \n      // Kiểm tra độ dài khóa\n      if (webAuthnPubKey.length !== 33) {\n        console.warn(`WebAuthn public key có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n      }\n      \n      // Tính toán hash của WebAuthn public key - thực hiện đúng như trong contract\n      console.log('WebAuthn Public Key (Hex):', Buffer.from(webAuthnPubKey).toString('hex'));\n      \n      // Tính hash sử dụng sha256 giống contract\n      const hashBytes = sha256(Buffer.from(webAuthnPubKey));\n      const fullHashHex = Buffer.from(hashBytes).toString('hex');\n      console.log('Full SHA-256 Hash (Hex):', fullHashHex);\n      \n      // Lấy 6 bytes đầu tiên của hash\n      const hashBytesStart = hashBytes.slice(0, 6);\n      \n      // Chuyển đổi sang hex string giống hàm to_hex trong contract\n      const pubkeyHashHex = Array.from(hashBytesStart)\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n      \n      console.log('First 6 bytes of Hash (12 hex chars):', pubkeyHashHex);\n      \n      // Thử thêm log để debug từng byte\n      console.log('Hash bytes (first 6):', Array.from(hashBytesStart));\n      console.log('Hash hex format with contract matching:');\n      Array.from(hashBytesStart).forEach((byte, i) => {\n        const hex = byte.toString(16).padStart(2, '0');\n        console.log(`Byte ${i}: ${byte} -> hex: ${hex}`);\n      });\n      \n      // Thêm log để kiểm tra nếu nonce, timestamp, và các giá trị khác được xử lý đúng\n      console.log('Nonce:', nextNonce);\n      console.log('Timestamp:', timestamp);\n      console.log('Destination address:', destinationAddress);\n      console.log('===========================');\n      \n      // Format số lượng SOL để khớp với Rust\n      // Rust sẽ tính lại: amount as f64 / 1_000_000_000.0\n      // Rust sẽ chuyển số thực sang chuỗi sử dụng format! không có trailing zeros\n      const amountInSol = amountLamports / LAMPORTS_PER_SOL;\n      \n      // Thử các cách định dạng số khác nhau\n      console.log('===== DEBUG AMOUNT FORMAT =====');\n      console.log('Amount (lamports):', amountLamports);\n      console.log('Amount (SOL):', amountInSol);\n      \n      // Cách 1: Loại bỏ số 0 ở cuối và trong một số trường hợp cả dấu chấm thập phân\n      const amount1 = amountInSol.toString().replace(/\\.?0+$/, '');\n      console.log('Format 1 (remove trailing zeros):', amount1);\n      \n      // Cách 2: Định dạng số theo Rust - format!(\"{}\", f64)\n      const amount2 = formatLikeRust(amountInSol);\n      console.log('Format 2 (Rust format!):', amount2);\n      \n      // Cách 3: Sử dụng phương thức Rust thực tế gọi là Display \n      const amount3 = parseFloat(amountInSol.toString()).toString();\n      console.log('Format 3 (parseFloat):', amount3);\n      \n      // Sử dụng định dạng giống Rust nhất\n      const formattedAmount = amount2;\n      console.log('Formatted amount được sử dụng:', formattedAmount);\n      console.log('============================');\n      \n      // Thêm phần này để kiểm tra các giá trị trước khi gửi\n      console.log('===== TEST MESSAGE WITH DIFFERENT HASH VALUES =====');\n      \n      // Tạo các hash thử nghiệm khác nhau\n      const testHashes = [\n        pubkeyHashHex,               // Hash tính từ frontend\n        \"e6cda2b8e0ad\",              // Hash tính từ log trước đó\n        \"000000000000\",              // Hash zero\n        \"cafebabe1234\",              // Hash tùy ý khác\n      ];\n      \n      // Thử từng hash và in ra message tương ứng\n      for (const testHash of testHashes) {\n        const testMessage = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp},pubkey:${testHash}`;\n        console.log(`Test message với hash [${testHash}]:`, testMessage);\n      }\n      \n      console.log('=================================================');\n      \n      // Sử dụng hash tính được để tạo message\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp},pubkey:${pubkeyHashHex}`;\n      \n      // Debug chi tiết hơn\n      console.log('===== DEBUG MESSAGE =====');\n      console.log('Message gốc:', messageString);\n      console.log('Message length:', messageString.length);\n      console.log('Message bytes array:', Array.from(new TextEncoder().encode(messageString)));\n      console.log('Message bytes detailed:', Array.from(new TextEncoder().encode(messageString))\n        .map((b, i) => `[${i}] ${b} (${String.fromCharCode(b)})`).join(', '));\n      console.log('Message hex:', Buffer.from(messageString).toString('hex'));\n      console.log('========================');\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      \n      // Thử ký bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n      \n      // Sử dụng trực tiếp message làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId, messageString, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n      \n      setSuccess(''); // Xóa thông báo thành công tạm thời\n      \n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const derToRaw = (derSignature: Uint8Array): Uint8Array => {\n        try {\n          // Kiểm tra format DER\n          if (derSignature[0] !== 0x30) {\n            throw new Error('Chữ ký không đúng định dạng DER: byte đầu tiên không phải 0x30');\n          }\n          \n          // DER format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n          const rLength = derSignature[3];\n          const rStart = 4;\n          const rEnd = rStart + rLength;\n          \n          const sLength = derSignature[rEnd + 1];\n          const sStart = rEnd + 2;\n          const sEnd = sStart + sLength;\n          \n          // Trích xuất r và s\n          let r = derSignature.slice(rStart, rEnd);\n          let s = derSignature.slice(sStart, sEnd);\n          \n          console.log('DER r length:', r.length, 'r (hex):', Buffer.from(r).toString('hex'));\n          console.log('DER s length:', s.length, 's (hex):', Buffer.from(s).toString('hex'));\n          \n          // Chuẩn bị r và s cho định dạng raw (mỗi phần 32 bytes)\n          const rPadded = new Uint8Array(32);\n          const sPadded = new Uint8Array(32);\n          \n          if (r.length <= 32) {\n            // Trường hợp r ngắn hơn 32 bytes, thêm padding\n            rPadded.set(r, 32 - r.length);\n          } else {\n            // Trường hợp r dài hơn 32 bytes (thường là có byte 0x00 ở đầu), lấy 32 bytes cuối\n            rPadded.set(r.slice(r.length - 32));\n          }\n          \n          if (s.length <= 32) {\n            // Trường hợp s ngắn hơn 32 bytes, thêm padding\n            sPadded.set(s, 32 - s.length);\n          } else {\n            // Trường hợp s dài hơn 32 bytes, lấy 32 bytes cuối\n            sPadded.set(s.slice(s.length - 32));\n          }\n          \n          // Nối r và s lại\n          const rawSignature = new Uint8Array(64);\n          rawSignature.set(rPadded);\n          rawSignature.set(sPadded, 32);\n          \n          return rawSignature;\n        } catch (e) {\n          console.error('Lỗi khi chuyển đổi DER sang raw:', e);\n          throw e;\n        }\n      };\n      \n      const rawSignature = derToRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      \n      // Chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n      \n      // Tạo instruction secp256r1\n      setTxStatus(TransactionStatus.BUILDING_TX);\n      \n      // ĐÚNG QUY TRÌNH XÁC MINH WEBAUTHN:\n      // 1. Tính hash của clientDataJSON\n      const clientDataHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      const clientDataHashBytes = new Uint8Array(clientDataHash);\n      console.log('clientDataJSON hash:', Buffer.from(clientDataHashBytes).toString('hex'));\n      \n      // 2. Tạo verification data đúng cách: authenticatorData + hash(clientDataJSON)\n      const verificationData = new Uint8Array(assertion.authenticatorData.length + clientDataHashBytes.length);\n      verificationData.set(new Uint8Array(assertion.authenticatorData), 0);\n      verificationData.set(clientDataHashBytes, assertion.authenticatorData.length);\n      \n      console.log('Verification data length:', verificationData.length);\n      console.log('Verification data (hex):', Buffer.from(verificationData).toString('hex'));\n      \n      // Tạo instruction cho secp256r1 với verification data\n      const secp256r1Ix = createSecp256r1Instruction(\n        Buffer.from(verificationData), // Sử dụng verification data\n        webAuthnPubKey, // publicKey\n        normalizedSignature, // signature đã chuẩn hóa\n        false // Không đảo ngược public key\n      );\n      \n      console.log(\"Secp256r1 instruction data:\", {\n        programId: secp256r1Ix.programId.toString(),\n        dataLength: secp256r1Ix.data.length,\n        dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n        pubkeyLength: webAuthnPubKey.length,\n        signatureLength: normalizedSignature.length,\n        messageLength: verificationData.length\n      });\n      \n      // Tiếp tục quá trình xử lý transaction như bình thường\n      const transferTx = createTransferTx(\n        multisigPDA,\n        guardianPDA,\n        destinationPublicKey,\n        amountLamports,\n        nextNonce,\n        timestamp,\n        Buffer.from(messageBytes), // Sử dụng message gốc, không phải hash\n        feePayer.publicKey,\n        credentialId  // Truyền credential ID gốc\n      );\n      \n      // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n      transferTx.instructions.unshift(secp256r1Ix);\n      \n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const { blockhash } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n      \n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n      \n      // Log transaction để debug\n      console.log(\"Transaction info:\", {\n        feePayer: feePayer.publicKey.toString(),\n        instructions: transferTx.instructions.map(ix => ({\n          programId: ix.programId.toString(),\n          keys: ix.keys.map(k => ({\n            pubkey: k.pubkey.toString(),\n            isSigner: k.isSigner,\n            isWritable: k.isWritable\n          })),\n          dataSize: ix.data.length\n        }))\n      });\n      \n      // Gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      \n      try {\n        console.log('Sending transaction with secp256r1 instruction...');\n        console.log('Skip preflight:', true);\n        \n        const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n          skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n          preflightCommitment: 'confirmed'\n        });\n        \n        console.log('Transaction đã được gửi với ID:', transactionId);\n        \n        setTxId(transactionId);\n        console.log('Transaction ID:', transactionId);\n        \n        // Chờ xác nhận\n        setTxStatus(TransactionStatus.CONFIRMING);\n        \n        const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n        \n        if (confirmation.value.err) {\n          throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n        }\n        \n        // Hiển thị thông báo thành công\n        setTxStatus(TransactionStatus.SUCCESS);\n        setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n        setAmount('');\n        setDestinationAddress('');\n        \n        // Gọi callback nếu có\n        if (onTransferSuccess) {\n          onTransferSuccess();\n        }\n        \n        return; // Không tiếp tục chạy code bên dưới\n      } catch (sendError: any) {\n        // Xử lý lỗi SendTransactionError\n        if (sendError instanceof SendTransactionError) {\n          console.error(\"Transaction simulation failed:\", sendError);\n          console.error(\"Error details:\", sendError.message);\n          \n          if (sendError.logs) {\n            console.error(\"Transaction logs:\", sendError.logs);\n          }\n          \n          // Cố gắng lấy logs chi tiết\n          let logs = \"\";\n          try {\n            if (sendError.logs && Array.isArray(sendError.logs)) {\n              logs = sendError.logs.join('\\n');\n            } else {\n              logs = \"Không có logs chi tiết.\";\n            }\n          } catch (logError) {\n            logs = \"Không thể lấy logs chi tiết.\";\n          }\n          \n          // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n          let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n          \n          if (logs.includes(\"Attempt to load a program that does not exist\")) {\n            // Xử lý lỗi chương trình không tồn tại\n            if (logs.includes(programID.toString())) {\n              errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n              errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n              errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n              errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n            } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n              errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n              errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n              errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n              errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n            } else {\n              errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n            }\n          } else {\n            // Lỗi khác\n            errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n            errorMessage += `Thông tin kết nối:\\n`;\n            errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n            errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n          }\n          \n          throw new Error(errorMessage);\n        } else {\n          throw sendError;\n        }\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n      \n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  \n  // Hàm chỉ xác minh chữ ký, không thực hiện chuyển tiền\n  const handleVerifySignatureOnly = async () => {\n    setVerificationStatus(VerificationStatus.VERIFYING);\n    setVerificationMessage('');\n    \n    try {\n   \n      \n      // Tạo message mẫu để xác minh (có thể thay đổi theo yêu cầu)\n      const testMessage = `Test message for signature verification,timestamp:${Math.floor(Date.now() / 1000)}`;\n      console.log('Message gốc:', testMessage);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(testMessage);\n      \n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setVerificationMessage('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực...');\n      \n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId, testMessage, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n   \n      const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n     \n      const derToRaw = (derSignature: Uint8Array): Uint8Array => {\n        try {\n          // Kiểm tra format DER\n          if (derSignature[0] !== 0x30) {\n            throw new Error('Chữ ký không đúng định dạng DER: byte đầu tiên không phải 0x30');\n          }\n          \n          // DER format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n          const rLength = derSignature[3];\n          const rStart = 4;\n          const rEnd = rStart + rLength;\n          \n          const sLength = derSignature[rEnd + 1];\n          const sStart = rEnd + 2;\n          const sEnd = sStart + sLength;\n          \n          // Trích xuất r và s\n          let r = derSignature.slice(rStart, rEnd);\n          let s = derSignature.slice(sStart, sEnd);\n          \n          console.log('DER r length:', r.length, 'r (hex):', Buffer.from(r).toString('hex'));\n          console.log('DER s length:', s.length, 's (hex):', Buffer.from(s).toString('hex'));\n          \n          // Chuẩn bị r và s cho định dạng raw (mỗi phần 32 bytes)\n          const rPadded = new Uint8Array(32);\n          const sPadded = new Uint8Array(32);\n          \n          if (r.length <= 32) {\n            // Trường hợp r ngắn hơn 32 bytes, thêm padding\n            rPadded.set(r, 32 - r.length);\n          } else {\n            // Trường hợp r dài hơn 32 bytes (thường là có byte 0x00 ở đầu), lấy 32 bytes cuối\n            rPadded.set(r.slice(r.length - 32));\n          }\n          \n          if (s.length <= 32) {\n            // Trường hợp s ngắn hơn 32 bytes, thêm padding\n            sPadded.set(s, 32 - s.length);\n          } else {\n            // Trường hợp s dài hơn 32 bytes, lấy 32 bytes cuối\n            sPadded.set(s.slice(s.length - 32));\n          }\n          \n          // Nối r và s lại\n          const rawSignature = new Uint8Array(64);\n          rawSignature.set(rPadded);\n          rawSignature.set(sPadded, 32);\n          \n          return rawSignature;\n        } catch (e) {\n          console.error('Lỗi khi chuyển đổi DER sang raw:', e);\n          throw e;\n        }\n      };\n      \n      const rawSignature = derToRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      \n      // Chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n      \n      // LẤY WEBAUTHN PUBLIC KEY\n      console.log('Lấy WebAuthn public key...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      let webAuthnPubKey: Buffer;\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n      \n      // Kiểm tra độ dài khóa\n      if (webAuthnPubKey.length !== 33) {\n        console.warn(`WebAuthn public key có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n      }\n      \n      // ĐÚNG QUY TRÌNH XÁC MINH WEBAUTHN:\n      // 1. Tính hash của clientDataJSON\n      const clientDataHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      const clientDataHashBytes = new Uint8Array(clientDataHash);\n      console.log('clientDataJSON hash:', Buffer.from(clientDataHashBytes).toString('hex'));\n      \n      // 2. Tạo verification data đúng cách: authenticatorData + hash(clientDataJSON)\n      const verificationData = new Uint8Array(assertion.authenticatorData.length + clientDataHashBytes.length);\n      verificationData.set(new Uint8Array(assertion.authenticatorData), 0);\n      verificationData.set(clientDataHashBytes, assertion.authenticatorData.length);\n      \n      console.log('Verification data length:', verificationData.length);\n      console.log('Verification data (hex):', Buffer.from(verificationData).toString('hex'));\n      \n      // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n      try {\n        const airdropSignature = await connection.requestAirdrop(\n          feePayer.publicKey,\n          web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n        );\n        await connection.confirmTransaction(airdropSignature);\n      } catch (airdropError) {\n        console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n        // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n      }\n      \n      // Thử cả hai cách: đảo và không đảo byte đầu tiên của public key\n      const verificationDataBuffer = Buffer.from(verificationData);\n      \n      // Cách 1: Không đảo byte đầu tiên\n      try {\n        console.log(\"Thử xác minh với public key không đảo ngược...\");\n        \n        const secp256r1Ix1 = createSecp256r1Instruction(\n          verificationDataBuffer,\n          webAuthnPubKey,\n          normalizedSignature,\n          false // Không đảo ngược public key\n        );\n        \n        const transaction1 = new Transaction().add(secp256r1Ix1);\n        transaction1.feePayer = feePayer.publicKey;\n        const { blockhash } = await connection.getLatestBlockhash();\n        transaction1.recentBlockhash = blockhash;\n        transaction1.sign(feePayer);\n        \n        console.log(\"Gửi transaction với public key không đảo ngược...\");\n        const txid1 = await connection.sendRawTransaction(transaction1.serialize(), {\n          skipPreflight: true,\n          preflightCommitment: 'confirmed'\n        });\n        \n        console.log('Transaction xác minh chữ ký đã được gửi với ID:', txid1);\n        \n        const confirmation1 = await connection.confirmTransaction(txid1, 'confirmed');\n        if (confirmation1.value.err) {\n          console.error(\"Lỗi khi xác minh với public key không đảo ngược:\", confirmation1.value.err);\n          throw new Error(`Lỗi: ${JSON.stringify(confirmation1.value.err)}`);\n        } else {\n          console.log(\"XÁC MINH THÀNH CÔNG với public key không đảo ngược!\");\n          setVerificationStatus(VerificationStatus.SUCCESS);\n          setVerificationMessage(`Xác minh chữ ký thành công! ID giao dịch: ${txid1}`);\n          return;\n        }\n      } catch (error1) {\n        console.error(\"Lỗi khi xác minh với public key không đảo ngược:\", error1);\n        \n       \n      }\n    } catch (error: any) {\n      console.error('Lỗi khi xác minh chữ ký:', error);\n      setVerificationStatus(VerificationStatus.ERROR);\n      setVerificationMessage(error.message || 'Đã xảy ra lỗi khi xác minh chữ ký');\n    }\n  };\n  \n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n  \n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return (\n        <div className=\"info-note\">\n          <p><strong>Lưu ý:</strong> Bạn đang kết nối đến validator cục bộ.</p>\n          <p>Cần khởi động validator với các tham số đúng để cài đặt chương trình MoonWallet:</p>\n          <pre>\n            solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n          </pre>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  \n  \n  return (\n    <div className=\"transfer-form\">\n      <h2>Chuyển SOL</h2>\n      \n      <div className=\"wallet-info\">\n        <p>Kết nối đến: <strong>{connectionEndpoint}</strong></p>\n        <p>Số dư hiện tại: <strong>{pdaBalance.toFixed(5)} SOL</strong></p>\n        \n        {/* Hiển thị trạng thái MoonWallet program */}\n        <div className={!isMoonWalletAvailable ? \"warning-message\" : \"info-message\"}>\n          <p><strong>Trạng thái chương trình:</strong></p>\n          <ul>\n            <li>\n              <span className={isMoonWalletAvailable ? \"status-ok\" : \"status-error\"}>\n                {isMoonWalletAvailable ? '✅' : '❌'}\n              </span> \n              MoonWallet: <code>{programID.toString()}</code>\n            </li>\n          </ul>\n          \n          {renderValidatorNote()}\n          \n          {!isMoonWalletAvailable && (\n            <div>\n              <p><strong>Lưu ý:</strong> Chương trình MoonWallet chưa được cài đặt trên validator.</p>\n              <p>Để cài đặt, chạy validator với lệnh:</p>\n              <pre>\n                solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n              </pre>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Thêm nút \"Chỉ xác minh chữ ký\" */}\n      <div className=\"verify-signature-section\">\n        <h3>Xác minh chữ ký</h3>\n        <p>Kiểm tra xem WebAuthn của bạn có hoạt động đúng trước khi thực hiện giao dịch.</p>\n        \n        {verificationStatus !== VerificationStatus.IDLE && (\n          <div className={\n            verificationStatus === VerificationStatus.SUCCESS ? \"success-message\" : \n            verificationStatus === VerificationStatus.ERROR ? \"error-message\" : \n            \"status-message\"\n          }>\n            {verificationMessage}\n          </div>\n        )}\n        \n        <button \n          type=\"button\" \n          className=\"secondary-button\" \n          onClick={handleVerifySignatureOnly}\n          disabled={verificationStatus === VerificationStatus.VERIFYING || !isMoonWalletAvailable}\n        >\n          {verificationStatus === VerificationStatus.VERIFYING ? 'Đang xác minh...' : 'Chỉ xác minh chữ ký'}\n        </button>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"destination\">Địa chỉ đích:</label>\n          <input\n            type=\"text\"\n            id=\"destination\"\n            value={destinationAddress}\n            onChange={handleDestinationChange}\n            placeholder=\"Nhập địa chỉ Solana\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Số lượng SOL:</label>\n          <input\n            type=\"text\"\n            id=\"amount\"\n            value={amount}\n            onChange={handleAmountChange}\n            placeholder=\"Ví dụ: 0.1\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        {success && <div className=\"success-message\">{success}</div>}\n        {error && <div className=\"error-message\">{error}</div>}\n        \n        {txStatus !== TransactionStatus.IDLE && (\n          <div className=\"status-message\">\n            <p>{renderStatusMessage()}</p>\n            {txStatus === TransactionStatus.CONFIRMING && (\n              <div className=\"loading-indicator\">Đang xác nhận...</div>\n            )}\n            {txId && (\n              <p className=\"transaction-id\">\n                ID Giao dịch: <a href={`https://explorer.solana.com/tx/${txId}`} target=\"_blank\" rel=\"noopener noreferrer\">{txId.slice(0, 8)}...{txId.slice(-8)}</a>\n              </p>\n            )}\n          </div>\n        )}\n        \n        <button \n          type=\"submit\" \n          className=\"primary-button\" \n          disabled={isTransferring || !isMoonWalletAvailable}\n        >\n          {isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'}\n        </button>\n      </form>\n      \n      <style>\n        {`\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n          \n          .verify-signature-section {\n            margin: 20px 0;\n            padding: 15px;\n            background-color: #f8f9fa;\n            border-radius: 4px;\n            border: 1px solid #e9ecef;\n          }\n          \n          .secondary-button {\n            background-color: #6c757d;\n            color: white;\n            border: none;\n            padding: 10px 15px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-weight: 500;\n            margin-top: 10px;\n          }\n          \n          .secondary-button:hover {\n            background-color: #5a6268;\n          }\n          \n          .secondary-button:disabled {\n            background-color: #adb5bd;\n            cursor: not-allowed;\n          }\n        `}\n      </style>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}