{"ast":null,"code":"import { getWebAuthnAssertion } from './webauthnUtils';\nimport { createVerifyInstruction, derToRaw } from './secp256r1Utils';\n\n/**\n * Băm thông điệp thành một mảng 32-byte\n */\nconst hashMessage = async message => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(message);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  return new Uint8Array(hashBuffer);\n};\n\n/**\n * Ký một thông điệp bằng WebAuthn và tạo transaction instruction để xác minh trên Solana\n */\nexport const signWithWebAuthnAndCreateInstruction = async message => {\n  try {\n    console.log(\"Bắt đầu quá trình ký bằng WebAuthn cho thông điệp:\", message);\n\n    // Ký thông điệp bằng WebAuthn\n    const {\n      signature: derSignature,\n      authenticatorData,\n      clientDataJSON\n    } = await getWebAuthnAssertion();\n    console.log(\"Đã nhận chữ ký WebAuthn:\", Buffer.from(derSignature).toString('hex'));\n    console.log(\"Authenticator data length:\", authenticatorData.length);\n    console.log(\"Authenticator data:\", Buffer.from(authenticatorData).toString('hex'));\n\n    // Convert chữ ký từ định dạng DER sang raw (r,s)\n    const rawSignature = derToRaw(derSignature);\n    console.log(\"Raw signature:\", Buffer.from(rawSignature).toString('hex'));\n\n    // Băm thông điệp\n    const messageHash = await hashMessage(message);\n    console.log(\"Message hash:\", Buffer.from(messageHash).toString('hex'));\n\n    // Trích xuất public key từ authenticator data\n    const publicKey = extractP256PublicKeyFromAuthData(authenticatorData);\n    console.log(\"Extracted public key:\", Buffer.from(publicKey).toString('hex'));\n\n    // Tạo instruction xác minh\n    return createVerifyInstruction(publicKey, rawSignature, new TextEncoder().encode(message));\n  } catch (error) {\n    console.error(\"Lỗi khi ký bằng WebAuthn:\", error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(`Không thể ký giao dịch: ${errorMessage}`);\n  }\n};\n\n/**\n * Trích xuất public key từ authenticator data\n */\nfunction extractP256PublicKeyFromAuthData(authData) {\n  try {\n    // In ra dữ liệu để debug\n    console.log(\"Raw auth data (hex):\", Buffer.from(authData).toString('hex'));\n    if (authData.length < 37) {\n      throw new Error('Authenticator data quá ngắn, không thể trích xuất CBOR data');\n    }\n\n    // Tạo một khóa công khai giả để testing\n    // Trong ứng dụng thực tế, cần phân tích authenticator data đúng cách\n    const dummyPublicKey = new Uint8Array(33);\n    dummyPublicKey[0] = 0x02; // Định dạng nén với y chẵn\n\n    // Tạo x coordinate giả\n    window.crypto.getRandomValues(dummyPublicKey.subarray(1));\n    console.log(\"Generated compressed public key for testing:\", Buffer.from(dummyPublicKey).toString('hex'));\n    return dummyPublicKey;\n  } catch (error) {\n    console.error(\"Lỗi khi trích xuất public key từ authenticator data:\", error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(`Không thể trích xuất public key: ${errorMessage}`);\n  }\n}","map":{"version":3,"names":["getWebAuthnAssertion","createVerifyInstruction","derToRaw","hashMessage","message","encoder","TextEncoder","data","encode","hashBuffer","crypto","subtle","digest","Uint8Array","signWithWebAuthnAndCreateInstruction","console","log","signature","derSignature","authenticatorData","clientDataJSON","Buffer","from","toString","length","rawSignature","messageHash","publicKey","extractP256PublicKeyFromAuthData","error","errorMessage","Error","String","authData","dummyPublicKey","window","getRandomValues","subarray"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/acacac/src/utils/webauthnSigningUtils.ts"],"sourcesContent":["import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { getWebAuthnAssertion } from './webauthnUtils';\nimport { SECP256R1_PROGRAM_ID, createVerifyInstruction, derToRaw } from './secp256r1Utils';\n\n/**\n * Băm thông điệp thành một mảng 32-byte\n */\nconst hashMessage = async (message: string): Promise<Uint8Array> => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(message);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  return new Uint8Array(hashBuffer);\n};\n\n/**\n * Ký một thông điệp bằng WebAuthn và tạo transaction instruction để xác minh trên Solana\n */\nexport const signWithWebAuthnAndCreateInstruction = async (\n  message: string\n): Promise<TransactionInstruction> => {\n  try {\n    console.log(\"Bắt đầu quá trình ký bằng WebAuthn cho thông điệp:\", message);\n    \n    // Ký thông điệp bằng WebAuthn\n    const { signature: derSignature, authenticatorData, clientDataJSON } = \n      await getWebAuthnAssertion();\n    \n    console.log(\"Đã nhận chữ ký WebAuthn:\", \n      Buffer.from(derSignature).toString('hex'));\n    console.log(\"Authenticator data length:\", authenticatorData.length);\n    console.log(\"Authenticator data:\", Buffer.from(authenticatorData).toString('hex'));\n    \n    // Convert chữ ký từ định dạng DER sang raw (r,s)\n    const rawSignature = derToRaw(derSignature);\n    console.log(\"Raw signature:\", Buffer.from(rawSignature).toString('hex'));\n    \n    // Băm thông điệp\n    const messageHash = await hashMessage(message);\n    console.log(\"Message hash:\", Buffer.from(messageHash).toString('hex'));\n    \n    // Trích xuất public key từ authenticator data\n    const publicKey = extractP256PublicKeyFromAuthData(authenticatorData);\n    console.log(\"Extracted public key:\", Buffer.from(publicKey).toString('hex'));\n    \n    // Tạo instruction xác minh\n    return createVerifyInstruction(\n      publicKey,\n      rawSignature,\n      new TextEncoder().encode(message)\n    );\n  } catch (error: unknown) {\n    console.error(\"Lỗi khi ký bằng WebAuthn:\", error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(`Không thể ký giao dịch: ${errorMessage}`);\n  }\n};\n\n/**\n * Trích xuất public key từ authenticator data\n */\nfunction extractP256PublicKeyFromAuthData(authData: Uint8Array): Uint8Array {\n  try {\n    // In ra dữ liệu để debug\n    console.log(\"Raw auth data (hex):\", Buffer.from(authData).toString('hex'));\n    \n    if (authData.length < 37) {\n      throw new Error('Authenticator data quá ngắn, không thể trích xuất CBOR data');\n    }\n    \n    // Tạo một khóa công khai giả để testing\n    // Trong ứng dụng thực tế, cần phân tích authenticator data đúng cách\n    const dummyPublicKey = new Uint8Array(33);\n    dummyPublicKey[0] = 0x02; // Định dạng nén với y chẵn\n    \n    // Tạo x coordinate giả\n    window.crypto.getRandomValues(dummyPublicKey.subarray(1));\n    \n    console.log(\"Generated compressed public key for testing:\", \n      Buffer.from(dummyPublicKey).toString('hex'));\n    \n    return dummyPublicKey;\n  } catch (error: unknown) {\n    console.error(\"Lỗi khi trích xuất public key từ authenticator data:\", error);\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    throw new Error(`Không thể trích xuất public key: ${errorMessage}`);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}