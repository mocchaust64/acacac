{"ast":null,"code":"import { Transaction } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport { createSecp256r1Instruction } from './transactionUtils';\n\n// Định nghĩa kiểu wallet tương thích\n\n/**\n * Kiểm tra instruction secp256r1 độc lập\n * @param connection Kết nối Solana\n * @param message Message gốc cần xác thực\n * @param publicKey Public key đã nén (33 bytes)\n * @param signature Chữ ký raw (64 bytes)\n * @param wallet Wallet để ký giao dịch\n */\nexport async function testSecp256r1(connection, message, publicKey, signature, wallet) {\n  try {\n    console.log('Kiểm tra secp256r1 với:', {\n      publicKey: publicKey.toString('hex'),\n      publicKeyLength: publicKey.length,\n      signature: signature.toString('hex'),\n      signatureLength: signature.length,\n      message: message.toString(),\n      messageBytes: message.toString('hex'),\n      messageLength: message.length\n    });\n\n    // Tạo instruction secp256r1\n    const instruction = createSecp256r1Instruction(message, publicKey, signature);\n\n    // Tạo và gửi transaction\n    const transaction = new Transaction().add(instruction);\n    transaction.feePayer = wallet.publicKey;\n    const {\n      blockhash\n    } = await connection.getLatestBlockhash();\n    transaction.recentBlockhash = blockhash;\n    const signedTx = await wallet.signTransaction(transaction);\n    const signature = await connection.sendRawTransaction(signedTx.serialize());\n    console.log('Giao dịch đã được gửi với signature:', signature);\n    await connection.confirmTransaction(signature, 'confirmed');\n    console.log('Giao dịch đã được xác nhận');\n    return true;\n  } catch (error) {\n    console.error('Lỗi khi kiểm tra secp256r1:', error);\n    return false;\n  }\n}\n\n/**\n * Tạo các biến thể khác nhau của public key để kiểm tra\n * @param publicKey Public key gốc\n */\nexport function generatePublicKeyVariants(publicKey) {\n  const variants = [];\n\n  // Biến thể 1: Giữ nguyên public key gốc\n  variants.push(publicKey);\n\n  // Biến thể 2: Đảo ngược public key\n  const reversedPubKey = Buffer.from(publicKey);\n  reversedPubKey.reverse();\n  variants.push(reversedPubKey);\n\n  // Thêm các biến thể khác nếu cần\n\n  return variants;\n}\n\n/**\n * Kiểm tra với nhiều biến thể của public key\n */\nexport async function testMultiplePublicKeys(connection, message, signature, wallet, publicKeyVariants) {\n  console.log(`Bắt đầu kiểm tra với ${publicKeyVariants.length} biến thể của public key...`);\n  for (let i = 0; i < publicKeyVariants.length; i++) {\n    const variant = publicKeyVariants[i];\n    console.log(`Kiểm tra biến thể #${i + 1}:`, variant.toString('hex'));\n    const success = await testSecp256r1(connection, message, variant, signature, wallet);\n    if (success) {\n      console.log(`Biến thể #${i + 1} thành công!`);\n    } else {\n      console.log(`Biến thể #${i + 1} thất bại.`);\n    }\n  }\n  console.log('Đã hoàn tất việc kiểm tra các biến thể.');\n}","map":{"version":3,"names":["Transaction","Buffer","createSecp256r1Instruction","testSecp256r1","connection","message","publicKey","signature","wallet","console","log","toString","publicKeyLength","length","signatureLength","messageBytes","messageLength","instruction","transaction","add","feePayer","blockhash","getLatestBlockhash","recentBlockhash","signedTx","signTransaction","sendRawTransaction","serialize","confirmTransaction","error","generatePublicKeyVariants","variants","push","reversedPubKey","from","reverse","testMultiplePublicKeys","publicKeyVariants","i","variant","success"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/utils/testUtils.ts"],"sourcesContent":["import { Connection, Keypair, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport { createSecp256r1Instruction } from './transactionUtils';\n\n// Định nghĩa kiểu wallet tương thích\ninterface WalletAdapter {\n  publicKey: PublicKey;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n}\n\n/**\n * Kiểm tra instruction secp256r1 độc lập\n * @param connection Kết nối Solana\n * @param message Message gốc cần xác thực\n * @param publicKey Public key đã nén (33 bytes)\n * @param signature Chữ ký raw (64 bytes)\n * @param wallet Wallet để ký giao dịch\n */\nexport async function testSecp256r1(\n  connection: Connection,\n  message: Buffer,\n  publicKey: Buffer,\n  signature: Buffer,\n  wallet: WalletAdapter\n): Promise<boolean> {\n  try {\n    console.log('Kiểm tra secp256r1 với:', {\n      publicKey: publicKey.toString('hex'),\n      publicKeyLength: publicKey.length,\n      signature: signature.toString('hex'),\n      signatureLength: signature.length,\n      message: message.toString(),\n      messageBytes: message.toString('hex'),\n      messageLength: message.length\n    });\n\n    // Tạo instruction secp256r1\n    const instruction = createSecp256r1Instruction(\n      message,\n      publicKey,\n      signature\n    );\n\n    // Tạo và gửi transaction\n    const transaction = new Transaction().add(instruction);\n    transaction.feePayer = wallet.publicKey;\n    const { blockhash } = await connection.getLatestBlockhash();\n    transaction.recentBlockhash = blockhash;\n\n    const signedTx = await wallet.signTransaction(transaction);\n    const signature = await connection.sendRawTransaction(signedTx.serialize());\n\n    console.log('Giao dịch đã được gửi với signature:', signature);\n    await connection.confirmTransaction(signature, 'confirmed');\n    console.log('Giao dịch đã được xác nhận');\n    \n    return true;\n  } catch (error) {\n    console.error('Lỗi khi kiểm tra secp256r1:', error);\n    return false;\n  }\n}\n\n/**\n * Tạo các biến thể khác nhau của public key để kiểm tra\n * @param publicKey Public key gốc\n */\nexport function generatePublicKeyVariants(publicKey: Buffer): Buffer[] {\n  const variants: Buffer[] = [];\n  \n  // Biến thể 1: Giữ nguyên public key gốc\n  variants.push(publicKey);\n  \n  // Biến thể 2: Đảo ngược public key\n  const reversedPubKey = Buffer.from(publicKey);\n  reversedPubKey.reverse();\n  variants.push(reversedPubKey);\n  \n  // Thêm các biến thể khác nếu cần\n  \n  return variants;\n}\n\n/**\n * Kiểm tra với nhiều biến thể của public key\n */\nexport async function testMultiplePublicKeys(\n  connection: Connection,\n  message: Buffer,\n  signature: Buffer,\n  wallet: WalletAdapter,\n  publicKeyVariants: Buffer[]\n): Promise<void> {\n  console.log(`Bắt đầu kiểm tra với ${publicKeyVariants.length} biến thể của public key...`);\n  \n  for (let i = 0; i < publicKeyVariants.length; i++) {\n    const variant = publicKeyVariants[i];\n    console.log(`Kiểm tra biến thể #${i + 1}:`, variant.toString('hex'));\n    \n    const success = await testSecp256r1(\n      connection,\n      message,\n      variant,\n      signature,\n      wallet\n    );\n    \n    if (success) {\n      console.log(`Biến thể #${i + 1} thành công!`);\n    } else {\n      console.log(`Biến thể #${i + 1} thất bại.`);\n    }\n  }\n  \n  console.log('Đã hoàn tất việc kiểm tra các biến thể.');\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}