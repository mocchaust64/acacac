{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.base64 = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n  var _a, _b;\n  const paddingRequired = (_a = options.paddingRequired) !== null && _a !== void 0 ? _a : false;\n  const characterSet = (_b = options.characterSet) !== null && _b !== void 0 ? _b : 'base64';\n  let letters;\n  if (characterSet === 'base64') {\n    letters = String.raw`[A-Za-z0-9+\\/]`;\n  } else {\n    (0, assert_1.assert)(characterSet === 'base64url');\n    letters = String.raw`[-_A-Za-z0-9]`;\n  }\n  let re;\n  if (paddingRequired) {\n    re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n  } else {\n    re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n  }\n  return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}