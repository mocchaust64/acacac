{"ast":null,"code":"var _jsxFileName = \"/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createTransferTx, createSecp256r1Instruction, programID, SECP256R1_PROGRAM_ID } from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Thêm hằng số cho chuẩn hóa signature\nconst SECP256R1_ORDER = new BN('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551', 16);\nconst SECP256R1_HALF_ORDER = SECP256R1_ORDER.shrn(1);\n\n/**\n * Chuẩn hóa chữ ký về dạng Low-S\n * @param signature - Chữ ký raw\n * @returns Chữ ký đã chuẩn hóa\n */\nconst normalizeSignatureToLowS = sig => {\n  const r = sig.slice(0, 32);\n  const s = sig.slice(32, 64);\n  const sBN = new BN(s);\n  console.log(\"S value (BN):\", sBN.toString(16));\n  console.log(\"HALF_ORDER:\", SECP256R1_HALF_ORDER.toString(16));\n\n  // Kiểm tra nếu s > half_order\n  if (sBN.gt(SECP256R1_HALF_ORDER)) {\n    console.log(\"Chuẩn hóa signature về dạng Low-S\");\n    // Tính s' = order - s\n    const sNormalized = SECP256R1_ORDER.sub(sBN);\n    console.log(\"S normalized:\", sNormalized.toString(16));\n    const sNormalizedBuffer = sNormalized.toArrayLike(Buffer, 'be', 32);\n    return Buffer.concat([r, sNormalizedBuffer]);\n  }\n  console.log(\"Signature đã ở dạng Low-S\");\n  return sig;\n};\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = derSignature => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n\n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n\n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n\n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n\n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  return rawSignature;\n};\n\n// Interface cho props của component\n// Enum cho các trạng thái giao dịch\nvar TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[\"IDLE\"] = \"idle\";\n  TransactionStatus[\"PREPARING\"] = \"preparing\";\n  TransactionStatus[\"SIGNING\"] = \"signing\";\n  TransactionStatus[\"BUILDING_TX\"] = \"building_tx\";\n  TransactionStatus[\"SUBMITTING\"] = \"submitting\";\n  TransactionStatus[\"CONFIRMING\"] = \"confirming\";\n  TransactionStatus[\"SUCCESS\"] = \"success\";\n  TransactionStatus[\"ERROR\"] = \"error\";\n  return TransactionStatus;\n}(TransactionStatus || {}); // Thêm enum để theo dõi trạng thái xác minh chữ ký\nvar VerificationStatus = /*#__PURE__*/function (VerificationStatus) {\n  VerificationStatus[\"IDLE\"] = \"idle\";\n  VerificationStatus[\"VERIFYING\"] = \"verifying\";\n  VerificationStatus[\"SUCCESS\"] = \"success\";\n  VerificationStatus[\"ERROR\"] = \"error\";\n  return VerificationStatus;\n}(VerificationStatus || {});\nexport const TransferForm = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  _s();\n  // State\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [isTransferring, setIsTransferring] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [nonce, setNonce] = useState(0);\n  const [txStatus, setTxStatus] = useState(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState('');\n  // Thêm state cho chức năng xác minh chữ ký\n  const [verificationStatus, setVerificationStatus] = useState(VerificationStatus.IDLE);\n  const [verificationMessage, setVerificationMessage] = useState('');\n  // Thêm state cho transactionResult\n  const [transactionResult, setTransactionResult] = useState(null);\n  // Thêm state cho isVerifying\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n\n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    checkPrograms();\n  }, [connection]);\n\n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n\n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n\n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n\n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n\n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = e => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n\n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = e => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n\n  // Xử lý khi submit form\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        throw new Error(errorMsg);\n      }\n\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n\n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n\n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n\n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n\n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n\n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n\n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n\n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n\n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n\n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(credentialId, messageString, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n\n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n\n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64.replace(/-/g, '+').replace(/_/g, '/').padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          console.log('Challenge từ WebAuthn (hex):', challengeBytes.toString('hex'));\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      setSuccess(''); // Xóa thông báo thành công tạm thời\n\n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n\n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      // Sử dụng hàm từ utils/webauthnUtils.ts\n      const derToRaw = derSignature => {\n        try {\n          // Kiểm tra format DER\n          if (derSignature[0] !== 0x30) {\n            throw new Error('Chữ ký không đúng định dạng DER: byte đầu tiên không phải 0x30');\n          }\n\n          // DER format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n          const rLength = derSignature[3];\n          const rStart = 4;\n          const rEnd = rStart + rLength;\n          const sLength = derSignature[rEnd + 1];\n          const sStart = rEnd + 2;\n          const sEnd = sStart + sLength;\n\n          // Trích xuất r và s\n          let r = derSignature.slice(rStart, rEnd);\n          let s = derSignature.slice(sStart, sEnd);\n          console.log('DER r length:', r.length, 'r (hex):', Buffer.from(r).toString('hex'));\n          console.log('DER s length:', s.length, 's (hex):', Buffer.from(s).toString('hex'));\n\n          // Chuẩn bị r và s cho định dạng raw (mỗi phần 32 bytes)\n          const rPadded = new Uint8Array(32);\n          const sPadded = new Uint8Array(32);\n          if (r.length <= 32) {\n            // Trường hợp r ngắn hơn 32 bytes, thêm padding\n            rPadded.set(r, 32 - r.length);\n          } else {\n            // Trường hợp r dài hơn 32 bytes (thường là có byte 0x00 ở đầu), lấy 32 bytes cuối\n            rPadded.set(r.slice(r.length - 32));\n          }\n          if (s.length <= 32) {\n            // Trường hợp s ngắn hơn 32 bytes, thêm padding\n            sPadded.set(s, 32 - s.length);\n          } else {\n            // Trường hợp s dài hơn 32 bytes, lấy 32 bytes cuối\n            sPadded.set(s.slice(s.length - 32));\n          }\n\n          // Nối r và s lại\n          const rawSignature = new Uint8Array(64);\n          rawSignature.set(rPadded);\n          rawSignature.set(sPadded, 32);\n          console.log('Raw signature sau khi chuyển đổi (r||s):');\n          console.log('- Length:', rawSignature.length);\n          console.log('- Hex:', Buffer.from(rawSignature).toString('hex'));\n          return rawSignature;\n        } catch (e) {\n          console.error('Lỗi khi chuyển đổi DER sang raw:', e);\n          throw e;\n        }\n      };\n      const rawSignature = derToRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n\n      // Thêm bước chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n\n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n\n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n\n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n\n              // Tạo instruction secp256r1\n              setTxStatus(TransactionStatus.BUILDING_TX);\n\n              // Quan trọng: Đảm bảo message được sử dụng ở đây là đúng\n              // Sử dụng message gốc từ messageString để hash lại\n              const messageBytes = new TextEncoder().encode(messageString);\n              const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n              const messageHashBuffer = Buffer.from(new Uint8Array(messageHash));\n              console.log('Message gốc:', messageString);\n              console.log('Message hash (SHA-256):', messageHashBuffer.toString('hex'));\n\n              // Tạo instruction cho secp256r1\n              const secp256r1Ix = createSecp256r1Instruction(messageHashBuffer,\n              // Sử dụng hash của message\n              webAuthnPubKey,\n              // publicKey\n              normalizedSignature,\n              // signature đã chuẩn hóa\n              true // Thử đảo ngược public key\n              );\n              console.log(\"Secp256r1 instruction data:\", {\n                programId: secp256r1Ix.programId.toString(),\n                dataLength: secp256r1Ix.data.length,\n                dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n                pubkeyLength: webAuthnPubKey.length,\n                signatureLength: normalizedSignature.length,\n                messageLength: messageHashBuffer.length\n              });\n\n              // Tạo ví tạm để trả phí giao dịch\n              const feePayer = web3.Keypair.generate();\n\n              // Xin SOL airdrop để trả phí\n              try {\n                const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n                );\n                await connection.confirmTransaction(airdropSignature);\n\n                // Kiểm tra số dư sau khi airdrop\n                const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n                console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n                if (feePayerBalance === 0) {\n                  throw new Error('Không thể airdrop SOL cho fee payer');\n                }\n              } catch (airdropError) {\n                console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n                // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n              }\n\n              // Tiếp tục quá trình xử lý transaction như bình thường\n              const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, Buffer.from(messageHashBuffer),\n              // Sử dụng hash đã tính toán\n              feePayer.publicKey);\n\n              // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n\n              // Đặt fee payer và blockhash\n              transferTx.feePayer = feePayer.publicKey;\n              const {\n                blockhash\n              } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n\n              // Ký transaction bằng fee payer\n              transferTx.sign(feePayer);\n\n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: feePayer.publicKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n\n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              try {\n                console.log('Sending transaction with secp256r1 instruction...');\n                console.log('Skip preflight:', true);\n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true,\n                  // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                console.log('Transaction đã được gửi với ID:', transactionId);\n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n\n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n\n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n\n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n\n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n\n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n\n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n\n        // Lấy dữ liệu tài khoản guardian để lấy public key\n        const guardianAccount = await connection.getAccountInfo(guardianPDA);\n        if (!guardianAccount) {\n          throw new Error('Không thể tìm thấy thông tin guardian');\n        }\n\n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n\n        let webAuthnPubKey;\n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n\n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n\n        // Tạo instruction secp256r1\n        setTxStatus(TransactionStatus.BUILDING_TX);\n\n        // Thêm tham số để thử với public key bị đảo\n        const secp256r1Ix = createSecp256r1Instruction(Buffer.from(messageHashBytes),\n        // Sử dụng hash của message thay vì message gốc\n        webAuthnPubKey,\n        // publicKey\n        normalizedSignature,\n        // signature đã chuẩn hóa\n        true // Đảo ngược public key để thử\n        );\n        console.log(\"Secp256r1 instruction data:\", {\n          programId: secp256r1Ix.programId.toString(),\n          dataLength: secp256r1Ix.data.length,\n          dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n          pubkeyLength: webAuthnPubKey.length,\n          signatureLength: normalizedSignature.length,\n          messageLength: messageHashBytes.length\n        });\n\n        // Tạo ví tạm để trả phí giao dịch\n        const feePayer = web3.Keypair.generate();\n\n        // Xin SOL airdrop để trả phí\n        try {\n          const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n          );\n          await connection.confirmTransaction(airdropSignature);\n\n          // Kiểm tra số dư sau khi airdrop\n          const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n          console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n          if (feePayerBalance === 0) {\n            throw new Error('Không thể airdrop SOL cho fee payer');\n          }\n        } catch (airdropError) {\n          console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n          // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n        }\n\n        // Tạo transaction với verify_and_execute instruction\n        const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, Buffer.from(messageHashBytes),\n        // Sử dụng messageHashBytes (message gốc, chưa hash) cho verify_and_execute\n        feePayer.publicKey);\n\n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n\n        // Đặt fee payer và blockhash\n        transferTx.feePayer = feePayer.publicKey;\n        const {\n          blockhash\n        } = await connection.getLatestBlockhash();\n        transferTx.recentBlockhash = blockhash;\n\n        // Ký transaction bằng fee payer\n        transferTx.sign(feePayer);\n\n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: feePayer.publicKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n\n        // Gửi transaction\n        setTxStatus(TransactionStatus.SUBMITTING);\n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true,\n            // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          console.log('Transaction đã được gửi với ID:', transactionId);\n          setTxId(transactionId);\n          console.log('Transaction ID:', transactionId);\n\n          // Chờ xác nhận\n          setTxStatus(TransactionStatus.CONFIRMING);\n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n          if (confirmation.value.err) {\n            throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n          }\n\n          // Hiển thị thông báo thành công\n          setTxStatus(TransactionStatus.SUCCESS);\n          setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n          setAmount('');\n          setDestinationAddress('');\n\n          // Gọi callback nếu có\n          if (onTransferSuccess) {\n            onTransferSuccess();\n          }\n        } catch (sendError) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n\n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n\n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n\n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n\n  // Hàm chỉ xác minh chữ ký, không thực hiện chuyển tiền\n  const handleVerifySignatureOnly = async () => {\n    setVerificationStatus(VerificationStatus.VERIFYING);\n    setVerificationMessage('');\n    setIsVerifying(true); // Thêm dòng này\n\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        throw new Error(\"Chương trình MoonWallet không tồn tại trên validator\");\n      }\n\n      // Tạo message mẫu để xác minh (có thể thay đổi theo yêu cầu)\n      const testMessage = `Test message for signature verification,timestamp:${Math.floor(Date.now() / 1000)}`;\n      console.log('Message gốc:', testMessage);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(testMessage);\n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setVerificationMessage('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực...');\n\n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId, testMessage, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n\n      // Phân tích clientDataJSON\n      const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n      console.log('ClientData object:', clientDataObj);\n\n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n\n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const derToRaw = derSignature => {\n        try {\n          // Kiểm tra format DER\n          if (derSignature[0] !== 0x30) {\n            throw new Error('Chữ ký không đúng định dạng DER: byte đầu tiên không phải 0x30');\n          }\n\n          // DER format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n          const rLength = derSignature[3];\n          const rStart = 4;\n          const rEnd = rStart + rLength;\n          const sLength = derSignature[rEnd + 1];\n          const sStart = rEnd + 2;\n          const sEnd = sStart + sLength;\n\n          // Trích xuất r và s\n          let r = derSignature.slice(rStart, rEnd);\n          let s = derSignature.slice(sStart, sEnd);\n          console.log('DER r length:', r.length, 'r (hex):', Buffer.from(r).toString('hex'));\n          console.log('DER s length:', s.length, 's (hex):', Buffer.from(s).toString('hex'));\n\n          // Chuẩn bị r và s cho định dạng raw (mỗi phần 32 bytes)\n          const rPadded = new Uint8Array(32);\n          const sPadded = new Uint8Array(32);\n          if (r.length <= 32) {\n            // Trường hợp r ngắn hơn 32 bytes, thêm padding\n            rPadded.set(r, 32 - r.length);\n          } else {\n            // Trường hợp r dài hơn 32 bytes (thường là có byte 0x00 ở đầu), lấy 32 bytes cuối\n            rPadded.set(r.slice(r.length - 32));\n          }\n          if (s.length <= 32) {\n            // Trường hợp s ngắn hơn 32 bytes, thêm padding\n            sPadded.set(s, 32 - s.length);\n          } else {\n            // Trường hợp s dài hơn 32 bytes, lấy 32 bytes cuối\n            sPadded.set(s.slice(s.length - 32));\n          }\n\n          // Nối r và s lại\n          const rawSignature = new Uint8Array(64);\n          rawSignature.set(rPadded);\n          rawSignature.set(sPadded, 32);\n          console.log('Raw signature sau khi chuyển đổi (r||s):');\n          console.log('- Length:', rawSignature.length);\n          console.log('- Hex:', Buffer.from(rawSignature).toString('hex'));\n          return rawSignature;\n        } catch (e) {\n          console.error('Lỗi khi chuyển đổi DER sang raw:', e);\n          throw e;\n        }\n      };\n      const rawSignature = derToRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n\n      // Chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n\n      // LẤY WEBAUTHN PUBLIC KEY\n      console.log('Lấy WebAuthn public key...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      let webAuthnPubKey;\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n\n      // Kiểm tra độ dài khóa\n      if (webAuthnPubKey.length !== 33) {\n        console.warn(`WebAuthn public key có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n      }\n\n      // ĐÚNG QUY TRÌNH XÁC MINH WEBAUTHN:\n      // 1. Tính hash của clientDataJSON\n      const clientDataHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      const clientDataHashBytes = new Uint8Array(clientDataHash);\n      console.log('clientDataJSON hash:', Buffer.from(clientDataHashBytes).toString('hex'));\n\n      // 2. Tạo verification data đúng cách: authenticatorData + hash(clientDataJSON)\n      const verificationData = new Uint8Array(assertion.authenticatorData.length + clientDataHashBytes.length);\n      verificationData.set(new Uint8Array(assertion.authenticatorData), 0);\n      verificationData.set(clientDataHashBytes, assertion.authenticatorData.length);\n      console.log('Verification data length:', verificationData.length);\n      console.log('Verification data (hex):', Buffer.from(verificationData).toString('hex'));\n\n      // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n\n      // Xin SOL airdrop để trả phí\n      try {\n        const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n        );\n        await connection.confirmTransaction(airdropSignature);\n      } catch (airdropError) {\n        console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n        // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n      }\n\n      // Thử cả hai cách: đảo và không đảo byte đầu tiên của public key\n      const verificationDataBuffer = Buffer.from(verificationData);\n\n      // Cách 1: Không đảo byte đầu tiên\n      try {\n        console.log(\"Thử xác minh với public key không đảo ngược...\");\n        const secp256r1Ix1 = createSecp256r1Instruction(verificationDataBuffer, webAuthnPubKey, normalizedSignature, false // Không đảo ngược public key\n        );\n        const transaction1 = new Transaction().add(secp256r1Ix1);\n        transaction1.feePayer = feePayer.publicKey;\n        const {\n          blockhash\n        } = await connection.getLatestBlockhash();\n        transaction1.recentBlockhash = blockhash;\n        transaction1.sign(feePayer);\n        console.log(\"Gửi transaction với public key không đảo ngược...\");\n        const txid1 = await connection.sendRawTransaction(transaction1.serialize(), {\n          skipPreflight: true,\n          preflightCommitment: 'confirmed'\n        });\n        console.log('Transaction xác minh chữ ký đã được gửi với ID:', txid1);\n        const confirmation1 = await connection.confirmTransaction(txid1, 'confirmed');\n        if (confirmation1.value.err) {\n          console.error(\"Lỗi khi xác minh với public key không đảo ngược:\", confirmation1.value.err);\n          throw new Error(`Lỗi: ${JSON.stringify(confirmation1.value.err)}`);\n        } else {\n          console.log(\"XÁC MINH THÀNH CÔNG với public key không đảo ngược!\");\n          setVerificationStatus(VerificationStatus.SUCCESS);\n          setVerificationMessage(`Xác minh chữ ký thành công! ID giao dịch: ${txid1}`);\n          return;\n        }\n      } catch (error1) {\n        console.error(\"Lỗi khi xác minh với public key không đảo ngược:\", error1);\n\n        // Cách 2: Đảo byte đầu tiên\n        try {\n          console.log(\"Thử xác minh với public key đảo ngược...\");\n          const secp256r1Ix2 = createSecp256r1Instruction(verificationDataBuffer, webAuthnPubKey, normalizedSignature, true // Đảo ngược public key\n          );\n          const transaction2 = new Transaction().add(secp256r1Ix2);\n          transaction2.feePayer = feePayer.publicKey;\n          const {\n            blockhash\n          } = await connection.getLatestBlockhash();\n          transaction2.recentBlockhash = blockhash;\n          transaction2.sign(feePayer);\n          console.log(\"Gửi transaction với public key đảo ngược...\");\n          const txid2 = await connection.sendRawTransaction(transaction2.serialize(), {\n            skipPreflight: true,\n            preflightCommitment: 'confirmed'\n          });\n          console.log('Transaction xác minh chữ ký đã được gửi với ID:', txid2);\n          const confirmation2 = await connection.confirmTransaction(txid2, 'confirmed');\n          if (confirmation2.value.err) {\n            console.error(\"Lỗi khi xác minh với public key đảo ngược:\", confirmation2.value.err);\n            throw new Error(`Lỗi: ${JSON.stringify(confirmation2.value.err)}`);\n          } else {\n            console.log(\"XÁC MINH THÀNH CÔNG với public key đảo ngược!\");\n            setVerificationStatus(VerificationStatus.SUCCESS);\n            setVerificationMessage(`Xác minh chữ ký thành công! ID giao dịch: ${txid2}`);\n            return;\n          }\n        } catch (error2) {\n          console.error(\"Lỗi khi xác minh với public key đảo ngược:\", error2);\n          throw new Error('Không thể xác minh chữ ký với cả hai cách: đảo và không đảo public key');\n        }\n      }\n    } catch (error) {\n      console.error('Lỗi khi xác minh chữ ký:', error);\n      setVerificationStatus(VerificationStatus.ERROR);\n      setVerificationMessage(error.message || 'Đã xảy ra lỗi khi xác minh chữ ký');\n    } finally {\n      setIsVerifying(false); // Thêm dòng này\n    }\n  };\n\n  // Thêm hàm mới để xử lý chuyển tiền với xác minh WebAuthn theo cách đúng\n  const handleTransferWithCorrectWebAuthnVerification = async () => {\n    if (!amount || !destinationAddress) {\n      setError('Vui lòng nhập đầy đủ thông tin');\n      return;\n    }\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    setTransactionResult(null); // Reset transaction result\n\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        throw new Error(\"Chương trình MoonWallet không tồn tại trên validator\");\n      }\n\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n\n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n\n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n\n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n\n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n\n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message dùng để ký:', messageString);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n\n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n\n      // Sử dụng message gốc làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId, messageString, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n\n      // Lấy WebAuthn public key\n      console.log('Lấy WebAuthn public key...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      let webAuthnPubKey;\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n\n      // Tạo PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n\n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n\n      // BƯỚC 1: Tạo dữ liệu xác minh đúng cho WebAuthn\n      // Tính hash của clientDataJSON\n      const clientDataHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      const clientDataHashBytes = new Uint8Array(clientDataHash);\n\n      // Tạo verification data bằng cách ghép authenticatorData và clientDataHash\n      const verificationData = new Uint8Array(assertion.authenticatorData.length + clientDataHashBytes.length);\n      verificationData.set(new Uint8Array(assertion.authenticatorData), 0);\n      verificationData.set(clientDataHashBytes, assertion.authenticatorData.length);\n      console.log('Verification data length:', verificationData.length);\n\n      // BƯỚC 2: Chuyển đổi chữ ký từ DER sang raw format\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n\n      // BƯỚC 3: Chuẩn hóa chữ ký về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n\n      // BƯỚC 4: Tạo Secp256r1 instruction\n      setTxStatus(TransactionStatus.BUILDING_TX);\n      const secp256r1Ix = createSecp256r1Instruction(Buffer.from(verificationData), webAuthnPubKey, normalizedSignature, false);\n\n      // BƯỚC 5: Tạo Transaction chuyển tiền\n      console.log('Tạo transaction chuyển tiền...');\n      const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, messageBytes, wallet.publicKey);\n\n      // BƯỚC 6: Gộp cả 2 instruction vào một transaction\n      // Instruction 1: Xác minh chữ ký WebAuthn\n      // Instruction 2: Chuyển tiền\n      const transaction = new Transaction();\n      transaction.add(secp256r1Ix);\n      transaction.add(transferTx.instructions[0]);\n\n      // Thiết lập các thông tin cần thiết cho transaction\n      transaction.feePayer = wallet.publicKey;\n      const {\n        blockhash\n      } = await connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n\n      // Ký và gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      console.log('Gửi transaction...');\n      const signedTx = await wallet.signTransaction(transaction);\n      const txid = await connection.sendRawTransaction(signedTx.serialize());\n      console.log('Transaction đã gửi với ID:', txid);\n      setTxId(txid);\n      setTxStatus(TransactionStatus.CONFIRMING);\n\n      // Chờ xác nhận\n      const confirmation = await connection.confirmTransaction(txid, 'confirmed');\n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n      console.log('Transaction đã được xác nhận!');\n      setTxStatus(TransactionStatus.SUCCESS);\n      setSuccess(`Đã chuyển ${amount} SOL thành công đến ${destinationAddress}`);\n      setTransactionResult({\n        success: true,\n        message: `Đã chuyển ${amount} SOL thành công đến ${destinationAddress}`,\n        signature: txid\n      });\n\n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Lỗi không xác định');\n      setTxStatus(TransactionStatus.ERROR);\n      setTransactionResult({\n        success: false,\n        message: error.message || 'Lỗi không xác định'\n      });\n\n      // Gọi callback nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n\n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n\n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-note\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"L\\u01B0u \\xFD:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1411,\n            columnNumber: 14\n          }, this), \" B\\u1EA1n \\u0111ang k\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn validator c\\u1EE5c b\\u1ED9.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1411,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"C\\u1EA7n kh\\u1EDFi \\u0111\\u1ED9ng validator v\\u1EDBi c\\xE1c tham s\\u1ED1 \\u0111\\xFAng \\u0111\\u1EC3 c\\xE0i \\u0111\\u1EB7t ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1412,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1413,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1410,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Thêm các hàm tiện ích\n  const findMultisigPDA = async () => {\n    const credentialId = localStorage.getItem('currentCredentialId');\n    if (!credentialId) {\n      throw new Error(\"Không tìm thấy credential ID\");\n    }\n    return getMultisigPDA(credentialId);\n  };\n  const findGuardianPDA = async (multisigPDA, guardianId) => {\n    return getGuardianPDA(multisigPDA, guardianId);\n  };\n\n  // Hàm chuyển đổi base64Url thành Buffer\n  const base64UrlToBuffer = base64Url => {\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const binaryString = window.atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card w-full bg-base-100 shadow-xl\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"card-title\",\n        children: \"Chuy\\u1EC3n SOL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"S\\u1ED1 d\\u01B0 v\\xED:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1453,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-medium\",\n              children: [pdaBalance.toFixed(4), \" SOL\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1454,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1452,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => e.preventDefault(),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"label\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"label-text\",\n                children: \"\\u0110\\u1ECBa ch\\u1EC9 ng\\u01B0\\u1EDDi nh\\u1EADn\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1460,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1459,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa ch\\u1EC9 Solana\",\n              className: \"input input-bordered\",\n              value: destinationAddress,\n              onChange: handleDestinationChange,\n              disabled: isTransferring\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1462,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1458,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"label\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"label-text\",\n                children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1473,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1472,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"0.0\",\n              className: \"input input-bordered\",\n              value: amount,\n              onChange: handleAmountChange,\n              disabled: isTransferring\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1475,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1471,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control mb-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-col md:flex-row gap-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary flex-1\",\n                onClick: handleSubmit,\n                disabled: isTransferring || !amount || !destinationAddress || parseFloat(amount) <= 0,\n                children: isTransferring ? 'Đang xử lý...' : 'Chuyển SOL (Cách cũ)'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1486,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success flex-1\",\n                onClick: handleTransferWithCorrectWebAuthnVerification,\n                disabled: isTransferring || !amount || !destinationAddress || parseFloat(amount) <= 0,\n                children: isTransferring ? 'Đang xử lý...' : 'Chuyển SOL (Cách mới)'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1493,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1485,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1484,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline\",\n              onClick: handleVerifySignatureOnly,\n              disabled: isVerifying,\n              children: isVerifying ? 'Đang xác thực...' : 'Chỉ kiểm tra chữ ký WebAuthn'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1503,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1502,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1457,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-error mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"stroke-current shrink-0 h-6 w-6\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: \"2\",\n              d: \"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1515,\n              columnNumber: 131\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1515,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1516,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1514,\n          columnNumber: 13\n        }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-success mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"stroke-current shrink-0 h-6 w-6\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: \"2\",\n              d: \"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1522,\n              columnNumber: 131\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1522,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: success\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1523,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1521,\n          columnNumber: 13\n        }, this), renderStatusMessage(), txId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium\",\n            children: \"ID Giao d\\u1ECBch:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1532,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://explorer.solana.com/tx/${txId}?cluster=custom&customUrl=${encodeURIComponent('http://localhost:8899')}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"link link-primary break-all\",\n            children: txId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1533,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1531,\n          columnNumber: 13\n        }, this), verificationStatus !== VerificationStatus.IDLE && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `alert ${verificationStatus === VerificationStatus.VERIFYING ? 'alert-info' : verificationStatus === VerificationStatus.SUCCESS ? 'alert-success' : 'alert-error'} mt-4`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: verificationMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1553,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1546,\n          columnNumber: 13\n        }, this), transactionResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `alert ${transactionResult.success ? 'alert-success' : 'alert-error'} mt-4`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: transactionResult.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1560,\n            columnNumber: 15\n          }, this), transactionResult.signature && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `https://explorer.solana.com/tx/${transactionResult.signature}?cluster=custom&customUrl=${encodeURIComponent('http://localhost:8899')}`,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"link link-primary text-sm\",\n              children: \"Xem giao d\\u1ECBch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1563,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1562,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1559,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1450,\n        columnNumber: 9\n      }, this), renderValidatorNote()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1448,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1447,\n    columnNumber: 5\n  }, this);\n};\n_s(TransferForm, \"dY6oRYtTrcSxpMwzaiV0FWkaP9M=\");\n_c = TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","PublicKey","Transaction","SendTransactionError","web3","LAMPORTS_PER_SOL","createTransferTx","createSecp256r1Instruction","programID","SECP256R1_PROGRAM_ID","getWebAuthnAssertion","getGuardianPDA","getMultisigPDA","getWalletByCredentialId","Buffer","BN","jsxDEV","_jsxDEV","SECP256R1_ORDER","SECP256R1_HALF_ORDER","shrn","normalizeSignatureToLowS","sig","r","slice","s","sBN","console","log","toString","gt","sNormalized","sub","sNormalizedBuffer","toArrayLike","concat","convertDERtoRaw","derSignature","error","Uint8Array","rLength","rStart","rEnd","sLength","sStart","sEnd","rPadded","sPadded","length","set","rawSignature","TransactionStatus","VerificationStatus","TransferForm","walletAddress","credentialId","guardianId","onTransferSuccess","onTransferError","connection","pdaBalance","_s","destinationAddress","setDestinationAddress","amount","setAmount","isTransferring","setIsTransferring","setError","success","setSuccess","walletBalance","setWalletBalance","nonce","setNonce","txStatus","setTxStatus","IDLE","txId","setTxId","isMoonWalletAvailable","setIsMoonWalletAvailable","connectionEndpoint","setConnectionEndpoint","verificationStatus","setVerificationStatus","verificationMessage","setVerificationMessage","transactionResult","setTransactionResult","isVerifying","setIsVerifying","checkPrograms","endpoint","rpcEndpoint","moonWalletInfo","getAccountInfo","warn","undefined","loadWalletInfo","multisigPDA","accountInfo","transactionNonce","data","readBigUInt64LE","Number","handleDestinationChange","e","target","value","handleAmountChange","test","handleSubmit","preventDefault","PREPARING","errorMsg","Error","parseFloat","amountLamports","Math","floor","destinationPublicKey","nextNonce","timestamp","Date","now","formattedAmount","messageString","messageBytes","TextEncoder","encode","Array","from","map","b","padStart","join","messageHash","crypto","subtle","digest","messageHashBytes","toBase58","guardianPDA","SIGNING","assertion","TextDecoder","decode","clientDataJSON","clientDataObj","JSON","parse","challenge","challengeBase64","base64Standard","replace","padEnd","challengeBytes","signature","byteLength","derToRaw","normalizedSignature","credentialMapping","guardianPublicKey","localStorageData","localStorage","getItem","localMapping","webAuthnPubKey","BUILDING_TX","messageHashBuffer","secp256r1Ix","programId","dataLength","dataHex","substring","pubkeyLength","signatureLength","messageLength","feePayer","Keypair","generate","airdropSignature","requestAirdrop","publicKey","confirmTransaction","feePayerBalance","getBalance","airdropError","transferTx","instructions","unshift","blockhash","getLatestBlockhash","recentBlockhash","sign","ix","keys","k","pubkey","isSigner","isWritable","dataSize","SUBMITTING","transactionId","sendRawTransaction","serialize","skipPreflight","preflightCommitment","CONFIRMING","confirmation","err","stringify","SUCCESS","sendError","message","logs","isArray","logError","errorMessage","includes","localStorageError","guardianAccount","hasWebAuthnPubKey","ERROR","handleVerifySignatureOnly","VERIFYING","testMessage","clientDataHash","clientDataHashBytes","verificationData","authenticatorData","verificationDataBuffer","secp256r1Ix1","transaction1","add","txid1","confirmation1","error1","secp256r1Ix2","transaction2","txid2","confirmation2","error2","handleTransferWithCorrectWebAuthnVerification","wallet","transaction","signedTx","signTransaction","txid","renderStatusMessage","renderValidatorNote","className","children","fileName","_jsxFileName","lineNumber","columnNumber","findMultisigPDA","findGuardianPDA","base64UrlToBuffer","base64Url","base64","binaryString","window","atob","bytes","i","charCodeAt","buffer","toFixed","onSubmit","type","placeholder","onChange","disabled","onClick","xmlns","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","href","encodeURIComponent","rel","_c","$RefreshReg$"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, Connection, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { \n  createTransferTx, \n  createSecp256r1Instruction,\n  programID,\n  SECP256R1_PROGRAM_ID\n} from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { useAnchorWallet } from '@solana/wallet-adapter-react';\n\n// Thêm hằng số cho chuẩn hóa signature\nconst SECP256R1_ORDER = new BN('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551', 16);\nconst SECP256R1_HALF_ORDER = SECP256R1_ORDER.shrn(1);\n\n/**\n * Chuẩn hóa chữ ký về dạng Low-S\n * @param signature - Chữ ký raw\n * @returns Chữ ký đã chuẩn hóa\n */\nconst normalizeSignatureToLowS = (sig: Buffer): Buffer => {\n  const r = sig.slice(0, 32);\n  const s = sig.slice(32, 64);\n  \n  const sBN = new BN(s);\n  console.log(\"S value (BN):\", sBN.toString(16));\n  console.log(\"HALF_ORDER:\", SECP256R1_HALF_ORDER.toString(16));\n  \n  // Kiểm tra nếu s > half_order\n  if (sBN.gt(SECP256R1_HALF_ORDER)) {\n    console.log(\"Chuẩn hóa signature về dạng Low-S\");\n    // Tính s' = order - s\n    const sNormalized = SECP256R1_ORDER.sub(sBN);\n    console.log(\"S normalized:\", sNormalized.toString(16));\n    const sNormalizedBuffer = sNormalized.toArrayLike(Buffer, 'be', 32);\n    return Buffer.concat([r, sNormalizedBuffer]);\n  }\n  \n  console.log(\"Signature đã ở dạng Low-S\");\n  return sig;\n};\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = (derSignature: Uint8Array): Uint8Array => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n  \n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  \n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n  \n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n  \n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  \n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  \n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n  \n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  \n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  \n  return rawSignature;\n};\n\n// Interface cho props của component\ninterface TransferFormProps {\n  walletAddress: string;  \n  credentialId: string;   \n  guardianId: number;     \n  onTransferSuccess?: () => void;\n  onTransferError?: (error: Error) => void;\n  // Thêm connection vào props\n  connection: Connection;\n  // Thêm pdaBalance để hiển thị số dư chính xác\n  pdaBalance?: number;\n}\n\n// Enum cho các trạng thái giao dịch\nenum TransactionStatus {\n  IDLE = 'idle',\n  PREPARING = 'preparing',\n  SIGNING = 'signing',\n  BUILDING_TX = 'building_tx',\n  SUBMITTING = 'submitting',\n  CONFIRMING = 'confirming',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\n// Thêm enum để theo dõi trạng thái xác minh chữ ký\nenum VerificationStatus {\n  IDLE = 'idle',\n  VERIFYING = 'verifying',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\nexport const TransferForm: React.FC<TransferFormProps> = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  // State\n  const [destinationAddress, setDestinationAddress] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [isTransferring, setIsTransferring] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [nonce, setNonce] = useState<number>(0);\n  const [txStatus, setTxStatus] = useState<TransactionStatus>(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState<string>('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState<boolean>(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState<string>('');\n  // Thêm state cho chức năng xác minh chữ ký\n  const [verificationStatus, setVerificationStatus] = useState<VerificationStatus>(VerificationStatus.IDLE);\n  const [verificationMessage, setVerificationMessage] = useState<string>('');\n  // Thêm state cho transactionResult\n  const [transactionResult, setTransactionResult] = useState<{\n    success: boolean;\n    message: string;\n    signature?: string;\n  } | null>(null);\n  // Thêm state cho isVerifying\n  const [isVerifying, setIsVerifying] = useState<boolean>(false);\n  \n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n        \n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          \n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    \n    checkPrograms();\n  }, [connection]);\n  \n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n  \n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n        \n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n        \n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        \n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        \n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n        \n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    \n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n  \n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n  \n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n  \n  // Xử lý khi submit form\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    \n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        \n        throw new Error(errorMsg);\n      }\n      \n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      \n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n      \n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n      \n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n      \n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey: PublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n      \n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n      \n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      \n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n      \n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n      \n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n      \n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n      \n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(credentialId, messageString, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n      \n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n        \n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64\n            .replace(/-/g, '+')\n            .replace(/_/g, '/')\n            .padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          \n          console.log('Challenge từ WebAuthn (hex):', challengeBytes.toString('hex'));\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      \n      setSuccess(''); // Xóa thông báo thành công tạm thời\n      \n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n      \n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      // Sử dụng hàm từ utils/webauthnUtils.ts\n      const derToRaw = (derSignature: Uint8Array): Uint8Array => {\n        try {\n          // Kiểm tra format DER\n          if (derSignature[0] !== 0x30) {\n            throw new Error('Chữ ký không đúng định dạng DER: byte đầu tiên không phải 0x30');\n          }\n          \n          // DER format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n          const rLength = derSignature[3];\n          const rStart = 4;\n          const rEnd = rStart + rLength;\n          \n          const sLength = derSignature[rEnd + 1];\n          const sStart = rEnd + 2;\n          const sEnd = sStart + sLength;\n          \n          // Trích xuất r và s\n          let r = derSignature.slice(rStart, rEnd);\n          let s = derSignature.slice(sStart, sEnd);\n          \n          console.log('DER r length:', r.length, 'r (hex):', Buffer.from(r).toString('hex'));\n          console.log('DER s length:', s.length, 's (hex):', Buffer.from(s).toString('hex'));\n          \n          // Chuẩn bị r và s cho định dạng raw (mỗi phần 32 bytes)\n          const rPadded = new Uint8Array(32);\n          const sPadded = new Uint8Array(32);\n          \n          if (r.length <= 32) {\n            // Trường hợp r ngắn hơn 32 bytes, thêm padding\n            rPadded.set(r, 32 - r.length);\n          } else {\n            // Trường hợp r dài hơn 32 bytes (thường là có byte 0x00 ở đầu), lấy 32 bytes cuối\n            rPadded.set(r.slice(r.length - 32));\n          }\n          \n          if (s.length <= 32) {\n            // Trường hợp s ngắn hơn 32 bytes, thêm padding\n            sPadded.set(s, 32 - s.length);\n          } else {\n            // Trường hợp s dài hơn 32 bytes, lấy 32 bytes cuối\n            sPadded.set(s.slice(s.length - 32));\n          }\n          \n          // Nối r và s lại\n          const rawSignature = new Uint8Array(64);\n          rawSignature.set(rPadded);\n          rawSignature.set(sPadded, 32);\n          \n          console.log('Raw signature sau khi chuyển đổi (r||s):');\n          console.log('- Length:', rawSignature.length);\n          console.log('- Hex:', Buffer.from(rawSignature).toString('hex'));\n          \n          return rawSignature;\n        } catch (e) {\n          console.error('Lỗi khi chuyển đổi DER sang raw:', e);\n          throw e;\n        }\n      };\n      \n      const rawSignature = derToRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n      \n      // Thêm bước chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n      \n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n              \n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n              \n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n              \n              // Tạo instruction secp256r1\n              setTxStatus(TransactionStatus.BUILDING_TX);\n              \n              // Quan trọng: Đảm bảo message được sử dụng ở đây là đúng\n              // Sử dụng message gốc từ messageString để hash lại\n              const messageBytes = new TextEncoder().encode(messageString);\n              const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n              const messageHashBuffer = Buffer.from(new Uint8Array(messageHash));\n              \n              console.log('Message gốc:', messageString);\n              console.log('Message hash (SHA-256):', messageHashBuffer.toString('hex'));\n              \n              // Tạo instruction cho secp256r1\n              const secp256r1Ix = createSecp256r1Instruction(\n                messageHashBuffer, // Sử dụng hash của message\n                webAuthnPubKey, // publicKey\n                normalizedSignature, // signature đã chuẩn hóa\n                true // Thử đảo ngược public key\n              );\n              \n              console.log(\"Secp256r1 instruction data:\", {\n                programId: secp256r1Ix.programId.toString(),\n                dataLength: secp256r1Ix.data.length,\n                dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n                pubkeyLength: webAuthnPubKey.length,\n                signatureLength: normalizedSignature.length,\n                messageLength: messageHashBuffer.length\n              });\n              \n              // Tạo ví tạm để trả phí giao dịch\n              const feePayer = web3.Keypair.generate();\n              \n              // Xin SOL airdrop để trả phí\n              try {\n                const airdropSignature = await connection.requestAirdrop(\n                  feePayer.publicKey,\n                  web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n                );\n                await connection.confirmTransaction(airdropSignature);\n                \n                // Kiểm tra số dư sau khi airdrop\n                const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n                console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n                \n                if (feePayerBalance === 0) {\n                  throw new Error('Không thể airdrop SOL cho fee payer');\n                }\n              } catch (airdropError) {\n                console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n                // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n              }\n              \n              // Tiếp tục quá trình xử lý transaction như bình thường\n              const transferTx = createTransferTx(\n                multisigPDA,\n                guardianPDA,\n                destinationPublicKey,\n                amountLamports,\n                nextNonce,\n                timestamp,\n                Buffer.from(messageHashBuffer), // Sử dụng hash đã tính toán\n                feePayer.publicKey\n              );\n              \n              // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n              \n              // Đặt fee payer và blockhash\n              transferTx.feePayer = feePayer.publicKey;\n              const { blockhash } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n              \n              // Ký transaction bằng fee payer\n              transferTx.sign(feePayer);\n              \n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: feePayer.publicKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n              \n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              \n              try {\n                console.log('Sending transaction with secp256r1 instruction...');\n                console.log('Skip preflight:', true);\n                \n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                \n                console.log('Transaction đã được gửi với ID:', transactionId);\n                \n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n                \n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                \n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                \n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n                \n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n                \n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                \n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError: any) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  \n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n                  \n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n                  \n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  \n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  \n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n        \n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n        \n        // Lấy dữ liệu tài khoản guardian để lấy public key\n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      \n      if (!guardianAccount) {\n        throw new Error('Không thể tìm thấy thông tin guardian');\n      }\n      \n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n        \n        let webAuthnPubKey: Buffer; \n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n        \n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n      \n      // Tạo instruction secp256r1\n      setTxStatus(TransactionStatus.BUILDING_TX);\n      \n        // Thêm tham số để thử với public key bị đảo\n      const secp256r1Ix = createSecp256r1Instruction(\n        Buffer.from(messageHashBytes), // Sử dụng hash của message thay vì message gốc\n        webAuthnPubKey, // publicKey\n        normalizedSignature, // signature đã chuẩn hóa\n        true // Đảo ngược public key để thử\n      );\n      \n        console.log(\"Secp256r1 instruction data:\", {\n          programId: secp256r1Ix.programId.toString(),\n          dataLength: secp256r1Ix.data.length,\n          dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n          pubkeyLength: webAuthnPubKey.length,\n          signatureLength: normalizedSignature.length,\n          messageLength: messageHashBytes.length\n        });\n        \n        // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n        try {\n      const airdropSignature = await connection.requestAirdrop(\n        feePayer.publicKey,\n            web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n      );\n      await connection.confirmTransaction(airdropSignature);\n      \n          // Kiểm tra số dư sau khi airdrop\n          const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n          console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n          \n          if (feePayerBalance === 0) {\n            throw new Error('Không thể airdrop SOL cho fee payer');\n          }\n        } catch (airdropError) {\n          console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n          // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n        }\n        \n        // Tạo transaction với verify_and_execute instruction\n      const transferTx = createTransferTx(\n        multisigPDA,\n        guardianPDA,\n        destinationPublicKey,\n        amountLamports,\n        nextNonce,\n        timestamp,\n          Buffer.from(messageHashBytes), // Sử dụng messageHashBytes (message gốc, chưa hash) cho verify_and_execute\n        feePayer.publicKey\n      );\n      \n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n      \n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const { blockhash } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n      \n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n        \n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: feePayer.publicKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n      \n      // Gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      \n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          \n          console.log('Transaction đã được gửi với ID:', transactionId);\n          \n      setTxId(transactionId);\n      console.log('Transaction ID:', transactionId);\n      \n      // Chờ xác nhận\n      setTxStatus(TransactionStatus.CONFIRMING);\n      \n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n      \n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n      \n      // Hiển thị thông báo thành công\n      setTxStatus(TransactionStatus.SUCCESS);\n      setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n      setAmount('');\n      setDestinationAddress('');\n      \n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n          }\n        } catch (sendError: any) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            \n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n            \n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n            \n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            \n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            \n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n      \n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  \n  // Hàm chỉ xác minh chữ ký, không thực hiện chuyển tiền\n  const handleVerifySignatureOnly = async () => {\n    setVerificationStatus(VerificationStatus.VERIFYING);\n    setVerificationMessage('');\n    setIsVerifying(true); // Thêm dòng này\n    \n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        throw new Error(\"Chương trình MoonWallet không tồn tại trên validator\");\n      }\n      \n      // Tạo message mẫu để xác minh (có thể thay đổi theo yêu cầu)\n      const testMessage = `Test message for signature verification,timestamp:${Math.floor(Date.now() / 1000)}`;\n      console.log('Message gốc:', testMessage);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(testMessage);\n      \n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setVerificationMessage('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực...');\n      \n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId, testMessage, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n      \n      // Phân tích clientDataJSON\n      const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n      console.log('ClientData object:', clientDataObj);\n      \n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      \n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const derToRaw = (derSignature: Uint8Array): Uint8Array => {\n        try {\n          // Kiểm tra format DER\n          if (derSignature[0] !== 0x30) {\n            throw new Error('Chữ ký không đúng định dạng DER: byte đầu tiên không phải 0x30');\n          }\n          \n          // DER format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n          const rLength = derSignature[3];\n          const rStart = 4;\n          const rEnd = rStart + rLength;\n          \n          const sLength = derSignature[rEnd + 1];\n          const sStart = rEnd + 2;\n          const sEnd = sStart + sLength;\n          \n          // Trích xuất r và s\n          let r = derSignature.slice(rStart, rEnd);\n          let s = derSignature.slice(sStart, sEnd);\n          \n          console.log('DER r length:', r.length, 'r (hex):', Buffer.from(r).toString('hex'));\n          console.log('DER s length:', s.length, 's (hex):', Buffer.from(s).toString('hex'));\n          \n          // Chuẩn bị r và s cho định dạng raw (mỗi phần 32 bytes)\n          const rPadded = new Uint8Array(32);\n          const sPadded = new Uint8Array(32);\n          \n          if (r.length <= 32) {\n            // Trường hợp r ngắn hơn 32 bytes, thêm padding\n            rPadded.set(r, 32 - r.length);\n          } else {\n            // Trường hợp r dài hơn 32 bytes (thường là có byte 0x00 ở đầu), lấy 32 bytes cuối\n            rPadded.set(r.slice(r.length - 32));\n          }\n          \n          if (s.length <= 32) {\n            // Trường hợp s ngắn hơn 32 bytes, thêm padding\n            sPadded.set(s, 32 - s.length);\n          } else {\n            // Trường hợp s dài hơn 32 bytes, lấy 32 bytes cuối\n            sPadded.set(s.slice(s.length - 32));\n          }\n          \n          // Nối r và s lại\n          const rawSignature = new Uint8Array(64);\n          rawSignature.set(rPadded);\n          rawSignature.set(sPadded, 32);\n          \n          console.log('Raw signature sau khi chuyển đổi (r||s):');\n          console.log('- Length:', rawSignature.length);\n          console.log('- Hex:', Buffer.from(rawSignature).toString('hex'));\n          \n          return rawSignature;\n        } catch (e) {\n          console.error('Lỗi khi chuyển đổi DER sang raw:', e);\n          throw e;\n        }\n      };\n      \n      const rawSignature = derToRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      \n      // Chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n      \n      // LẤY WEBAUTHN PUBLIC KEY\n      console.log('Lấy WebAuthn public key...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      let webAuthnPubKey: Buffer;\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n      \n      // Kiểm tra độ dài khóa\n      if (webAuthnPubKey.length !== 33) {\n        console.warn(`WebAuthn public key có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n      }\n      \n      // ĐÚNG QUY TRÌNH XÁC MINH WEBAUTHN:\n      // 1. Tính hash của clientDataJSON\n      const clientDataHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      const clientDataHashBytes = new Uint8Array(clientDataHash);\n      console.log('clientDataJSON hash:', Buffer.from(clientDataHashBytes).toString('hex'));\n      \n      // 2. Tạo verification data đúng cách: authenticatorData + hash(clientDataJSON)\n      const verificationData = new Uint8Array(assertion.authenticatorData.length + clientDataHashBytes.length);\n      verificationData.set(new Uint8Array(assertion.authenticatorData), 0);\n      verificationData.set(clientDataHashBytes, assertion.authenticatorData.length);\n      \n      console.log('Verification data length:', verificationData.length);\n      console.log('Verification data (hex):', Buffer.from(verificationData).toString('hex'));\n      \n      // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n      try {\n        const airdropSignature = await connection.requestAirdrop(\n          feePayer.publicKey,\n          web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n        );\n        await connection.confirmTransaction(airdropSignature);\n      } catch (airdropError) {\n        console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n        // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n      }\n      \n      // Thử cả hai cách: đảo và không đảo byte đầu tiên của public key\n      const verificationDataBuffer = Buffer.from(verificationData);\n      \n      // Cách 1: Không đảo byte đầu tiên\n      try {\n        console.log(\"Thử xác minh với public key không đảo ngược...\");\n        \n        const secp256r1Ix1 = createSecp256r1Instruction(\n          verificationDataBuffer,\n          webAuthnPubKey,\n          normalizedSignature,\n          false // Không đảo ngược public key\n        );\n        \n        const transaction1 = new Transaction().add(secp256r1Ix1);\n        transaction1.feePayer = feePayer.publicKey;\n        const { blockhash } = await connection.getLatestBlockhash();\n        transaction1.recentBlockhash = blockhash;\n        transaction1.sign(feePayer);\n        \n        console.log(\"Gửi transaction với public key không đảo ngược...\");\n        const txid1 = await connection.sendRawTransaction(transaction1.serialize(), {\n          skipPreflight: true,\n          preflightCommitment: 'confirmed'\n        });\n        \n        console.log('Transaction xác minh chữ ký đã được gửi với ID:', txid1);\n        \n        const confirmation1 = await connection.confirmTransaction(txid1, 'confirmed');\n        if (confirmation1.value.err) {\n          console.error(\"Lỗi khi xác minh với public key không đảo ngược:\", confirmation1.value.err);\n          throw new Error(`Lỗi: ${JSON.stringify(confirmation1.value.err)}`);\n        } else {\n          console.log(\"XÁC MINH THÀNH CÔNG với public key không đảo ngược!\");\n          setVerificationStatus(VerificationStatus.SUCCESS);\n          setVerificationMessage(`Xác minh chữ ký thành công! ID giao dịch: ${txid1}`);\n          return;\n        }\n      } catch (error1) {\n        console.error(\"Lỗi khi xác minh với public key không đảo ngược:\", error1);\n        \n        // Cách 2: Đảo byte đầu tiên\n        try {\n          console.log(\"Thử xác minh với public key đảo ngược...\");\n          \n          const secp256r1Ix2 = createSecp256r1Instruction(\n            verificationDataBuffer,\n            webAuthnPubKey,\n            normalizedSignature,\n            true // Đảo ngược public key\n          );\n          \n          const transaction2 = new Transaction().add(secp256r1Ix2);\n          transaction2.feePayer = feePayer.publicKey;\n          const { blockhash } = await connection.getLatestBlockhash();\n          transaction2.recentBlockhash = blockhash;\n          transaction2.sign(feePayer);\n          \n          console.log(\"Gửi transaction với public key đảo ngược...\");\n          const txid2 = await connection.sendRawTransaction(transaction2.serialize(), {\n            skipPreflight: true,\n            preflightCommitment: 'confirmed'\n          });\n          \n          console.log('Transaction xác minh chữ ký đã được gửi với ID:', txid2);\n          \n          const confirmation2 = await connection.confirmTransaction(txid2, 'confirmed');\n          if (confirmation2.value.err) {\n            console.error(\"Lỗi khi xác minh với public key đảo ngược:\", confirmation2.value.err);\n            throw new Error(`Lỗi: ${JSON.stringify(confirmation2.value.err)}`);\n          } else {\n            console.log(\"XÁC MINH THÀNH CÔNG với public key đảo ngược!\");\n            setVerificationStatus(VerificationStatus.SUCCESS);\n            setVerificationMessage(`Xác minh chữ ký thành công! ID giao dịch: ${txid2}`);\n            return;\n          }\n        } catch (error2) {\n          console.error(\"Lỗi khi xác minh với public key đảo ngược:\", error2);\n          throw new Error('Không thể xác minh chữ ký với cả hai cách: đảo và không đảo public key');\n        }\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi xác minh chữ ký:', error);\n      setVerificationStatus(VerificationStatus.ERROR);\n      setVerificationMessage(error.message || 'Đã xảy ra lỗi khi xác minh chữ ký');\n    } finally {\n      setIsVerifying(false); // Thêm dòng này\n    }\n  };\n  \n  // Thêm hàm mới để xử lý chuyển tiền với xác minh WebAuthn theo cách đúng\n  const handleTransferWithCorrectWebAuthnVerification = async () => {\n    if (!amount || !destinationAddress) {\n      setError('Vui lòng nhập đầy đủ thông tin');\n      return;\n    }\n\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    setTransactionResult(null); // Reset transaction result\n\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        throw new Error(\"Chương trình MoonWallet không tồn tại trên validator\");\n      }\n\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      \n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n      \n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n      \n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n      \n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey: PublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n      \n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n      \n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message dùng để ký:', messageString);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      \n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n      \n      // Sử dụng message gốc làm dữ liệu để ký với WebAuthn\n      const assertion = await getWebAuthnAssertion(credentialId, messageString, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      \n      // Lấy WebAuthn public key\n      console.log('Lấy WebAuthn public key...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      let webAuthnPubKey: Buffer;\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n        if (localStorageData) {\n          const localMapping = JSON.parse(localStorageData);\n          if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n            webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n          } else {\n            throw new Error('Không tìm thấy WebAuthn public key trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy WebAuthn public key');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n      }\n\n      // Tạo PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      \n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n      \n      // BƯỚC 1: Tạo dữ liệu xác minh đúng cho WebAuthn\n      // Tính hash của clientDataJSON\n      const clientDataHash = await crypto.subtle.digest('SHA-256', assertion.clientDataJSON);\n      const clientDataHashBytes = new Uint8Array(clientDataHash);\n      \n      // Tạo verification data bằng cách ghép authenticatorData và clientDataHash\n      const verificationData = new Uint8Array(assertion.authenticatorData.length + clientDataHashBytes.length);\n      verificationData.set(new Uint8Array(assertion.authenticatorData), 0);\n      verificationData.set(clientDataHashBytes, assertion.authenticatorData.length);\n      \n      console.log('Verification data length:', verificationData.length);\n      \n      // BƯỚC 2: Chuyển đổi chữ ký từ DER sang raw format\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      // BƯỚC 3: Chuẩn hóa chữ ký về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      \n      // BƯỚC 4: Tạo Secp256r1 instruction\n      setTxStatus(TransactionStatus.BUILDING_TX);\n      \n      const secp256r1Ix = createSecp256r1Instruction(\n        Buffer.from(verificationData),\n        webAuthnPubKey,\n        normalizedSignature,\n        false\n      );\n      \n      // BƯỚC 5: Tạo Transaction chuyển tiền\n      console.log('Tạo transaction chuyển tiền...');\n      \n      const transferTx = createTransferTx(\n        multisigPDA,\n        guardianPDA,\n        destinationPublicKey,\n        amountLamports,\n        nextNonce,\n        timestamp,\n        messageBytes,\n        wallet.publicKey\n      );\n      \n      // BƯỚC 6: Gộp cả 2 instruction vào một transaction\n      // Instruction 1: Xác minh chữ ký WebAuthn\n      // Instruction 2: Chuyển tiền\n      const transaction = new Transaction();\n      transaction.add(secp256r1Ix);\n      transaction.add(transferTx.instructions[0]);\n      \n      // Thiết lập các thông tin cần thiết cho transaction\n      transaction.feePayer = wallet.publicKey;\n      const { blockhash } = await connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      \n      // Ký và gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      console.log('Gửi transaction...');\n      \n      const signedTx = await wallet.signTransaction(transaction);\n      const txid = await connection.sendRawTransaction(signedTx.serialize());\n      \n      console.log('Transaction đã gửi với ID:', txid);\n      setTxId(txid);\n      setTxStatus(TransactionStatus.CONFIRMING);\n      \n      // Chờ xác nhận\n      const confirmation = await connection.confirmTransaction(txid, 'confirmed');\n      \n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n      \n      console.log('Transaction đã được xác nhận!');\n      setTxStatus(TransactionStatus.SUCCESS);\n      setSuccess(`Đã chuyển ${amount} SOL thành công đến ${destinationAddress}`);\n      setTransactionResult({\n        success: true,\n        message: `Đã chuyển ${amount} SOL thành công đến ${destinationAddress}`,\n        signature: txid\n      });\n      \n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Lỗi không xác định');\n      setTxStatus(TransactionStatus.ERROR);\n      setTransactionResult({\n        success: false,\n        message: error.message || 'Lỗi không xác định'\n      });\n      \n      // Gọi callback nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  \n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n  \n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return (\n        <div className=\"info-note\">\n          <p><strong>Lưu ý:</strong> Bạn đang kết nối đến validator cục bộ.</p>\n          <p>Cần khởi động validator với các tham số đúng để cài đặt chương trình MoonWallet:</p>\n          <pre>\n            solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n          </pre>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  // Thêm các hàm tiện ích\n  const findMultisigPDA = async () => {\n    const credentialId = localStorage.getItem('currentCredentialId');\n    if (!credentialId) {\n      throw new Error(\"Không tìm thấy credential ID\");\n    }\n    return getMultisigPDA(credentialId);\n  };\n\n  const findGuardianPDA = async (multisigPDA: PublicKey, guardianId: number) => {\n    return getGuardianPDA(multisigPDA, guardianId);\n  };\n\n  // Hàm chuyển đổi base64Url thành Buffer\n  const base64UrlToBuffer = (base64Url: string): ArrayBuffer => {\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const binaryString = window.atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  };\n  \n  return (\n    <div className=\"card w-full bg-base-100 shadow-xl\">\n      <div className=\"card-body\">\n        <h2 className=\"card-title\">Chuyển SOL</h2>\n        <div className=\"mt-4\">\n          <div className=\"mb-4\">\n            <div className=\"flex justify-between\">\n              <p>Số dư ví:</p>\n              <p className=\"font-medium\">{pdaBalance.toFixed(4)} SOL</p>\n            </div>\n          </div>\n          <form onSubmit={(e) => e.preventDefault()}>\n            <div className=\"form-control mb-4\">\n              <label className=\"label\">\n                <span className=\"label-text\">Địa chỉ người nhận</span>\n              </label>\n              <input\n                type=\"text\"\n                placeholder=\"Nhập địa chỉ Solana\"\n                className=\"input input-bordered\"\n                value={destinationAddress}\n                onChange={handleDestinationChange}\n                disabled={isTransferring}\n              />\n            </div>\n            <div className=\"form-control mb-4\">\n              <label className=\"label\">\n                <span className=\"label-text\">Số lượng SOL</span>\n              </label>\n              <input\n                type=\"text\"\n                placeholder=\"0.0\"\n                className=\"input input-bordered\"\n                value={amount}\n                onChange={handleAmountChange}\n                disabled={isTransferring}\n              />\n            </div>\n            <div className=\"form-control mb-4\">\n              <div className=\"flex flex-col md:flex-row gap-2\">\n                <button\n                  className=\"btn btn-primary flex-1\"\n                  onClick={handleSubmit}\n                  disabled={isTransferring || !amount || !destinationAddress || parseFloat(amount) <= 0}\n                >\n                  {isTransferring ? 'Đang xử lý...' : 'Chuyển SOL (Cách cũ)'}\n                </button>\n                <button\n                  className=\"btn btn-success flex-1\"\n                  onClick={handleTransferWithCorrectWebAuthnVerification}\n                  disabled={isTransferring || !amount || !destinationAddress || parseFloat(amount) <= 0}\n                >\n                  {isTransferring ? 'Đang xử lý...' : 'Chuyển SOL (Cách mới)'}\n                </button>\n              </div>\n            </div>\n            <div className=\"form-control\">\n              <button\n                className=\"btn btn-outline\"\n                onClick={handleVerifySignatureOnly}\n                disabled={isVerifying}\n              >\n                {isVerifying ? 'Đang xác thực...' : 'Chỉ kiểm tra chữ ký WebAuthn'}\n              </button>\n            </div>\n          </form>\n          \n          {error && (\n            <div className=\"alert alert-error mt-4\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" /></svg>\n              <span>{error}</span>\n            </div>\n          )}\n          \n          {success && (\n            <div className=\"alert alert-success mt-4\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"stroke-current shrink-0 h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" /></svg>\n              <span>{success}</span>\n            </div>\n          )}\n          \n          {renderStatusMessage()}\n          \n          {/* Thông tin transaction */}\n          {txId && (\n            <div className=\"mt-4\">\n              <p className=\"font-medium\">ID Giao dịch:</p>\n              <a \n                href={`https://explorer.solana.com/tx/${txId}?cluster=custom&customUrl=${encodeURIComponent('http://localhost:8899')}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"link link-primary break-all\"\n              >\n                {txId}\n              </a>\n            </div>\n          )}\n          \n          {/* Trạng thái xác thực chữ ký */}\n          {verificationStatus !== VerificationStatus.IDLE && (\n            <div className={`alert ${\n              verificationStatus === VerificationStatus.VERIFYING \n                ? 'alert-info' \n                : verificationStatus === VerificationStatus.SUCCESS \n                  ? 'alert-success' \n                  : 'alert-error'\n            } mt-4`}>\n              <span>{verificationMessage}</span>\n            </div>\n          )}\n          \n          {/* Hiển thị thông tin về giao dịch transfer */}\n          {transactionResult && (\n            <div className={`alert ${transactionResult.success ? 'alert-success' : 'alert-error'} mt-4`}>\n              <span>{transactionResult.message}</span>\n              {transactionResult.signature && (\n                <div>\n                  <a \n                    href={`https://explorer.solana.com/tx/${transactionResult.signature}?cluster=custom&customUrl=${encodeURIComponent('http://localhost:8899')}`}\n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"link link-primary text-sm\"\n                  >\n                    Xem giao dịch\n                  </a>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        {renderValidatorNote()}\n      </div>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}