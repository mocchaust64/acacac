{"ast":null,"code":"var _jsxFileName = \"/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Connection, PublicKey, Keypair, Transaction, SystemProgram, TransactionInstruction, LAMPORTS_PER_SOL, sendAndConfirmTransaction } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport './App.css';\nimport { createWebAuthnCredential, getWebAuthnAssertionForLogin, calculateMultisigAddress } from './utils/webauthnUtils';\nimport { processCredentialIdForPDA, getMultisigPDA, getGuardianPDA } from './utils/credentialUtils';\nimport { QRCodeSVG } from 'qrcode.react';\nimport { saveInvitation, getInvitation, getGuardianData, updateGuardianStatus, getPendingInvites, deleteGuardianData } from './firebase/guardianService';\nimport { getWalletByCredentialId } from './firebase/webAuthnService';\n// Thêm import TransferForm\nimport { TransferForm } from './components/TransferForm';\nimport BN from 'bn.js';\n\n// Lấy các biến môi trường hoặc sử dụng giá trị mặc định\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT || 'http://127.0.0.1:8899'; // Localhost validator\nconst PROGRAM_ID_STRING = process.env.REACT_APP_PROGRAM_ID || 'DeN1rBfabZezHPvrq9q7BbzUbZkrjnHE1kQDrPK8kWQ3'; // Program ID mới triển khai\n\n// Địa chỉ Program ID từ smart contract\nexport const PROGRAM_ID = new PublicKey(PROGRAM_ID_STRING);\n\n// Log biến môi trường để debug\nconsole.log(\"Biến môi trường RPC_ENDPOINT:\", process.env.REACT_APP_RPC_ENDPOINT);\nconsole.log(\"Biến môi trường PROGRAM_ID:\", process.env.REACT_APP_PROGRAM_ID);\nconsole.log(\"Biến môi trường FEE_PAYER_SECRET_KEY tồn tại:\", !!process.env.REACT_APP_FEE_PAYER_SECRET_KEY);\nif (process.env.REACT_APP_FEE_PAYER_SECRET_KEY) {\n  console.log(\"Độ dài FEE_PAYER_SECRET_KEY:\", process.env.REACT_APP_FEE_PAYER_SECRET_KEY.split(',').length);\n}\n\n// Tùy chọn kết nối\nconst connectionOptions = {\n  commitment: 'confirmed',\n  confirmTransactionInitialTimeout: 60000,\n  disableRetryOnRateLimit: false,\n  fetch: fetch\n};\n\n// Connection với validator\nconst connection = new Connection(RPC_ENDPOINT, connectionOptions);\n\n// Schema cho các struct của chương trình\nclass ActionParams {\n  constructor(props) {\n    this.amount = void 0;\n    this.destination = void 0;\n    this.tokenMint = void 0;\n    this.amount = props.amount;\n    this.destination = props.destination;\n    this.tokenMint = props.tokenMint;\n  }\n}\n\n// Ví tạm thời đã được tạo và nhận SOL trước đó\nconst TEMP_WALLET_PUBKEY = '9Q8iZnAvCQP3uaDTuYbrvYSRDWB7Kk19u4TS1MDRSStJ';\n\n// Hàm chuyển đổi Buffer sang Uint8Array\nfunction bufferToUint8Array(buffer) {\n  return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n\n// Hàm concat cho Uint8Array\nfunction concatUint8Arrays(...arrays) {\n  // Tính tổng độ dài\n  const totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);\n\n  // Tạo mảng mới với tổng độ dài\n  const result = new Uint8Array(totalLength);\n\n  // Copy dữ liệu vào mảng mới\n  let offset = 0;\n  for (const arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\n\n// Hàm chuyển đổi từ BigInt (u64) sang bytes theo thứ tự little-endian\nconst bigIntToLeBytes = (value, bytesLength = 8) => {\n  const result = new Uint8Array(bytesLength);\n  for (let i = 0; i < bytesLength; i++) {\n    result[i] = Number(value >> BigInt(8 * i) & BigInt(0xff));\n  }\n  return result;\n};\n\n// Helper function để tính toán MultisigPDA một cách nhất quán\nconst calculateMultisigPDA = async (programId, credentialId) => {\n  // Sử dụng hàm processCredentialIdForPDA từ helpers.ts để xử lý credential ID\n  // đảm bảo nhất quán với smart contract\n  const seedBuffer = processCredentialIdForPDA(credentialId);\n  return PublicKey.findProgramAddressSync([Buffer.from(\"multisig\"), seedBuffer], programId);\n};\n\n// Hàm nén khóa công khai từ dạng uncompressed (65 bytes) sang compressed (33 bytes)\nconst compressPublicKey = uncompressedKey => {\n  // Đảm bảo khóa bắt đầu với byte 0x04 (không nén)\n  if (uncompressedKey[0] !== 0x04 || uncompressedKey.length !== 65) {\n    console.warn('Khóa không đúng định dạng không nén ECDSA, tạo khóa ngẫu nhiên');\n    // Tạo khóa random nếu không đúng định dạng\n    const randomKey = Buffer.alloc(33);\n    randomKey[0] = 0x02; // compressed, y is even\n\n    // Tạo dữ liệu ngẫu nhiên cho 32 bytes còn lại\n    const randomBytes = new Uint8Array(32);\n    crypto.getRandomValues(randomBytes);\n\n    // Sao chép vào buffer\n    for (let i = 0; i < 32; i++) {\n      randomKey[i + 1] = randomBytes[i];\n    }\n    return randomKey;\n  }\n\n  // Lấy tọa độ x và y\n  const x = new Uint8Array(uncompressedKey.slice(1, 33));\n  const y = new Uint8Array(uncompressedKey.slice(33, 65));\n\n  // Tính prefix: 0x02 nếu y chẵn, 0x03 nếu y lẻ\n  const prefix = (y[31] & 1) === 0 ? 0x02 : 0x03;\n\n  // Tạo khóa nén: prefix (1 byte) + x (32 bytes)\n  const compressedKey = Buffer.alloc(33);\n  compressedKey[0] = prefix;\n\n  // Copy x vào compressedKey từ vị trí 1\n  for (let i = 0; i < 32; i++) {\n    compressedKey[i + 1] = x[i];\n  }\n  return compressedKey;\n};\n\n// Hàm hash recovery phrase tại frontend\nconst hashRecoveryPhrase = async phrase => {\n  // Chuyển recovery phrase thành bytes\n  const phraseBytes = new TextEncoder().encode(phrase);\n\n  // Tạo buffer 32 bytes để lưu dữ liệu\n  const inputBytes = new Uint8Array(32);\n\n  // Sao chép dữ liệu từ phrase, đảm bảo không vượt quá 32 bytes\n  inputBytes.set(phraseBytes.slice(0, Math.min(phraseBytes.length, 32)));\n\n  // Hash bằng SHA-256\n  const hashBuffer = await crypto.subtle.digest('SHA-256', inputBytes);\n\n  // Chuyển kết quả thành Uint8Array\n  return new Uint8Array(hashBuffer);\n};\n\n// Chuyển đổi secret key từ chuỗi trong .env thành mảng số\nconst convertSecretKeyStringToUint8Array = secretKeyString => {\n  if (!secretKeyString) {\n    throw new Error('Fee payer secret key không được định nghĩa trong biến môi trường');\n  }\n\n  // Chuyển đổi chuỗi \"1,2,3,...\" thành mảng số\n  const numbers = secretKeyString.split(',').map(s => parseInt(s.trim(), 10));\n\n  // Kiểm tra kích thước hợp lệ (64 bytes cho ed25519)\n  if (numbers.length !== 64 && numbers.length !== 65) {\n    throw new Error(`Secret key phải có 64 hoặc 65 bytes, nhưng có ${numbers.length} bytes`);\n  }\n\n  // Nếu có 65 bytes, bỏ qua byte cuối cùng (thường là checksum)\n  const bytes = numbers.length === 65 ? numbers.slice(0, 64) : numbers;\n  return new Uint8Array(bytes);\n};\n\n// Add this function near the top with other utility functions\nconst hashCredentialId = async credentialId => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(credentialId);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  return new Uint8Array(hashBuffer);\n};\nfunction App() {\n  _s();\n  const [walletKeypair, setWalletKeypair] = useState(null);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [multisigAddress, setMultisigAddress] = useState(null);\n  const [threshold, setThreshold] = useState(1);\n  const [guardianName, setGuardianName] = useState('Owner');\n  const [recoveryPhrase, setRecoveryPhrase] = useState('');\n  const [transactionStatus, setTransactionStatus] = useState('');\n  const [guardianPDA, setGuardianPDA] = useState(null);\n  const [isLoadingBalance, setIsLoadingBalance] = useState(false);\n  const [credentialId, setCredentialId] = useState('');\n  const [webauthnPubkey, setWebauthnPubkey] = useState('');\n  const [walletName, setWalletName] = useState('My Moon Wallet');\n  const [isUsingTempWallet, setIsUsingTempWallet] = useState(false);\n  // Thêm state cho new guardian\n  const [newGuardianName, setNewGuardianName] = useState('');\n  const [newRecoveryPhrase, setNewRecoveryPhrase] = useState('');\n  const [existingGuardians, setExistingGuardians] = useState([]); // Lưu các guardian ID đã tồn tại\n  const [showAddGuardianForm, setShowAddGuardianForm] = useState(false);\n  // Thêm state cho fee payer của dự án\n  const [projectFeePayerKeypair, setProjectFeePayerKeypair] = useState(null);\n  const [usingProjectFeePayer, setUsingProjectFeePayer] = useState(true);\n  const [feePayerBalance, setFeePayerBalance] = useState(0);\n  const [isLoadingFeePayerBalance, setIsLoadingFeePayerBalance] = useState(false);\n  // Thêm state cho số dư PDA\n  const [pdaBalance, setPdaBalance] = useState(0);\n  const [isLoadingPdaBalance, setIsLoadingPdaBalance] = useState(false);\n  // Thêm state cho việc chọn guardian ID\n  const [selectedGuardianId, setSelectedGuardianId] = useState(1);\n  // State cho form nạp tiền\n  const [depositAmount, setDepositAmount] = useState(0.1);\n  // State cho form rút tiền\n  const [withdrawAmount, setWithdrawAmount] = useState(0.05);\n  const [recipientAddress, setRecipientAddress] = useState('');\n  // State cho form đăng nhập ví\n  const [loginCredentialId, setLoginCredentialId] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [showLoginForm, setShowLoginForm] = useState(false);\n\n  // Thêm state cho chức năng tạo invitation\n  const [inviteLink, setInviteLink] = useState('');\n  const [inviteCode, setInviteCode] = useState('');\n  const [showQRCode, setShowQRCode] = useState(false);\n  const [showInviteInput, setShowInviteInput] = useState(false);\n  const [pendingInvites, setPendingInvites] = useState([]);\n\n  // Tạo keypair mới khi component được mount\n  useEffect(() => {\n    // Tạo keypair ngẫu nhiên mới cho user\n    const newKeypair = Keypair.generate();\n    setWalletKeypair(newKeypair);\n\n    // Tạo keypair cố định cho dự án để trả phí\n    // Trong môi trường thực tế, bạn có thể lấy keypair này từ server hoặc một nguồn an toàn\n    const projectPayerPrivateKey = convertSecretKeyStringToUint8Array(process.env.REACT_APP_FEE_PAYER_SECRET_KEY);\n\n    // Sử dụng keypair cố định cho fee payer\n    const feePayerKeypair = Keypair.fromSecretKey(projectPayerPrivateKey);\n    setProjectFeePayerKeypair(feePayerKeypair);\n\n    // Load balance cho fee payer\n    loadFeePayerBalance(feePayerKeypair);\n\n    // Không tính PDA ngay vì chưa có credential ID\n    // findMultisigAddress sẽ được gọi sau khi người dùng tạo WebAuthn credential\n  }, []);\n\n  // Thêm hàm để load balance của fee payer\n  const loadFeePayerBalance = async keypair => {\n    try {\n      const balance = await connection.getBalance(keypair.publicKey);\n      setFeePayerBalance(balance / LAMPORTS_PER_SOL);\n      setIsLoadingFeePayerBalance(false);\n    } catch (error) {\n      setFeePayerBalance(0);\n      setIsLoadingFeePayerBalance(false);\n    }\n  };\n\n  // Sử dụng ví tạm thời đã có SOL\n  const useTempWallet = async () => {\n    try {\n      setTransactionStatus('Đang tải ví tạm thời với SOL...');\n\n      // Sử dụng cùng secret key của fee payer\n      const tempWalletPrivateKey = convertSecretKeyStringToUint8Array(process.env.REACT_APP_FEE_PAYER_SECRET_KEY);\n\n      // Tạo Keypair từ private key\n      const keypair = Keypair.fromSecretKey(tempWalletPrivateKey);\n      setWalletKeypair(keypair);\n      setIsUsingTempWallet(true);\n\n      // Tính PDA mới dựa trên keypair mới\n      findMultisigAddress();\n\n      // Tải balance của ví tạm thời\n      await loadBalance(keypair);\n      setTransactionStatus(`Đã chuyển sang ví tạm thời: ${keypair.publicKey.toString()}. Ví này đã có sẵn SOL để giao dịch.`);\n    } catch (error) {\n      console.error('Lỗi khi tải ví tạm thời:', error);\n      setTransactionStatus(`Lỗi khi tải ví tạm thời: ${error.message}`);\n    }\n  };\n\n  // Tải balance với xử lý lỗi tốt hơn\n  const loadBalance = async keypair => {\n    const publicKey = (keypair === null || keypair === void 0 ? void 0 : keypair.publicKey) || (walletKeypair === null || walletKeypair === void 0 ? void 0 : walletKeypair.publicKey);\n    if (!publicKey) return;\n    setIsLoadingBalance(true);\n    try {\n      console.log(\"Đang tải balance cho địa chỉ:\", publicKey.toString());\n      const balance = await connection.getBalance(publicKey);\n      console.log(\"Balance đã tải thành công:\", balance / 1000000000);\n      setWalletBalance(balance / 1000000000); // Chuyển từ lamports sang SOL\n    } catch (error) {\n      console.error('Lỗi khi tải balance:', error);\n      // Không hiển thị lỗi cho người dùng, chỉ log ra console\n    } finally {\n      setIsLoadingBalance(false);\n    }\n  };\n\n  // Tạo ví với WebAuthn\n  const createWalletWithWebAuthn = async () => {\n    try {\n      // Kiểm tra xem người dùng đã nhập recovery phrase chưa\n      if (!recoveryPhrase || recoveryPhrase.trim().length < 8) {\n        setTransactionStatus('Vui lòng nhập recovery phrase (ít nhất 8 ký tự) trước khi tạo ví');\n        return;\n      }\n\n      // Kiểm tra xem có fee payer hay không\n      if (!projectFeePayerKeypair) {\n        setTransactionStatus('Không tìm thấy fee payer của dự án. Vui lòng thử lại sau.');\n        return;\n      }\n      setTransactionStatus('Đang tạo ví Moon Wallet...\\n\\nBước 1: Đang tạo khóa WebAuthn...');\n\n      // 1. Tạo khóa WebAuthn\n      const walletAddress = projectFeePayerKeypair.publicKey.toString(); // Sử dụng địa chỉ của fee payer\n      const result = await createWebAuthnCredential(walletAddress, walletName);\n\n      // Chuyển đổi rawId thành base64 để lưu trữ và sử dụng\n      const rawIdBase64 = Buffer.from(result.rawId).toString('base64');\n\n      // Lưu thông tin WebAuthn\n      setCredentialId(rawIdBase64); // Lưu base64 thay vì hex\n      setWebauthnPubkey(result.publicKey);\n      setTransactionStatus(prev => prev + `\\nĐã tạo khóa WebAuthn thành công!\\nCredential ID (base64): ${rawIdBase64.slice(0, 10)}...\\nPublic Key: ${result.publicKey.slice(0, 10)}...`);\n\n      // 2. Tính PDA cho Multisig\n      const multisigPDA = getMultisigPDA(rawIdBase64);\n      console.log(\"Multisig PDA:\", multisigPDA.toString());\n      setMultisigAddress(multisigPDA);\n      setTransactionStatus(prev => prev + `\\n\\nBước 2: Đang khởi tạo ví multisig tại địa chỉ: ${multisigPDA.toString()}...`);\n\n      // Kiểm tra xem multisig account đã tồn tại chưa\n      const existingAccount = await connection.getAccountInfo(multisigPDA);\n      if (existingAccount) {\n        setTransactionStatus(prev => prev + `\\n\\nLỖI: Ví multisig với credential ID này đã tồn tại. Điều này gần như không thể xảy ra vì credential ID luôn duy nhất.`);\n        return;\n      }\n\n      // 3. Tính PDA address cho guardian\n      // Tạo ID dạng u64 cho guardian\n      const guardianId = BigInt(1); // Owner có ID = 1\n\n      // Chuyển đổi guardianId sang bytes (little-endian)\n      const guardianIdBytes = bigIntToLeBytes(guardianId);\n      const [guardianPDAAddress] = PublicKey.findProgramAddressSync([Buffer.from(\"guardian\").subarray(0), multisigPDA.toBuffer(), guardianIdBytes], PROGRAM_ID);\n      setGuardianPDA(guardianPDAAddress);\n\n      // 4. Tạo transaction tích hợp để khởi tạo multisig và thêm guardian owner\n      const transaction = new Transaction();\n\n      // 4.1 Khởi tạo Multisig\n      // Đây là discriminator cho initialize_multisig (sử dụng giá trị chính xác từ Anchor IDL)\n      const initMultisigDiscriminator = new Uint8Array([220, 130, 117, 21, 27, 227, 78, 213]);\n      const thresholdBytes = new Uint8Array([threshold]);\n\n      // LƯU Ý QUAN TRỌNG: credential_id trong smart contract sử dụng as_bytes() trực tiếp, \n      // nên chúng ta phải gửi chính xác chuỗi rawIdBase64 như một chuỗi UTF-8\n      // không phải decode nó sang dạng binary\n      const credentialIdString = rawIdBase64;\n      const credentialIdBuffer = Buffer.from(credentialIdString);\n      console.log(\"Credential ID gửi đi (chuỗi gốc):\", credentialIdString);\n      const credentialIdLenBuffer = Buffer.alloc(4);\n      credentialIdLenBuffer.writeUInt32LE(credentialIdBuffer.length, 0);\n      const credentialIdLenBytes = bufferToUint8Array(credentialIdLenBuffer);\n      const credentialIdDataBytes = bufferToUint8Array(credentialIdBuffer);\n\n      // Tạo dữ liệu instruction theo đúng cấu trúc contract yêu cầu\n      const initData = concatUint8Arrays(initMultisigDiscriminator, thresholdBytes, credentialIdLenBytes, credentialIdDataBytes);\n\n      // Thêm instruction khởi tạo multisig vào transaction\n      transaction.add(new TransactionInstruction({\n        keys: [{\n          pubkey: multisigPDA,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: projectFeePayerKeypair.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: PROGRAM_ID,\n        data: Buffer.from(initData)\n      }));\n\n      // Sign và gửi transaction\n      transaction.feePayer = projectFeePayerKeypair.publicKey;\n      transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n      // Thông báo cho người dùng\n      setTransactionStatus(prev => prev + '\\nĐang gửi transaction để khởi tạo ví và thêm guardian owner...');\n\n      // Log dữ liệu transaction để debug\n      console.log(\"Transaction data:\", {\n        instructions: transaction.instructions.map((ix, index) => ({\n          programId: ix.programId.toString(),\n          keys: ix.keys.map(k => ({\n            pubkey: k.pubkey.toString(),\n            isSigner: k.isSigner,\n            isWritable: k.isWritable\n          })),\n          data: index === 1 ? {\n            discriminator: Array.from(initMultisigDiscriminator),\n            threshold: threshold,\n            credentialIdLength: credentialIdBuffer.length,\n            credentialId: Array.from(credentialIdBuffer),\n            isOwner: true,\n            hasWebauthn: true,\n            webauthnPubkeyLength: result.publicKey.length\n          } : \"initMultisig\"\n        }))\n      });\n      const signature = await connection.sendTransaction(transaction, [projectFeePayerKeypair]);\n      await connection.confirmTransaction(signature);\n      setTransactionStatus(prev => prev + `\\nVí multisig đã được khởi tạo thành công! Signature: ${signature}`);\n\n      // 5. Thêm guardian đầu tiên (owner)\n      setTransactionStatus(prev => prev + '\\n\\nBước 3: Đang thêm guardian owner đầu tiên...');\n      try {\n        // Tính PDA cho guardian\n        const guardianId = BigInt(1); // Owner có ID = 1\n        const guardianIdBytes = bigIntToLeBytes(guardianId);\n\n        // 5.1 Tính PDA cho multisig với credential_id\n        const guardianMultisigPDA = multisigPDA;\n        console.log(\"Sử dụng PDA cho guardian với multisig PDA:\", guardianMultisigPDA.toString());\n\n        // 5.2 Tính PDA cho guardian\n        const guardianPDA = getGuardianPDA(guardianMultisigPDA, 1); // Owner có ID = 1\n\n        setGuardianPDA(guardianPDA);\n\n        // Hash recovery phrase tại frontend\n        console.log(\"Recovery phrase gốc:\", recoveryPhrase);\n        const hashedRecoveryBytes = await hashRecoveryPhrase(recoveryPhrase);\n        console.log(\"Recovery phrase sau khi hash tại frontend:\", Buffer.from(hashedRecoveryBytes).toString('hex'));\n\n        // Tạo discriminator cho add_guardian\n        const addGuardianDiscriminator = new Uint8Array([167, 189, 170, 27, 74, 240, 201, 241]);\n\n        // Chuyển guardian ID thành bytes\n        const guardianIdBigIntBytes = bigIntToLeBytes(guardianId);\n\n        // Chuẩn bị tên guardian\n        const guardianNameBuffer = Buffer.from(guardianName || 'Owner');\n        const guardianNameLenBuffer = Buffer.alloc(4);\n        guardianNameLenBuffer.writeUInt32LE(guardianNameBuffer.length, 0);\n\n        // Chuẩn bị recovery hash - sử dụng giá trị đã hash\n        const recoveryHashIntermediateBytes = hashedRecoveryBytes;\n\n        // Chuẩn bị các tham số khác\n        const isOwnerByte = new Uint8Array([1]); // true = 1\n\n        // WebAuthn pubkey - nén khóa từ 65 bytes (uncompressed) thành 33 bytes (compressed)\n        // Smart contract yêu cầu webauthn_pubkey: Option<[u8; 33]>\n        const uncompressedKeyBuffer = Buffer.from(result.publicKey, 'hex');\n        console.log(\"WebAuthn key (uncompressed, 65 bytes):\", result.publicKey);\n\n        // Nén khóa thành 33 bytes\n        const compressedKeyBuffer = compressPublicKey(uncompressedKeyBuffer);\n        console.log(\"WebAuthn key (compressed, 33 bytes):\", compressedKeyBuffer.toString('hex'));\n\n        // Nối tất cả lại với nhau\n        const addGuardianData = concatUint8Arrays(addGuardianDiscriminator,\n        // guardian_id (u64)\n        bufferToUint8Array(Buffer.from(guardianIdBigIntBytes)),\n        // guardian_name (string)\n        bufferToUint8Array(guardianNameLenBuffer), bufferToUint8Array(guardianNameBuffer),\n        // recovery_hash_intermediate ([u8; 32])\n        recoveryHashIntermediateBytes,\n        // is_owner (bool)\n        isOwnerByte,\n        // webauthn_pubkey (Option<[u8; 33]>)\n        new Uint8Array([1]),\n        // Some variant\n        bufferToUint8Array(compressedKeyBuffer) // Sử dụng khóa đã được nén\n        );\n\n        // Tạo transaction add guardian\n        const addGuardianTransaction = new Transaction();\n        addGuardianTransaction.add(new TransactionInstruction({\n          keys: [{\n            pubkey: multisigPDA,\n            isSigner: false,\n            isWritable: true\n          }, {\n            pubkey: guardianPDA,\n            isSigner: false,\n            isWritable: true\n          }, {\n            pubkey: projectFeePayerKeypair.publicKey,\n            isSigner: false,\n            isWritable: false\n          }, {\n            pubkey: projectFeePayerKeypair.publicKey,\n            isSigner: true,\n            isWritable: true\n          }, {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false\n          }],\n          programId: PROGRAM_ID,\n          data: Buffer.from(addGuardianData)\n        }));\n\n        // Sign và gửi transaction\n        addGuardianTransaction.feePayer = projectFeePayerKeypair.publicKey;\n        addGuardianTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n        const addGuardianSignature = await connection.sendTransaction(addGuardianTransaction, [projectFeePayerKeypair]);\n        await connection.confirmTransaction(addGuardianSignature);\n        setTransactionStatus(prev => prev + `\\nGuardian owner đã được thêm thành công! Signature: ${addGuardianSignature}`);\n      } catch (error) {\n        console.error(\"Lỗi khi thêm guardian owner:\", error);\n        setTransactionStatus(prev => prev + `\\nLỗi khi thêm guardian owner: ${error.message}`);\n      }\n\n      // 6. Hoàn thành quá trình tạo ví\n      setTransactionStatus(prev => prev + '\\n\\n✅ VÍ MOON WALLET ĐÃ ĐƯỢC TẠO THÀNH CÔNG!\\n' + `Địa chỉ ví Multisig: ${multisigPDA.toString()}\\n` + `Recovery Phrase: ${recoveryPhrase}\\n` + 'Vui lòng lưu lại thông tin này để sử dụng sau này!');\n\n      // Kiểm tra số dư của ví PDA sau khi tạo\n      await loadPdaBalance(multisigPDA);\n    } catch (error) {\n      console.error('Lỗi trong quá trình tạo ví:', error);\n      setTransactionStatus(`Lỗi: ${error.message}`);\n    }\n  };\n\n  // Sửa lại hàm tính PDA cho multisig wallet\n  const findMultisigAddress = async () => {\n    // Sử dụng credential ID (nếu có) hoặc một giá trị tạm thời nếu chưa có\n    if (!credentialId) {\n      // Nếu chưa có credential ID, không thể tính PDA chính xác\n      setMultisigAddress(null);\n      return null;\n    }\n    try {\n      const [pda, bump] = await calculateMultisigAddress(PROGRAM_ID, credentialId);\n      setMultisigAddress(pda);\n      return pda;\n    } catch (error) {\n      setMultisigAddress(null);\n      return null;\n    }\n  };\n\n  // Tải balance với xử lý lỗi tốt hơn\n  const loadPdaBalance = async pdaAddress => {\n    try {\n      setIsLoadingPdaBalance(true);\n      const balance = await connection.getBalance(pdaAddress);\n      setPdaBalance(balance / LAMPORTS_PER_SOL);\n      setIsLoadingPdaBalance(false);\n    } catch (error) {\n      setPdaBalance(0);\n      setIsLoadingPdaBalance(false);\n    }\n  };\n\n  // Tính PDA address cho guardian\n  const findGuardianAddress = async (guardianId = 1) => {\n    if (!multisigAddress) return null;\n    try {\n      // Chuyển đổi guardianId sang bytes (little-endian)\n      const guardianIdBigInt = BigInt(guardianId);\n      const guardianIdBytes = bigIntToLeBytes(guardianIdBigInt);\n\n      // Tính PDA cho guardian trực tiếp từ multisigAddress\n      const [guardianPDA] = PublicKey.findProgramAddressSync([Buffer.from(\"guardian\"), multisigAddress.toBuffer(), guardianIdBytes], PROGRAM_ID);\n      console.log(`Tính PDA cho guardian ID ${guardianId} với multisig: ${multisigAddress.toString()}`);\n      console.log(`Guardian PDA: ${guardianPDA.toString()}`);\n      if (guardianId === 1) {\n        setGuardianPDA(guardianPDA); // Chỉ set state cho guardian chính (ID=1)\n      }\n      return guardianPDA;\n    } catch (error) {\n      console.error(`Lỗi khi tính PDA cho guardian ID ${guardianId}:`, error);\n      return null;\n    }\n  };\n\n  // Airdrop SOL cho testing\n  const requestAirdrop = async () => {\n    if (!projectFeePayerKeypair) {\n      setTransactionStatus('Không tìm thấy fee payer của dự án.');\n      return;\n    }\n    try {\n      setTransactionStatus('Đang yêu cầu airdrop cho fee payer của dự án...');\n      const signature = await connection.requestAirdrop(projectFeePayerKeypair.publicKey, 2000000000 // 2 SOL\n      );\n      await connection.confirmTransaction(signature);\n      // Tải lại số dư của fee payer\n      await loadFeePayerBalance(projectFeePayerKeypair);\n      setTransactionStatus('Airdrop thành công! 2 SOL đã được thêm vào ví fee payer của dự án.');\n    } catch (error) {\n      console.error('Lỗi khi thực hiện airdrop:', error);\n      setTransactionStatus(`Lỗi airdrop: ${error.message}. Đang thử phương thức chuyển tiền trực tiếp...`);\n\n      // Thử phương pháp khác nếu airdrop thất bại\n      fundFromValidator(projectFeePayerKeypair);\n    }\n  };\n\n  // Chuyển tiền từ validator wallet sang ví người dùng \n  const fundFromValidator = async keypair => {\n    try {\n      setTransactionStatus('Đang chuyển tiền từ validator vào fee payer...');\n\n      // Tạo kết nối với validator wallet (địa chỉ mặc định của validator)\n      const validatorKey = new PublicKey('E6mJJmCvg4PDhanmaBxxeyTczza9vKpMgirRUD6Qz5kv');\n\n      // Tạo transaction chuyển tiền\n      const transaction = new Transaction().add(SystemProgram.transfer({\n        fromPubkey: validatorKey,\n        toPubkey: keypair.publicKey,\n        lamports: 2000000000 // 2 SOL\n      }));\n\n      // Lấy các thông tin cần thiết cho transaction\n      transaction.feePayer = validatorKey;\n      transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n      // Không thể ký transaction vì không có private key của validator\n      // Thay vào đó, sử dụng phương thức sendTransactionWithRetry không cần chữ ký\n      const signature = await connection.sendTransaction(transaction, [] // Không cần signers khi gửi đến validator local\n      );\n      await connection.confirmTransaction(signature);\n\n      // Tải lại số dư\n      if (keypair === projectFeePayerKeypair) {\n        await loadFeePayerBalance(keypair);\n        setTransactionStatus('Chuyển tiền thành công! 2 SOL đã được thêm vào ví fee payer của dự án.');\n      } else {\n        await loadBalance(keypair);\n        setTransactionStatus('Chuyển tiền thành công! 2 SOL đã được thêm vào ví.');\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền từ validator:', error);\n      setTransactionStatus(`Lỗi khi chuyển tiền: ${error.message}. Hãy thử khởi động lại validator.`);\n    }\n  };\n\n  // Xem thông tin wallet\n  const getWalletInfo = async () => {\n    if (!multisigAddress) return;\n    try {\n      setTransactionStatus('Đang truy vấn thông tin ví...');\n\n      // Load balance trước\n      await loadPdaBalance(multisigAddress);\n      const multisigAccount = await connection.getAccountInfo(multisigAddress);\n      if (!multisigAccount) {\n        setTransactionStatus('Ví chưa được khởi tạo');\n        return;\n      }\n\n      // Bỏ qua 8 byte discriminator\n      const data = multisigAccount.data.slice(8);\n\n      // Parse dữ liệu dựa trên struct MultiSigWallet mới\n      // MultiSigWallet: threshold, guardian_count, recovery_nonce, bump, transaction_nonce, last_transaction_timestamp\n      const threshold = data[0];\n      const guardian_count = data[1];\n      const recovery_nonce = new DataView(data.buffer, data.byteOffset + 2, 8).getBigUint64(0, true);\n      const bump = data[10];\n      const transaction_nonce = new DataView(data.buffer, data.byteOffset + 11, 8).getBigUint64(0, true);\n      const last_transaction_timestamp = new DataView(data.buffer, data.byteOffset + 19, 8).getBigInt64(0, true);\n\n      // Hiển thị thông tin\n      setTransactionStatus(`Thông tin ví:\\n` + `- Threshold: ${threshold}\\n` + `- Guardian Count: ${guardian_count}\\n` + `- Recovery Nonce: ${recovery_nonce}\\n` + `- Bump: ${bump}\\n` + `- Transaction Nonce: ${transaction_nonce}\\n` + `- Last Transaction Timestamp: ${last_transaction_timestamp}`);\n    } catch (error) {\n      console.error('Lỗi khi truy vấn thông tin ví:', error);\n      setTransactionStatus(`Lỗi: ${error.message}`);\n    }\n  };\n\n  // Xem thông tin guardian\n  const getGuardianInfo = async () => {\n    try {\n      // Reset UI state\n      setGuardianInfo(null);\n      setTransactionStatus('');\n      if (!multisigAddress) {\n        setTransactionStatus('Cần có địa chỉ ví multisig để kiểm tra guardian');\n        return;\n      }\n      if (!selectedGuardianId) {\n        setTransactionStatus('Vui lòng chọn Guardian ID');\n        return;\n      }\n\n      // Tính PDA cho guardian\n      const guardianPDA = await findGuardianAddress(selectedGuardianId);\n      if (!guardianPDA) {\n        setTransactionStatus(`Không thể tính PDA cho guardian với ID: ${selectedGuardianId}`);\n        return;\n      }\n\n      // Kiểm tra account tồn tại\n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      if (!guardianAccount) {\n        setTransactionStatus(`Không tìm thấy thông tin account tại địa chỉ: ${guardianPDA.toString()}`);\n        return;\n      }\n      setTransactionStatus(`Đã tìm thấy thông tin guardian với ID ${selectedGuardianId}.`);\n\n      // Skip 8 bytes đầu tiên (discriminator)\n      const data = guardianAccount.data.slice(8);\n\n      // Parse wallet (Pubkey) - 32 bytes\n      let currentOffset = 0;\n      const wallet = new PublicKey(data.slice(currentOffset, currentOffset + 32));\n      currentOffset += 32;\n\n      // Parse guardian_id (u64) - 8 bytes\n      const guardianIdBytes = data.slice(currentOffset, currentOffset + 8);\n      currentOffset += 8;\n      const guardianId = new BN(guardianIdBytes, 'le').toNumber();\n\n      // Parse name (String) - 4 bytes cho length + data\n      const nameLength = data.readUInt32LE(currentOffset);\n      currentOffset += 4;\n      if (nameLength > 0 && currentOffset + nameLength <= data.length) {\n        const nameBytes = data.slice(currentOffset, currentOffset + nameLength);\n        const name = new TextDecoder().decode(nameBytes);\n        currentOffset += nameLength;\n\n        // Parse is_active (bool) - 1 byte\n        const isActive = data[currentOffset] === 1;\n        currentOffset += 1;\n\n        // Parse recovery_hash ([u8; 32]) - 32 bytes\n        const recoveryHash = data.slice(currentOffset, currentOffset + 32);\n        const recoveryHashHex = Buffer.from(recoveryHash).toString('hex');\n        currentOffset += 32;\n\n        // Parse is_owner (bool) - 1 byte\n        const isOwner = data[currentOffset] === 1;\n        currentOffset += 1;\n\n        // Parse webauthn_pubkey (Option<[u8; 33]>) - 1 byte + optionally 33 bytes\n        const hasWebauthn = data[currentOffset] === 1;\n        currentOffset += 1;\n        let webauthnPubkey = null;\n        if (hasWebauthn) {\n          webauthnPubkey = data.slice(currentOffset, currentOffset + 33);\n          const webauthnHex = Buffer.from(webauthnPubkey).toString('hex');\n          currentOffset += 33;\n        }\n\n        // Parse bump (u8) - 1 byte\n        const bump = data[currentOffset];\n\n        // Tạo object guardian info để hiển thị\n        const guardianInfoObj = {\n          pda: guardianPDA.toString(),\n          wallet: wallet.toString(),\n          guardianId,\n          name,\n          isActive,\n          recoveryHash: recoveryHashHex,\n          isOwner,\n          webauthnPubkey: webauthnPubkey ? Buffer.from(webauthnPubkey).toString('hex') : null,\n          bump\n        };\n        setGuardianInfo(guardianInfoObj);\n      } else {\n        setTransactionStatus('Không thể parse dữ liệu guardian. Dữ liệu không đúng định dạng.');\n      }\n    } catch (error) {\n      setTransactionStatus(`Lỗi khi lấy thông tin guardian: ${error.message}`);\n    }\n  };\n\n  // Hàm để lấy danh sách guardian ID hiện có\n  const getExistingGuardianIds = async () => {\n    if (!multisigAddress) return [];\n    try {\n      setTransactionStatus('Đang kiểm tra danh sách Guardian ID...');\n      const guardianIds = [];\n\n      // Kiểm tra guardian từ ID 1 đến 8\n      for (let i = 1; i <= 8; i++) {\n        try {\n          // Tính PDA cho guardian với ID i sử dụng hàm đã sửa\n          const guardianPDA = await findGuardianAddress(i);\n          if (!guardianPDA) {\n            console.log(`Guardian ID ${i}: Không tính được PDA`);\n            continue;\n          }\n\n          // Kiểm tra xem guardian với ID này có tồn tại không\n          console.log(`Đang kiểm tra Guardian ID ${i} tại địa chỉ: ${guardianPDA.toString()}`);\n          const guardianAccount = await connection.getAccountInfo(guardianPDA);\n          if (guardianAccount) {\n            guardianIds.push(i);\n            console.log(`Guardian ID ${i} đã tồn tại - PDA: ${guardianPDA.toString()}`);\n            console.log(`  - Owner: ${guardianAccount.owner.toString()}`);\n            console.log(`  - Data size: ${guardianAccount.data.length} bytes`);\n\n            // Kiểm tra discriminator (8 bytes đầu)\n            const discriminator = guardianAccount.data.slice(0, 8);\n            console.log(`  - Discriminator: ${Buffer.from(discriminator).toString('hex')}`);\n          } else {\n            console.log(`Guardian ID ${i}: Account không tồn tại tại địa chỉ ${guardianPDA.toString()}`);\n          }\n        } catch (error) {\n          console.error(`Lỗi khi kiểm tra guardian ID ${i}:`, error);\n        }\n      }\n      console.log(\"Danh sách guardian ID hiện tại:\", guardianIds);\n\n      // Nếu không có guardian nào, thêm ID 1 vào danh sách để có thể chọn\n      if (guardianIds.length === 0) {\n        guardianIds.push(1);\n        console.log(\"Không tìm thấy guardian nào, thêm ID 1 mặc định vào danh sách\");\n      }\n      setExistingGuardians(guardianIds);\n\n      // Đảm bảo selectedGuardianId nằm trong danh sách các ID hiện có\n      if (!guardianIds.includes(selectedGuardianId)) {\n        console.log(`Selected Guardian ID ${selectedGuardianId} không tồn tại, chuyển sang ID ${guardianIds[0]}`);\n        setSelectedGuardianId(guardianIds[0]);\n      }\n      setTransactionStatus(`Đã tìm thấy ${guardianIds.length} guardian. IDs: ${guardianIds.join(', ')}`);\n      return guardianIds;\n    } catch (error) {\n      console.error(\"Lỗi khi lấy danh sách guardian:\", error);\n      return [];\n    }\n  };\n\n  // Hàm sinh guardian ID mới không bị trùng\n  const generateNewGuardianId = existingIds => {\n    // Nếu không có ID nào tồn tại, bắt đầu từ 2 (vì ID 1 thường là owner)\n    if (existingIds.length === 0) return 2;\n\n    // Tìm ID nhỏ nhất không bị trùng\n    let newId = 1;\n    while (existingIds.includes(newId)) {\n      newId++;\n    }\n    return newId;\n  };\n\n  // Hàm thêm guardian mới với chữ ký WebAuthn riêng\n  const addNewGuardian = async () => {\n    try {\n      // Kiểm tra xem ví đã được tạo chưa\n      if (!multisigAddress) {\n        setTransactionStatus('Vui lòng tạo ví trước khi thêm guardian.');\n        return;\n      }\n\n      // Kiểm tra xem có fee payer hay không\n      if (!projectFeePayerKeypair) {\n        setTransactionStatus('Không tìm thấy fee payer của dự án. Vui lòng thử lại sau.');\n        return;\n      }\n\n      // Kiểm tra các trường bắt buộc\n      if (!newGuardianName || !newRecoveryPhrase || newRecoveryPhrase.length < 8) {\n        setTransactionStatus('Vui lòng nhập tên guardian và recovery phrase (ít nhất 8 ký tự).');\n        return;\n      }\n      setTransactionStatus('Đang thêm guardian mới...\\n\\nBước 1: Tạo khóa WebAuthn cho guardian mới...');\n\n      // Lấy danh sách guardian ID hiện tại\n      const existingIds = await getExistingGuardianIds();\n\n      // Sinh guardian ID mới không bị trùng\n      const newGuardianId = generateNewGuardianId(existingIds);\n      console.log(\"=== ADD GUARDIAN === Guardian ID mới được sinh:\", newGuardianId);\n\n      // 1. Tạo khóa WebAuthn cho guardian mới\n      try {\n        // Sử dụng một định danh duy nhất cho khóa mới\n        const guardianIdentifier = `${multisigAddress === null || multisigAddress === void 0 ? void 0 : multisigAddress.toString()}_guardian_${newGuardianId}`;\n        const webAuthnResult = await createWebAuthnCredential(guardianIdentifier, newGuardianName);\n\n        // Log thông tin WebAuthn\n        console.log(\"=== ADD GUARDIAN === WebAuthn credential mới đã được tạo:\");\n        console.log(\"=== ADD GUARDIAN === Credential ID:\", webAuthnResult.credentialId);\n        console.log(\"=== ADD GUARDIAN === Public Key:\", webAuthnResult.publicKey);\n        setTransactionStatus(prev => prev + `\\nĐã tạo khóa WebAuthn thành công!`);\n\n        // 2. Tính PDA cho guardian mới\n        const guardianPDA = await findGuardianAddress(newGuardianId);\n        if (!guardianPDA) {\n          setTransactionStatus('Không thể tính PDA cho guardian mới.');\n          return;\n        }\n        console.log(\"=== ADD GUARDIAN === Guardian PDA mới:\", guardianPDA.toString());\n\n        // Kiểm tra trước xem guardian account đã tồn tại chưa\n        const existingGuardian = await connection.getAccountInfo(guardianPDA);\n        if (existingGuardian) {\n          console.log(\"=== ADD GUARDIAN === Guardian account đã tồn tại!\", existingGuardian);\n          setTransactionStatus(`Guardian với ID=${newGuardianId} đã tồn tại rồi. Hãy chọn ID khác.`);\n          return;\n        }\n\n        // 3. Hash recovery phrase\n        const hashedRecoveryBytes = await hashRecoveryPhrase(newRecoveryPhrase);\n        console.log(\"=== ADD GUARDIAN === Recovery phrase sau khi hash:\", Buffer.from(hashedRecoveryBytes).toString('hex'));\n\n        // 4. Chuyển đổi guardian ID thành bytes (little-endian)\n        const guardianIdBigInt = BigInt(newGuardianId);\n        const guardianIdBytes = bigIntToLeBytes(guardianIdBigInt);\n\n        // 5. Nén khóa WebAuthn từ 65 bytes (uncompressed) thành 33 bytes (compressed)\n        const uncompressedKeyBuffer = Buffer.from(webAuthnResult.publicKey, 'hex');\n        console.log(\"=== ADD GUARDIAN === WebAuthn key (uncompressed, 65 bytes):\", webAuthnResult.publicKey);\n\n        // Nén khóa thành 33 bytes\n        const compressedKeyBuffer = compressPublicKey(uncompressedKeyBuffer);\n        console.log(\"=== ADD GUARDIAN === WebAuthn key (compressed, 33 bytes):\", compressedKeyBuffer.toString('hex'));\n\n        // 6. Tạo discriminator cho add_guardian\n        const addGuardianDiscriminator = new Uint8Array([167, 189, 170, 27, 74, 240, 201, 241]);\n\n        // 7. Chuẩn bị tên guardian\n        const guardianNameBuffer = Buffer.from(newGuardianName);\n        const guardianNameLenBuffer = Buffer.alloc(4);\n        guardianNameLenBuffer.writeUInt32LE(guardianNameBuffer.length, 0);\n\n        // 8. Đặt is_owner = false vì đây là guardian member, không phải owner\n        const isOwnerByte = new Uint8Array([0]); // false = 0\n\n        // 9. Cấu hình webauthn_pubkey là Some(compressed_key)\n        const hasWebauthn = new Uint8Array([1]); // Some variant\n\n        // 10. Tạo dữ liệu instruction\n        const addGuardianData = concatUint8Arrays(addGuardianDiscriminator,\n        // guardian_id (u64)\n        bufferToUint8Array(Buffer.from(guardianIdBytes)),\n        // guardian_name (string)\n        bufferToUint8Array(guardianNameLenBuffer), bufferToUint8Array(guardianNameBuffer),\n        // recovery_hash_intermediate ([u8; 32])\n        hashedRecoveryBytes,\n        // is_owner (bool)\n        isOwnerByte,\n        // webauthn_pubkey (Option<[u8; 33]>) - Some variant + compressed key\n        hasWebauthn, bufferToUint8Array(compressedKeyBuffer));\n\n        // Log dữ liệu instruction để debug\n        console.log(\"=== ADD GUARDIAN === Dữ liệu instruction:\", {\n          discriminator: Buffer.from(addGuardianDiscriminator).toString('hex'),\n          guardianId: newGuardianId.toString(),\n          guardianIdBytes: Buffer.from(guardianIdBytes).toString('hex'),\n          nameLength: guardianNameBuffer.length,\n          name: newGuardianName,\n          recoveryHashHex: Buffer.from(hashedRecoveryBytes).toString('hex'),\n          isOwner: false,\n          hasWebauthn: true,\n          webauthnPubkey: compressedKeyBuffer.toString('hex')\n        });\n        setTransactionStatus(prev => prev + `\\n\\nBước 2: Đang thêm guardian vào blockchain...`);\n\n        // 11. Tạo transaction add guardian\n        const addGuardianTransaction = new Transaction();\n        addGuardianTransaction.add(new TransactionInstruction({\n          keys: [{\n            pubkey: multisigAddress,\n            isSigner: false,\n            isWritable: true\n          }, {\n            pubkey: guardianPDA,\n            isSigner: false,\n            isWritable: true\n          }, {\n            pubkey: projectFeePayerKeypair.publicKey,\n            isSigner: false,\n            isWritable: false\n          }, {\n            pubkey: projectFeePayerKeypair.publicKey,\n            isSigner: true,\n            isWritable: true\n          }, {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false\n          }],\n          programId: PROGRAM_ID,\n          data: Buffer.from(addGuardianData)\n        }));\n\n        // Sign và gửi transaction với fee payer của dự án\n        addGuardianTransaction.feePayer = projectFeePayerKeypair.publicKey;\n        addGuardianTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n        console.log(\"=== ADD GUARDIAN === Đang gửi transaction...\");\n        const addGuardianSignature = await connection.sendTransaction(addGuardianTransaction, [projectFeePayerKeypair]);\n        console.log(\"=== ADD GUARDIAN === Transaction đã gửi. Signature:\", addGuardianSignature);\n        setTransactionStatus(prev => prev + `\\nĐang xác nhận transaction thêm guardian...`);\n        await connection.confirmTransaction(addGuardianSignature);\n        setTransactionStatus(`Guardian mới đã được thêm thành công với ID: ${newGuardianId}!\\n` + `Chữ ký WebAuthn đã được lưu cho guardian này.\\n` + `Signature: ${addGuardianSignature}`);\n\n        // Kiểm tra xem guardian đã được thêm thành công chưa\n        console.log(\"=== ADD GUARDIAN === Đang kiểm tra guardian vừa thêm...\");\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Đợi 2 giây\n\n        const newGuardianAccount = await connection.getAccountInfo(guardianPDA);\n        if (newGuardianAccount) {\n          console.log(\"=== ADD GUARDIAN === Guardian đã được thêm thành công!\");\n          console.log(`=== ADD GUARDIAN === Data size: ${newGuardianAccount.data.length} bytes`);\n\n          // Kiểm tra discriminator\n          const discriminator = newGuardianAccount.data.slice(0, 8);\n          console.log(`=== ADD GUARDIAN === Discriminator: ${Buffer.from(discriminator).toString('hex')}`);\n        } else {\n          console.log(\"=== ADD GUARDIAN === Guardian không được tìm thấy sau khi thêm!\");\n          setTransactionStatus(prev => prev + '\\n\\nCẢNH BÁO: Guardian có vẻ như chưa được khởi tạo trên blockchain mặc dù transaction đã thành công!');\n        }\n\n        // Cập nhật danh sách guardian\n        await getExistingGuardianIds();\n\n        // Cập nhật số dư của ví PDA\n        await loadPdaBalance(multisigAddress);\n\n        // Reset form\n        setNewGuardianName('');\n        setNewRecoveryPhrase('');\n      } catch (webAuthnError) {\n        console.error(\"=== ADD GUARDIAN === Lỗi khi tạo khóa WebAuthn:\", webAuthnError);\n        setTransactionStatus(`Lỗi khi tạo khóa WebAuthn: ${webAuthnError.message || 'Không xác định'}. Vui lòng thử lại.`);\n        return;\n      }\n    } catch (error) {\n      console.error(\"=== ADD GUARDIAN === Lỗi khi thêm guardian mới:\", error);\n      setTransactionStatus(`Lỗi khi thêm guardian mới: ${error.message}`);\n    }\n  };\n\n  // Hàm để nạp SOL vào ví multisig\n  const depositToMultisig = async () => {\n    try {\n      // Kiểm tra xem ví đã được tạo chưa\n      if (!multisigAddress) {\n        setTransactionStatus('Vui lòng tạo ví trước khi nạp tiền.');\n        return;\n      }\n\n      // Kiểm tra xem có fee payer hay không\n      if (!projectFeePayerKeypair) {\n        setTransactionStatus('Không tìm thấy fee payer của dự án. Vui lòng thử lại sau.');\n        return;\n      }\n\n      // Kiểm tra số tiền hợp lệ\n      if (!depositAmount || depositAmount <= 0) {\n        setTransactionStatus('Vui lòng nhập số tiền hợp lệ để nạp.');\n        return;\n      }\n\n      // Kiểm tra số dư của fee payer\n      const feePayerBalance = await connection.getBalance(projectFeePayerKeypair.publicKey);\n      const lamportsToSend = depositAmount * LAMPORTS_PER_SOL;\n      if (feePayerBalance < lamportsToSend + 5000) {\n        // 5000 lamports cho phí giao dịch\n        setTransactionStatus(`Số dư fee payer không đủ. Hiện tại: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n        return;\n      }\n      setTransactionStatus(`Đang nạp ${depositAmount} SOL vào ví...`);\n\n      // Tạo transaction chuyển tiền\n      const transaction = new Transaction().add(SystemProgram.transfer({\n        fromPubkey: projectFeePayerKeypair.publicKey,\n        toPubkey: multisigAddress,\n        lamports: lamportsToSend\n      }));\n\n      // Cấu hình transaction\n      transaction.feePayer = projectFeePayerKeypair.publicKey;\n      transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n      // Ký và gửi transaction\n      const signature = await connection.sendTransaction(transaction, [projectFeePayerKeypair]);\n      await connection.confirmTransaction(signature);\n\n      // Cập nhật số dư\n      await loadPdaBalance(multisigAddress);\n      await loadFeePayerBalance(projectFeePayerKeypair);\n      setTransactionStatus(`Đã nạp thành công ${depositAmount} SOL vào ví! Signature: ${signature}`);\n    } catch (error) {\n      console.error('Lỗi khi nạp tiền vào ví:', error);\n      setTransactionStatus(`Lỗi khi nạp tiền: ${error.message}`);\n    }\n  };\n\n  // Hàm để rút tiền từ ví multisig\n  const withdrawFromMultisig = async () => {\n    try {\n      // Kiểm tra xem ví đã được tạo chưa\n      if (!multisigAddress) {\n        setTransactionStatus('Vui lòng tạo ví trước khi rút tiền.');\n        return;\n      }\n\n      // Kiểm tra xem có fee payer hay không\n      if (!projectFeePayerKeypair) {\n        setTransactionStatus('Không tìm thấy fee payer của dự án. Vui lòng thử lại sau.');\n        return;\n      }\n\n      // Kiểm tra các trường bắt buộc\n      if (!recipientAddress || !withdrawAmount || withdrawAmount <= 0) {\n        setTransactionStatus('Vui lòng nhập địa chỉ người nhận và số tiền hợp lệ.');\n        return;\n      }\n      let recipient;\n      try {\n        recipient = new PublicKey(recipientAddress);\n      } catch (error) {\n        setTransactionStatus('Địa chỉ người nhận không hợp lệ.');\n        return;\n      }\n\n      // Kiểm tra số dư của ví multisig\n      const multisigBalance = await connection.getBalance(multisigAddress);\n      const lamportsToSend = withdrawAmount * LAMPORTS_PER_SOL;\n      if (multisigBalance < lamportsToSend) {\n        setTransactionStatus(`Số dư ví không đủ. Hiện tại: ${multisigBalance / LAMPORTS_PER_SOL} SOL`);\n        return;\n      }\n      setTransactionStatus(`Đang rút ${withdrawAmount} SOL từ ví...`);\n\n      // Tạo discriminator cho withdraw\n      const withdrawDiscriminator = new Uint8Array([54, 27, 38, 179, 114, 92, 92, 82]);\n\n      // Số tiền rút (u64)\n      const amountBigInt = BigInt(Math.floor(withdrawAmount * LAMPORTS_PER_SOL));\n      const amountBytes = bigIntToLeBytes(amountBigInt);\n\n      // Tạo dữ liệu instruction\n      const withdrawData = concatUint8Arrays(withdrawDiscriminator,\n      // amount (u64)\n      bufferToUint8Array(Buffer.from(amountBytes)));\n\n      // Tạo transaction rút tiền\n      const withdrawTransaction = new Transaction();\n      withdrawTransaction.add(new TransactionInstruction({\n        keys: [{\n          pubkey: multisigAddress,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: recipient,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: projectFeePayerKeypair.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: PROGRAM_ID,\n        data: Buffer.from(withdrawData)\n      }));\n\n      // Sign và gửi transaction\n      withdrawTransaction.feePayer = projectFeePayerKeypair.publicKey;\n      withdrawTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n      const withdrawSignature = await connection.sendTransaction(withdrawTransaction, [projectFeePayerKeypair]);\n      await connection.confirmTransaction(withdrawSignature);\n\n      // Cập nhật số dư\n      await loadPdaBalance(multisigAddress);\n      setTransactionStatus(`Đã rút thành công ${withdrawAmount} SOL từ ví! Signature: ${withdrawSignature}`);\n\n      // Reset form\n      setWithdrawAmount(0.05);\n      setRecipientAddress('');\n    } catch (error) {\n      console.error('Lỗi khi rút tiền từ ví:', error);\n      setTransactionStatus(`Lỗi khi rút tiền: ${error.message}`);\n    }\n  };\n\n  // Tự động cập nhật danh sách guardians khi multisigAddress thay đổi\n  useEffect(() => {\n    if (multisigAddress) {\n      // Load lại danh sách guardian IDs\n      getExistingGuardianIds();\n\n      // Load số dư của PDA\n      loadPdaBalance(multisigAddress);\n    }\n  }, [multisigAddress]);\n\n  // Hàm để kiểm tra guardian ID cụ thể\n  const testGuardianInfo = async id => {\n    if (!multisigAddress) {\n      setTransactionStatus('Ví chưa được khởi tạo');\n      return;\n    }\n    setTransactionStatus(`Đang kiểm tra chi tiết Guardian ID ${id}...`);\n    try {\n      // Tính PDA \n      const guardianPDA = await findGuardianAddress(id);\n      if (!guardianPDA) {\n        setTransactionStatus(`Không thể tính PDA cho Guardian ID ${id}`);\n        return;\n      }\n      console.log(`=== TEST === Đang kiểm tra chi tiết Guardian ID ${id} tại ${guardianPDA.toString()}`);\n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      if (!guardianAccount) {\n        console.log(`=== TEST === Account không tồn tại tại địa chỉ ${guardianPDA.toString()}`);\n        setTransactionStatus(`Guardian ID ${id} không tồn tại trên blockchain`);\n        return;\n      }\n      console.log(`=== TEST === Account tồn tại!`);\n      console.log(`=== TEST === Owner: ${guardianAccount.owner.toString()}`);\n      console.log(`=== TEST === Data size: ${guardianAccount.data.length} bytes`);\n\n      // Kiểm tra discriminator\n      const discriminator = guardianAccount.data.slice(0, 8);\n      console.log(`=== TEST === Discriminator: ${Buffer.from(discriminator).toString('hex')}`);\n\n      // Bỏ qua 8 byte discriminator\n      const data = guardianAccount.data.slice(8);\n      try {\n        // Wallet (32 bytes)\n        const walletBytes = data.slice(0, 32);\n        const wallet = new PublicKey(walletBytes);\n        console.log(`=== TEST === Wallet: ${wallet.toString()}`);\n\n        // Guardian ID (8 bytes)\n        const guardianIdBytes = data.slice(32, 40);\n        let guardianId = BigInt(0);\n        for (let i = 0; i < 8; i++) {\n          guardianId |= BigInt(guardianIdBytes[i]) << BigInt(8 * i);\n        }\n        console.log(`=== TEST === Guardian ID parsed: ${guardianId}`);\n\n        // Name\n        const nameLength = new DataView(data.buffer, data.byteOffset + 40, 4).getUint32(0, true);\n        console.log(`=== TEST === Name length: ${nameLength}`);\n\n        // Nếu name length hợp lệ, tiếp tục parse\n        if (nameLength <= 100) {\n          const nameBytes = data.slice(44, 44 + nameLength);\n          const name = new TextDecoder().decode(nameBytes);\n          console.log(`=== TEST === Name: ${name}`);\n          setTransactionStatus(`Guardian ID ${id} tồn tại!\\n- PDA: ${guardianPDA.toString()}\\n- Wallet: ${wallet.toString()}\\n- Name: ${name}\\n- Guardian ID: ${guardianId}`);\n        } else {\n          console.log(`=== TEST === Name length không hợp lệ`);\n          setTransactionStatus(`Guardian ID ${id} tồn tại nhưng có cấu trúc dữ liệu không hợp lệ`);\n        }\n      } catch (parseError) {\n        console.error(`=== TEST === Lỗi khi parse dữ liệu:`, parseError);\n        setTransactionStatus(`Guardian ID ${id} tồn tại nhưng không thể parse dữ liệu: ${parseError}`);\n      }\n    } catch (error) {\n      console.error(`=== TEST === Lỗi:`, error);\n      setTransactionStatus(`Lỗi khi kiểm tra: ${error.message}`);\n    }\n  };\n\n  // Hàm đăng nhập vào ví đã tạo\n  const loginToWallet = async () => {\n    try {\n      setIsLoggingIn(true);\n      setTransactionStatus('Đang đăng nhập vào ví...\\n\\nBước 1: Đang yêu cầu xác thực WebAuthn...');\n\n      // 1. Yêu cầu người dùng xác thực với thiết bị (không cần nhập credential ID cụ thể)\n      try {\n        // Gọi hàm getWebAuthnAssertionForLogin với allowEmpty=true để cho phép người dùng chọn từ bất kỳ credential nào\n        const assertionResult = await getWebAuthnAssertionForLogin('', true);\n        if (!assertionResult.success || !assertionResult.rawId) {\n          throw new Error(assertionResult.error || 'Không thể xác thực với thiết bị');\n        }\n\n        // Lấy thông tin credential từ phản hồi\n        const credentialRawData = assertionResult.rawId;\n\n        // Chuyển rawId thành hex để sử dụng làm key trong bảng webauthn_credentials\n        const credentialIdHex = Buffer.from(credentialRawData).toString('hex');\n        console.log(\"Credential ID (hex):\", credentialIdHex);\n\n        // Chuyển rawId thành base64 để sử dụng trong blockchain\n        const rawIdBase64 = Buffer.from(credentialRawData).toString('base64');\n        console.log(\"Raw credential ID (base64):\", rawIdBase64);\n        setTransactionStatus(prev => prev + '\\nXác thực WebAuthn thành công!\\n\\nBước 2: Đang tìm thông tin ví...');\n\n        // 2. Truy vấn thông tin ví từ bảng webauthn_credentials\n        const credentialMapping = await getWalletByCredentialId(credentialIdHex);\n        if (credentialMapping) {\n          // Nếu tìm thấy trong bảng ánh xạ\n          setTransactionStatus(prev => prev + `\\nĐã tìm thấy thông tin ví trong database!`);\n\n          // Chuyển đổi từ chuỗi sang PublicKey\n          const walletAddressFromDB = new PublicKey(credentialMapping.walletAddress);\n          console.log(\"Wallet address from database:\", walletAddressFromDB.toString());\n\n          // 3. Kiểm tra xem ví có tồn tại trên blockchain không\n          const walletAccount = await connection.getAccountInfo(walletAddressFromDB);\n          if (!walletAccount) {\n            setTransactionStatus(`Ví tìm thấy trong database không tồn tại trên blockchain. Địa chỉ: ${walletAddressFromDB.toString()}`);\n            setIsLoggingIn(false);\n            return;\n          }\n\n          // 4. Cập nhật state với thông tin ví\n          setMultisigAddress(walletAddressFromDB);\n          setCredentialId(rawIdBase64); // Lưu credential ID gốc\n\n          setTransactionStatus(prev => prev + `\\nĐã tìm thấy ví tại địa chỉ: ${walletAddressFromDB.toString()}\\n\\nBước 3: Đang tải thông tin ví...`);\n        } else {\n          // Nếu không tìm thấy trong bảng ánh xạ, sử dụng phương pháp tính toán cũ\n          setTransactionStatus(prev => prev + '\\nKhông tìm thấy thông tin trong database, đang tính toán địa chỉ ví...');\n\n          // Tính địa chỉ ví từ credential ID\n          const multisigPDA = getMultisigPDA(rawIdBase64);\n          console.log(\"Computed Multisig PDA:\", multisigPDA.toString());\n\n          // Kiểm tra xem ví có tồn tại không\n          const walletAccount = await connection.getAccountInfo(multisigPDA);\n          if (!walletAccount) {\n            setTransactionStatus(`Không tìm thấy ví với credential này. Có thể bạn cần tạo ví mới.`);\n            setIsLoggingIn(false);\n            return;\n          }\n          setTransactionStatus(prev => prev + `\\nĐã tìm thấy ví tại địa chỉ: ${multisigPDA.toString()}\\n\\nBước 3: Đang tải thông tin ví...`);\n\n          // Cập nhật state với thông tin ví\n          setMultisigAddress(multisigPDA);\n          setCredentialId(rawIdBase64); // Lưu credential ID gốc\n        }\n\n        // 5. Tìm guardian PDA\n        await findGuardianAddress(1); // Tìm guardian chính (owner)\n\n        // 6. Tải số dư và danh sách guardian\n        await loadPdaBalance(multisigAddress);\n        await getExistingGuardianIds();\n\n        // 7. Hoàn thành đăng nhập\n        setIsLoggedIn(true);\n        setIsLoggingIn(false);\n        setTransactionStatus(`Đăng nhập thành công!\\n\\nĐịa chỉ ví: ${multisigAddress.toString()}\\nSố guardian: ${existingGuardians.length}`);\n\n        // 8. Ẩn form đăng nhập\n        setShowLoginForm(false);\n      } catch (webAuthnError) {\n        console.error(\"Lỗi khi xác thực WebAuthn:\", webAuthnError);\n        setTransactionStatus(`Lỗi khi xác thực: ${webAuthnError.message}`);\n        setIsLoggingIn(false);\n      }\n    } catch (error) {\n      console.error('Lỗi khi đăng nhập:', error);\n      setTransactionStatus(`Lỗi khi đăng nhập: ${error.message}`);\n      setIsLoggingIn(false);\n    }\n  };\n\n  // Hàm tạo mã mời ngẫu nhiên\n  const generateRandomCode = length => {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n  };\n\n  // Hàm tạo link mời guardian mới\n  const generateGuardianInvite = async () => {\n    try {\n      // Kiểm tra ví đã được tạo chưa\n      if (!multisigAddress) {\n        setTransactionStatus('Vui lòng tạo ví trước khi mời guardian.');\n        return;\n      }\n\n      // Lấy danh sách guardian ID hiện tại\n      const existingIds = await getExistingGuardianIds();\n\n      // Sinh guardian ID mới không bị trùng\n      const newGuardianId = generateNewGuardianId(existingIds);\n\n      // Tạo mã ngẫu nhiên cho link mời\n      const inviteCode = generateRandomCode(8);\n\n      // Tạo link mời với URL ngrok từ biến môi trường hoặc sử dụng địa chỉ hiện tại\n      const ngrokUrl = process.env.REACT_APP_NGROK_URL || window.location.origin;\n      const inviteLink = `${ngrokUrl}/#/guardian-signup/${inviteCode}`;\n\n      // Hiển thị link (đặt state trước khi lưu vào Firebase)\n      setInviteCode(inviteCode);\n      setInviteLink(inviteLink);\n      setShowQRCode(true);\n\n      // Lưu thông tin vào Firebase\n      try {\n        await saveInvitation({\n          multisigAddress: multisigAddress.toString(),\n          guardianId: newGuardianId,\n          inviteCode,\n          status: 'pending',\n          ownerId: (projectFeePayerKeypair === null || projectFeePayerKeypair === void 0 ? void 0 : projectFeePayerKeypair.publicKey.toString()) || ''\n        });\n      } catch (error) {\n        console.error(\"Lỗi khi lưu vào Firebase:\", error);\n        // Hiển thị lỗi nhưng vẫn tiếp tục hiển thị link mời\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        setTransactionStatus(`Đã tạo link mời guardian: ${inviteLink}\\nLưu ý: Có lỗi khi lưu thông tin: ${errorMessage}`);\n        return inviteLink;\n      }\n      setTransactionStatus(`Đã tạo link mời guardian: ${inviteLink}`);\n      return inviteLink;\n    } catch (error) {\n      console.error(\"Lỗi khi tạo link mời guardian:\", error);\n      setTransactionStatus(`Lỗi khi tạo link mời guardian: ${error.message}`);\n      return null;\n    }\n  };\n\n  // Tải danh sách mã mời đang chờ\n  const loadPendingInvites = async () => {\n    try {\n      if (!projectFeePayerKeypair || !multisigAddress) return;\n      const ownerId = projectFeePayerKeypair.publicKey.toString();\n      // Chỉ lọc guardian của chính ví multisig hiện tại\n      const multisigAddressStr = multisigAddress.toString();\n      const invitesList = await getPendingInvites(ownerId, multisigAddressStr);\n      setPendingInvites(invitesList);\n      if (invitesList.length > 0) {\n        console.log(`Tìm thấy ${invitesList.length} guardian đang chờ hoàn tất cho ví ${multisigAddressStr}. Mã mời: ${invitesList.join(', ')}`);\n      }\n    } catch (error) {\n      console.error(\"Lỗi khi tải danh sách mã mời:\", error);\n    }\n  };\n\n  // Load danh sách mã mời khi component được mount và mỗi khi projectFeePayerKeypair hoặc multisigAddress thay đổi\n  useEffect(() => {\n    if (projectFeePayerKeypair && multisigAddress) {\n      loadPendingInvites();\n    }\n  }, [projectFeePayerKeypair, multisigAddress]);\n\n  // Hàm để lấy thông tin guardian đã đăng ký\n  const fetchGuardianDataFromDatabase = async inviteCode => {\n    try {\n      return await getGuardianData(inviteCode);\n    } catch (error) {\n      console.error(\"Lỗi khi lấy dữ liệu guardian:\", error);\n      return null;\n    }\n  };\n\n  // Hàm để lấy thông tin invitation\n  const fetchInviteFromDatabase = async inviteCode => {\n    try {\n      return await getInvitation(inviteCode);\n    } catch (error) {\n      console.error(\"Lỗi khi lấy dữ liệu invite:\", error);\n      return null;\n    }\n  };\n\n  // Hàm để cập nhật trạng thái guardian\n  const updateGuardianStatusInDatabase = async (inviteCode, status, txSignature) => {\n    try {\n      await updateGuardianStatus(inviteCode, status, txSignature);\n    } catch (error) {\n      console.error(\"Lỗi khi cập nhật trạng thái guardian:\", error);\n    }\n  };\n\n  // Hàm hoàn tất đăng ký guardian từ dữ liệu đã lưu\n  const completeGuardianRegistration = async inviteCode => {\n    try {\n      setTransactionStatus('Đang hoàn tất đăng ký guardian...');\n\n      // 1. Lấy dữ liệu guardian từ localStorage\n      const guardianData = await fetchGuardianDataFromDatabase(inviteCode);\n      if (!guardianData) {\n        setTransactionStatus('Không tìm thấy dữ liệu guardian. Vui lòng đảm bảo guardian đã hoàn tất đăng ký.');\n        return;\n      }\n      if (guardianData.status !== 'ready') {\n        setTransactionStatus('Guardian chưa hoàn tất đăng ký.');\n        return;\n      }\n\n      // 2. Lấy thông tin invite\n      const inviteData = await fetchInviteFromDatabase(inviteCode);\n      if (!inviteData) {\n        setTransactionStatus('Không tìm thấy thông tin mời guardian.');\n        return;\n      }\n\n      // 3. Tính PDA cho guardian\n      const multisigPDA = new PublicKey(inviteData.multisigAddress);\n      const guardianId = inviteData.guardianId;\n      const guardianPDA = await findGuardianAddress(guardianId);\n      if (!guardianPDA) {\n        setTransactionStatus('Không thể tính PDA cho guardian.');\n        return;\n      }\n\n      // 4. Chuyển đổi dữ liệu thành format phù hợp\n      const hashedRecoveryBytes = new Uint8Array(guardianData.hashedRecoveryBytes);\n      const compressedKeyBuffer = Buffer.from(guardianData.webauthnPublicKey);\n\n      // 5. Tạo discriminator cho add_guardian\n      const addGuardianDiscriminator = new Uint8Array([167, 189, 170, 27, 74, 240, 201, 241]);\n\n      // 6. Chuyển đổi guardian ID thành bytes (little-endian)\n      const guardianIdBigInt = BigInt(guardianId);\n      const guardianIdBytes = bigIntToLeBytes(guardianIdBigInt);\n\n      // 7. Chuẩn bị tên guardian\n      const guardianNameBuffer = Buffer.from(guardianData.guardianName);\n      const guardianNameLenBuffer = Buffer.alloc(4);\n      guardianNameLenBuffer.writeUInt32LE(guardianNameBuffer.length, 0);\n\n      // 8. Đặt is_owner = false vì đây là guardian member, không phải owner\n      const isOwnerByte = new Uint8Array([0]); // false = 0\n\n      // 9. Cấu hình webauthn_pubkey là Some(compressed_key)\n      const hasWebauthn = new Uint8Array([1]); // Some variant\n\n      // 10. Tạo dữ liệu instruction\n      const addGuardianData = concatUint8Arrays(addGuardianDiscriminator,\n      // guardian_id (u64)\n      bufferToUint8Array(Buffer.from(guardianIdBytes)),\n      // guardian_name (string)\n      bufferToUint8Array(guardianNameLenBuffer), bufferToUint8Array(guardianNameBuffer),\n      // recovery_hash_intermediate ([u8; 32])\n      hashedRecoveryBytes,\n      // is_owner (bool)\n      isOwnerByte,\n      // webauthn_pubkey (Option<[u8; 33]>) - Some variant + compressed key\n      hasWebauthn, bufferToUint8Array(Buffer.from(compressedKeyBuffer)));\n\n      // 11. Tạo transaction add guardian\n      const addGuardianTransaction = new Transaction();\n      addGuardianTransaction.add(new TransactionInstruction({\n        keys: [{\n          pubkey: multisigPDA,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: guardianPDA,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: projectFeePayerKeypair.publicKey,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: projectFeePayerKeypair.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: PROGRAM_ID,\n        data: Buffer.from(addGuardianData)\n      }));\n\n      // Sign và gửi transaction với fee payer của dự án\n      addGuardianTransaction.feePayer = projectFeePayerKeypair.publicKey;\n      addGuardianTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n      setTransactionStatus(prev => prev + '\\nĐang gửi transaction...');\n      const addGuardianSignature = await connection.sendTransaction(addGuardianTransaction, [projectFeePayerKeypair]);\n      setTransactionStatus(prev => prev + '\\nĐang xác nhận transaction...');\n      await connection.confirmTransaction(addGuardianSignature);\n\n      // Cập nhật trạng thái trong DB\n      await updateGuardianStatusInDatabase(inviteCode, 'completed', addGuardianSignature);\n      setTransactionStatus(`Guardian đã được thêm thành công với ID: ${guardianId}!\\n` + `Signature: ${addGuardianSignature}`);\n\n      // Xóa dữ liệu guardian từ database sau khi hoàn tất\n      setTransactionStatus(prev => prev + '\\n\\nĐang xóa dữ liệu guardian từ database...');\n      console.log(`Bắt đầu xóa dữ liệu guardian với mã mời: ${inviteCode}`);\n      const deleteResult = await deleteGuardianData(inviteCode);\n      if (deleteResult) {\n        console.log(`✅ ĐÃ XÓA THÀNH CÔNG dữ liệu guardian, invitation và lookup với mã mời: ${inviteCode}`);\n\n        // Cập nhật thông báo thành công rõ ràng hơn\n        setTransactionStatus(`✅ HOÀN TẤT THÀNH CÔNG!\n        \n        Guardian \"${guardianData.guardianName}\" (ID: ${guardianData.guardianId}) đã được thêm thành công vào ví.\n        \n        Địa chỉ Guardian: ${guardianPDA.toString()}\n        Signature: ${addGuardianSignature}\n        \n        ✅ Dữ liệu đã được xóa khỏi database để bảo vệ quyền riêng tư.\n        \n        ✅ Guardian hiện đã sẵn sàng sử dụng và đã được ẩn khỏi danh sách chờ.`);\n\n        // Bỏ mã mời đã sử dụng khỏi danh sách\n        setPendingInvites(prev => prev.filter(code => code !== inviteCode));\n\n        // Không đóng form để người dùng có thể tiếp tục thêm guardian khác\n        /* \n        if (pendingInvites.length <= 1) {\n          setShowInviteInput(false);\n        }\n        */\n      } else {\n        console.error(`❌ KHÔNG THỂ XÓA dữ liệu guardian với mã mời: ${inviteCode}`);\n        setTransactionStatus(prev => prev + '\\n❌ Không thể xóa dữ liệu guardian từ database.');\n      }\n\n      // Cập nhật danh sách guardian và load lại danh sách mã mời\n      await getExistingGuardianIds();\n      await loadPendingInvites();\n\n      // Cập nhật số dư của ví PDA\n      await loadPdaBalance(multisigPDA);\n    } catch (error) {\n      console.error(\"Lỗi khi hoàn tất đăng ký guardian:\", error);\n      setTransactionStatus(`Lỗi khi hoàn tất đăng ký guardian: ${error.message}`);\n    }\n  };\n\n  // Hàm kiểm tra thông tin guardians trong database\n  const checkGuardiansInDatabase = async () => {\n    try {\n      setTransactionStatus('Đang kiểm tra dữ liệu guardians từ Firestore...');\n      if (!projectFeePayerKeypair || !multisigAddress) {\n        setTransactionStatus('Cần có thông tin fee payer và multisig address để kiểm tra.');\n        return;\n      }\n      const ownerId = projectFeePayerKeypair.publicKey.toString();\n      const multisigAddressStr = multisigAddress.toString();\n\n      // Lấy danh sách invitations đang chờ CHỈ của ví hiện tại\n      const pendingInvites = await getPendingInvites(ownerId, multisigAddressStr);\n      console.log(`Danh sách mã mời đang chờ cho ví ${multisigAddressStr}:`, pendingInvites);\n      if (pendingInvites.length === 0) {\n        setTransactionStatus(`Không tìm thấy mã mời nào đang chờ xử lý cho ví ${multisigAddressStr}.`);\n        return;\n      }\n\n      // Kiểm tra thông tin từng guardian\n      let resultMessage = 'Thông tin guardians từ database:\\n\\n';\n      for (const inviteCode of pendingInvites) {\n        // Lấy thông tin invitation\n        const inviteData = await getInvitation(inviteCode);\n        if (!inviteData) {\n          resultMessage += `Mã mời ${inviteCode}: Không tìm thấy thông tin invitation.\\n`;\n          continue;\n        }\n\n        // Lấy thông tin guardian\n        const guardianData = await getGuardianData(inviteCode);\n        if (!guardianData) {\n          resultMessage += `Mã mời ${inviteCode}: Invitation tồn tại nhưng chưa có thông tin guardian.\\n`;\n          continue;\n        }\n\n        // Hiển thị thông tin\n        resultMessage += `Mã mời: ${inviteCode}\\n`;\n        resultMessage += `Guardian ID: ${guardianData.guardianId}\\n`;\n        resultMessage += `Tên guardian: ${guardianData.guardianName}\\n`;\n        resultMessage += `Trạng thái: ${guardianData.status}\\n`;\n        resultMessage += `WebAuthn ID: ${guardianData.webauthnCredentialId.substring(0, 20)}...\\n\\n`;\n      }\n      setTransactionStatus(resultMessage);\n    } catch (error) {\n      console.error(\"Lỗi khi kiểm tra thông tin guardians:\", error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      setTransactionStatus(`Lỗi khi kiểm tra thông tin guardians: ${errorMessage}`);\n    }\n  };\n\n  // Hoàn tất quá trình đăng ký guardian dựa trên mã mời\n  const completeGuardianSetup = async inviteCode => {\n    try {\n      setTransactionStatus(`Đang hoàn tất quá trình đăng ký guardian với mã mời: ${inviteCode}...`);\n\n      // 1. Lấy thông tin guardian\n      const guardianData = await getGuardianData(inviteCode);\n      if (!guardianData) {\n        setTransactionStatus('Không tìm thấy thông tin guardian. Vui lòng đảm bảo guardian đã hoàn tất đăng ký.');\n        return;\n      }\n      if (guardianData.status !== 'ready') {\n        setTransactionStatus(`Guardian có trạng thái không hợp lệ: ${guardianData.status}`);\n        return;\n      }\n\n      // 2. Thêm guardian vào blockchain\n      setTransactionStatus(prev => prev + '\\n\\nĐang thêm guardian vào blockchain...');\n\n      // Tạo multisig PDA từ địa chỉ multisig\n      const multisigPubkey = new PublicKey(guardianData.multisigAddress);\n\n      // Tạo WebAuthn public key từ dữ liệu lưu trữ\n      const webauthnPubkey = Buffer.from(new Uint8Array(guardianData.webauthnPublicKey));\n\n      // Chuẩn bị dữ liệu guardian\n      const guardianIndex = guardianData.guardianId;\n      const guardianName = guardianData.guardianName;\n      const guardianType = 0; // 0 = Guardian thường\n      const recoveryHash = Uint8Array.from(guardianData.hashedRecoveryBytes);\n\n      // Thêm guardian vào blockchain\n      if (projectFeePayerKeypair) {\n        // Tạo transaction\n        const tx = new Transaction();\n\n        // Tìm PDA cho guardian\n        const guardianIdBigInt = BigInt(guardianIndex);\n        const guardianIdBytes = bigIntToLeBytes(guardianIdBigInt);\n        const [guardianPDA] = await PublicKey.findProgramAddress([Buffer.from(\"guardian\"), multisigPubkey.toBuffer(), guardianIdBytes], PROGRAM_ID);\n\n        // Tạo instruction để thêm guardian\n        // Sử dụng discriminator đúng cho add_guardian theo IDL\n        const addGuardianDiscriminator = new Uint8Array([167, 189, 170, 27, 74, 240, 201, 241]);\n\n        // Chuẩn bị tên guardian\n        const guardianNameBuffer = Buffer.from(guardianName);\n        const guardianNameLenBuffer = Buffer.alloc(4);\n        guardianNameLenBuffer.writeUInt32LE(guardianNameBuffer.length, 0);\n\n        // Đặt is_owner = false vì đây là guardian member, không phải owner\n        const isOwnerByte = new Uint8Array([0]); // false = 0\n\n        // Cấu hình webauthn_pubkey là Some(webauthnPubkey)\n        const hasWebauthn = new Uint8Array([1]); // Some variant\n\n        // Tạo dữ liệu instruction\n        const instructionData = concatUint8Arrays(addGuardianDiscriminator, guardianIdBytes, bufferToUint8Array(guardianNameLenBuffer), bufferToUint8Array(guardianNameBuffer), recoveryHash, isOwnerByte, hasWebauthn, bufferToUint8Array(webauthnPubkey));\n        const addGuardianIx = new TransactionInstruction({\n          keys: [{\n            pubkey: multisigPubkey,\n            isSigner: false,\n            isWritable: true\n          }, {\n            pubkey: guardianPDA,\n            isSigner: false,\n            isWritable: true\n          }, {\n            pubkey: projectFeePayerKeypair.publicKey,\n            isSigner: false,\n            isWritable: false\n          }, {\n            pubkey: projectFeePayerKeypair.publicKey,\n            isSigner: true,\n            isWritable: true\n          }, {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false\n          }],\n          programId: PROGRAM_ID,\n          data: Buffer.from(instructionData)\n        });\n        tx.add(addGuardianIx);\n\n        // Gửi transaction\n        setTransactionStatus(prev => prev + '\\nĐang gửi transaction...');\n        const signature = await sendAndConfirmTransaction(connection, tx, [projectFeePayerKeypair], {\n          commitment: 'confirmed',\n          skipPreflight: true\n        });\n\n        // Xác nhận transaction đã thành công\n        setTransactionStatus(prev => prev + '\\nĐang xác nhận transaction...');\n        await connection.confirmTransaction(signature, 'confirmed');\n\n        // Cập nhật trạng thái guardian\n        await updateGuardianStatus(inviteCode, 'completed', signature);\n\n        // Thông báo kết quả\n        setTransactionStatus(`Guardian đã được thêm thành công vào blockchain!\n- Tên: ${guardianData.guardianName}\n- ID: ${guardianData.guardianId}\n- Địa chỉ: ${guardianPDA.toString()}\n- Signature: ${signature}\n\nGuardian đã sẵn sàng để sử dụng trong ví multisig của bạn.`);\n\n        // Xóa dữ liệu guardian từ database sau khi hoàn tất\n        setTransactionStatus(prev => prev + '\\n\\nĐang xóa dữ liệu guardian từ database...');\n        console.log(`Bắt đầu xóa dữ liệu guardian với mã mời: ${inviteCode}`);\n        const deleteResult = await deleteGuardianData(inviteCode);\n        if (deleteResult) {\n          console.log(`✅ ĐÃ XÓA THÀNH CÔNG dữ liệu guardian, invitation và lookup với mã mời: ${inviteCode}`);\n\n          // Cập nhật thông báo thành công rõ ràng hơn\n          setTransactionStatus(`✅ HOÀN TẤT THÀNH CÔNG!\n          \n          Guardian \"${guardianData.guardianName}\" (ID: ${guardianData.guardianId}) đã được thêm thành công vào ví.\n          \n          Địa chỉ Guardian: ${guardianPDA.toString()}\n          Signature: ${signature}\n          \n          ✅ Dữ liệu đã được xóa khỏi database để bảo vệ quyền riêng tư.\n          \n          ✅ Guardian hiện đã sẵn sàng sử dụng và đã được ẩn khỏi danh sách chờ.`);\n\n          // Bỏ mã mời đã sử dụng khỏi danh sách\n          setPendingInvites(prev => prev.filter(code => code !== inviteCode));\n\n          // Không đóng form sau khi hoàn tất để người dùng có thể tiếp tục thêm guardian khác\n          /* \n          if (pendingInvites.length <= 1) {\n            setShowInviteInput(false);\n          }\n          */\n        } else {\n          console.error(`❌ KHÔNG THỂ XÓA dữ liệu guardian với mã mời: ${inviteCode}`);\n          setTransactionStatus(prev => prev + '\\n❌ Không thể xóa dữ liệu guardian từ database.');\n        }\n\n        // Làm mới danh sách guardian và cập nhật UI\n        await getExistingGuardianIds();\n        await loadPendingInvites();\n\n        // Cập nhật số dư của ví\n        if (multisigAddress) {\n          await loadPdaBalance(multisigAddress);\n        }\n      } else {\n        setTransactionStatus('Lỗi: Fee payer không khả dụng');\n      }\n    } catch (error) {\n      console.error(\"Lỗi khi hoàn tất quá trình đăng ký guardian:\", error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      setTransactionStatus(`Lỗi khi hoàn tất quá trình đăng ký guardian: ${errorMessage}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-blue-600 text-white p-4 mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold\",\n        children: \"Moon Wallet - Qu\\u1EA3n l\\xFD V\\xED \\u0110a Ch\\u1EEF K\\xFD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1992,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1991,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto p-4 flex flex-col\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-white rounded shadow\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-bold mb-4\",\n            children: \"Qu\\u1EA3n l\\xFD V\\xED\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1997,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: recoveryPhrase,\n              onChange: e => setRecoveryPhrase(e.target.value),\n              placeholder: \"Recovery Phrase (t\\u1ED1i thi\\u1EC3u 8 k\\xFD t\\u1EF1)\",\n              className: \"w-full p-2 border rounded mb-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2001,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex space-x-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: createWalletWithWebAuthn,\n                className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n                children: \"T\\u1EA1o V\\xED\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2009,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: loginToWallet,\n                className: \"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\",\n                children: \"\\u0110\\u0103ng Nh\\u1EADp\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2015,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: checkGuardiansInDatabase,\n                className: \"bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600\",\n                children: \"Ki\\u1EC3m Tra Guardians\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2021,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2008,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2000,\n            columnNumber: 13\n          }, this), !multisigAddress && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"login-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"V\\xED Moon Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2033,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wallet-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: loginToWallet,\n                className: \"btn btn-primary\",\n                disabled: isLoggingIn,\n                children: isLoggingIn ? 'Đang đăng nhập...' : 'Đăng nhập bằng WebAuthn'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2036,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  setShowLoginForm(false);\n                },\n                className: \"btn btn-success\",\n                children: \"T\\u1EA1o v\\xED m\\u1EDBi\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2044,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2035,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2032,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connection-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Th\\xF4ng tin k\\u1EBFt n\\u1ED1i\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2055,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u0110ang k\\u1EBFt n\\u1ED1i t\\u1EDBi: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: RPC_ENDPOINT\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2056,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2056,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Program ID: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: PROGRAM_ID_STRING\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2057,\n                columnNumber: 30\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2057,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Fee Payer: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: projectFeePayerKeypair ? projectFeePayerKeypair.publicKey.toString() : 'Chưa khởi tạo'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2058,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2058,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"S\\u1ED1 d\\u01B0 Fee Payer: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: isLoadingFeePayerBalance ? 'Đang tải...' : `${feePayerBalance} SOL`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2059,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2059,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-row\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: requestAirdrop,\n                disabled: isLoadingFeePayerBalance,\n                children: \"Airdrop 2 SOL cho Fee Payer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2061,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2060,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-text\",\n              children: \"Fee payer c\\u1EE7a d\\u1EF1 \\xE1n c\\u1EA7n c\\xF3 SOL \\u0111\\u1EC3 tr\\u1EA3 ph\\xED giao d\\u1ECBch. N\\u1EBFu s\\u1ED1 d\\u01B0 = 0, vui l\\xF2ng Airdrop tr\\u01B0\\u1EDBc khi t\\u1EA1o v\\xED ho\\u1EB7c th\\xEAm guardian.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2068,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2054,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wallet-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Th\\xF4ng tin v\\xED Moon Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2074,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Multisig PDA: \", multisigAddress ? multisigAddress.toString() : 'Chưa tạo ví']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2075,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"S\\u1ED1 d\\u01B0 V\\xED: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: isLoadingPdaBalance ? 'Đang tải...' : `${pdaBalance} SOL`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2076,\n                columnNumber: 28\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2076,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Guardian PDA: \", guardianPDA ? guardianPDA.toString() : 'Chưa có guardian']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2077,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: getWalletInfo,\n                children: \"Xem th\\xF4ng tin v\\xED\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2079,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"guardian-selection\",\n                children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                  value: selectedGuardianId,\n                  onChange: e => setSelectedGuardianId(parseInt(e.target.value)),\n                  style: {\n                    margin: '0 10px',\n                    padding: '8px'\n                  },\n                  children: existingGuardians.map(id => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: id,\n                    children: [\"Guardian ID \", id]\n                  }, id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2087,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2081,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: getGuardianInfo,\n                  disabled: !multisigAddress || existingGuardians.length === 0,\n                  children: \"Xem th\\xF4ng tin guardian\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2090,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2080,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  if (multisigAddress) {\n                    loadPdaBalance(multisigAddress);\n                    getExistingGuardianIds();\n                  }\n                },\n                disabled: isLoadingPdaBalance || !multisigAddress,\n                children: \"C\\u1EADp nh\\u1EADt d\\u1EEF li\\u1EC7u\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2097,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2078,\n              columnNumber: 15\n            }, this), multisigAddress && credentialId && selectedGuardianId && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"transfer-section mt-4\",\n              children: /*#__PURE__*/_jsxDEV(TransferForm, {\n                walletAddress: multisigAddress.toString(),\n                credentialId: credentialId,\n                guardianId: selectedGuardianId,\n                onTransferSuccess: () => {\n                  // Cập nhật số dư sau khi chuyển tiền thành công\n                  if (multisigAddress) {\n                    loadPdaBalance(multisigAddress);\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2113,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2112,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2073,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-wallet-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"T\\u1EA1o v\\xED Moon Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"info-text\",\n              children: \"D\\u1EF1 \\xE1n s\\u1EBD tr\\u1EA3 ph\\xED giao d\\u1ECBch t\\u1EA1o v\\xED. B\\u1EA1n kh\\xF4ng c\\u1EA7n c\\xF3 SOL.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"T\\xEAn v\\xED: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2134,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: walletName,\n                onChange: e => setWalletName(e.target.value),\n                maxLength: 32,\n                placeholder: \"Nh\\u1EADp t\\xEAn cho v\\xED c\\u1EE7a b\\u1EA1n\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2135,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [\"Recovery Key: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"required\",\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2145,\n                  columnNumber: 38\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2145,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: recoveryPhrase,\n                onChange: e => setRecoveryPhrase(e.target.value),\n                placeholder: \"Nh\\u1EADp recovery key (\\xEDt nh\\u1EA5t 8 k\\xFD t\\u1EF1)\",\n                style: {\n                  width: '300px'\n                },\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2146,\n                columnNumber: 17\n              }, this), recoveryPhrase && recoveryPhrase.length < 8 && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"error-message\",\n                children: \"Recovery key ph\\u1EA3i c\\xF3 \\xEDt nh\\u1EA5t 8 k\\xFD t\\u1EF1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2155,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Threshold: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2160,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                min: \"1\",\n                max: \"8\",\n                value: threshold,\n                onChange: e => setThreshold(parseInt(e.target.value))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2161,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"T\\xEAn Guardian: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2171,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: guardianName,\n                onChange: e => setGuardianName(e.target.value),\n                maxLength: 32,\n                placeholder: \"T\\xEAn cho guardian \\u0111\\u1EA7u ti\\xEAn (m\\u1EB7c \\u0111\\u1ECBnh: Owner)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2172,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2170,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: createWalletWithWebAuthn,\n              disabled: isLoadingBalance || !recoveryPhrase || recoveryPhrase.length < 8,\n              className: \"create-wallet-button\",\n              children: \"T\\u1EA1o v\\xED Moon Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2181,\n              columnNumber: 15\n            }, this), credentialId && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"credential-info\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Credential ID: \", credentialId.slice(0, 10), \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2191,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2190,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2128,\n            columnNumber: 13\n          }, this), multisigAddress && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"add-guardian-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Qu\\u1EA3n l\\xFD Guardian\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2199,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"existing-guardians\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"C\\xE1c Guardian hi\\u1EC7n c\\xF3:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2202,\n                  columnNumber: 22\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2202,\n                columnNumber: 19\n              }, this), existingGuardians.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"guardian-list\",\n                children: existingGuardians.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"guardian-item\",\n                  children: [\"Guardian ID \", id, id === 1 && \" (Owner)\"]\n                }, id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2206,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2204,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Ch\\u01B0a c\\xF3 Guardian n\\xE0o\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2213,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2201,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"guardian-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: generateGuardianInvite,\n                className: \"primary-button\",\n                children: \"T\\u1EA1o l\\u1EDDi m\\u1EDDi Guardian m\\u1EDBi\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2218,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  setShowInviteInput(!showInviteInput);\n                  loadPendingInvites();\n                },\n                className: \"toggle-button\",\n                children: showInviteInput ? 'Ẩn form nhập mã mời' : 'Hoàn tất đăng ký Guardian'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2225,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: getExistingGuardianIds,\n                className: \"update-button\",\n                children: \"C\\u1EADp nh\\u1EADt danh s\\xE1ch guardian\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2235,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2217,\n              columnNumber: 17\n            }, this), showQRCode && inviteLink && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invite-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Link m\\u1EDDi Guardian\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2246,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"qr-code\",\n                children: /*#__PURE__*/_jsxDEV(QRCodeSVG, {\n                  value: inviteLink,\n                  size: 200,\n                  level: \"H\",\n                  includeMargin: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2248,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2247,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invite-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Link m\\u1EDDi: \", /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: inviteLink,\n                    target: \"_blank\",\n                    rel: \"noopener noreferrer\",\n                    children: inviteLink\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2256,\n                    columnNumber: 36\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2256,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"M\\xE3 m\\u1EDDi: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: inviteCode\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2257,\n                    columnNumber: 34\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2257,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"note\",\n                  children: \"G\\u1EEDi link n\\xE0y cho ng\\u01B0\\u1EDDi b\\u1EA1n mu\\u1ED1n th\\xEAm l\\xE0m guardian. H\\u1ECD s\\u1EBD ho\\xE0n th\\xE0nh qu\\xE1 tr\\xECnh \\u0111\\u0103ng k\\xFD v\\xE0 sau \\u0111\\xF3 b\\u1EA1n c\\xF3 th\\u1EC3 ho\\xE0n t\\u1EA5t vi\\u1EC7c th\\xEAm guardian b\\u1EB1ng m\\xE3 m\\u1EDDi.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2258,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2255,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  setShowQRCode(false);\n                  setInviteLink('');\n                  setInviteCode('');\n                },\n                children: \"\\u0110\\xF3ng\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2260,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2245,\n              columnNumber: 19\n            }, this), showInviteInput && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invite-input-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Ho\\xE0n t\\u1EA5t \\u0111\\u0103ng k\\xFD Guardian\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2271,\n                columnNumber: 21\n              }, this), pendingInvites.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pending-invites\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"C\\xE1c m\\xE3 m\\u1EDDi \\u0111ang ch\\u1EDD x\\u1EED l\\xFD:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2275,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"invite-codes\",\n                  children: pendingInvites.map(code => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"invite-code-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"code\",\n                      children: code\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2279,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => completeGuardianSetup(code),\n                      className: \"complete-button\",\n                      children: \"Ho\\xE0n t\\u1EA5t\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2280,\n                      columnNumber: 31\n                    }, this)]\n                  }, code, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2278,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2276,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2274,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Kh\\xF4ng c\\xF3 m\\xE3 m\\u1EDDi n\\xE0o \\u0111ang ch\\u1EDD x\\u1EED l\\xFD.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2291,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"manual-input\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Ho\\u1EB7c nh\\u1EADp m\\xE3 m\\u1EDDi th\\u1EE7 c\\xF4ng:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2295,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Nh\\u1EADp m\\xE3 m\\u1EDDi\",\n                  value: inviteCode,\n                  onChange: e => setInviteCode(e.target.value),\n                  className: \"invite-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2296,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => inviteCode && completeGuardianSetup(inviteCode),\n                  disabled: !inviteCode,\n                  className: \"complete-button\",\n                  children: \"Ho\\xE0n t\\u1EA5t \\u0111\\u0103ng k\\xFD\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2303,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2294,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2270,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"guardian-test-actions mt-3\",\n              style: {\n                display: 'flex',\n                gap: '10px',\n                marginBottom: '15px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => testGuardianInfo(1),\n                className: \"btn btn-sm btn-info\",\n                children: \"Ki\\u1EC3m tra Guardian 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2315,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => testGuardianInfo(2),\n                className: \"btn btn-sm btn-info\",\n                children: \"Ki\\u1EC3m tra Guardian 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2316,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => testGuardianInfo(3),\n                className: \"btn btn-sm btn-info\",\n                children: \"Ki\\u1EC3m tra Guardian 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2317,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2314,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header bg-primary text-white\",\n              children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"mb-0\",\n                children: \"N\\u1EA1p ti\\u1EC1n v\\xE0o v\\xED Multisig\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2325,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2324,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"depositAmount\",\n                  children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2329,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  id: \"depositAmount\",\n                  className: \"form-control\",\n                  step: \"0.01\",\n                  min: \"0.01\",\n                  value: depositAmount,\n                  onChange: e => setDepositAmount(parseFloat(e.target.value)),\n                  placeholder: \"Nh\\u1EADp s\\u1ED1 l\\u01B0\\u1EE3ng SOL\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2330,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2328,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary w-100\",\n                onClick: depositToMultisig,\n                disabled: !multisigAddress,\n                children: \"N\\u1EA1p ti\\u1EC1n v\\xE0o v\\xED\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2341,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2327,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header bg-primary text-white\",\n              children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"mb-0\",\n                children: \"R\\xFAt ti\\u1EC1n t\\u1EEB v\\xED Multisig\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2354,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2353,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"recipientAddress\",\n                  children: \"\\u0110\\u1ECBa ch\\u1EC9 ng\\u01B0\\u1EDDi nh\\u1EADn:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2358,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  id: \"recipientAddress\",\n                  className: \"form-control\",\n                  value: recipientAddress,\n                  onChange: e => setRecipientAddress(e.target.value),\n                  placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa ch\\u1EC9 v\\xED ng\\u01B0\\u1EDDi nh\\u1EADn\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2359,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2357,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"withdrawAmount\",\n                  children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2369,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  id: \"withdrawAmount\",\n                  className: \"form-control\",\n                  step: \"0.01\",\n                  min: \"0.01\",\n                  value: withdrawAmount,\n                  onChange: e => setWithdrawAmount(parseFloat(e.target.value)),\n                  placeholder: \"Nh\\u1EADp s\\u1ED1 l\\u01B0\\u1EE3ng SOL\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2370,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2368,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary w-100\",\n                onClick: withdrawFromMultisig,\n                disabled: !multisigAddress,\n                children: \"R\\xFAt ti\\u1EC1n t\\u1EEB v\\xED\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2381,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2356,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2352,\n            columnNumber: 13\n          }, this), transactionStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transaction-status\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Tr\\u1EA1ng th\\xE1i giao d\\u1ECBch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2393,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                whiteSpace: 'pre-line'\n              },\n              children: transactionStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2394,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2392,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1996,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1995,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1994,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1990,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7HQEOi4A4ZJWO4z7XtBpSdEwOv0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Connection","PublicKey","Keypair","Transaction","SystemProgram","TransactionInstruction","LAMPORTS_PER_SOL","sendAndConfirmTransaction","Buffer","createWebAuthnCredential","getWebAuthnAssertionForLogin","calculateMultisigAddress","processCredentialIdForPDA","getMultisigPDA","getGuardianPDA","QRCodeSVG","saveInvitation","getInvitation","getGuardianData","updateGuardianStatus","getPendingInvites","deleteGuardianData","getWalletByCredentialId","TransferForm","BN","jsxDEV","_jsxDEV","RPC_ENDPOINT","process","env","REACT_APP_RPC_ENDPOINT","PROGRAM_ID_STRING","REACT_APP_PROGRAM_ID","PROGRAM_ID","console","log","REACT_APP_FEE_PAYER_SECRET_KEY","split","length","connectionOptions","commitment","confirmTransactionInitialTimeout","disableRetryOnRateLimit","fetch","connection","ActionParams","constructor","props","amount","destination","tokenMint","TEMP_WALLET_PUBKEY","bufferToUint8Array","buffer","Uint8Array","byteOffset","byteLength","concatUint8Arrays","arrays","totalLength","reduce","acc","arr","result","offset","set","bigIntToLeBytes","value","bytesLength","i","Number","BigInt","calculateMultisigPDA","programId","credentialId","seedBuffer","findProgramAddressSync","from","compressPublicKey","uncompressedKey","warn","randomKey","alloc","randomBytes","crypto","getRandomValues","x","slice","y","prefix","compressedKey","hashRecoveryPhrase","phrase","phraseBytes","TextEncoder","encode","inputBytes","Math","min","hashBuffer","subtle","digest","convertSecretKeyStringToUint8Array","secretKeyString","Error","numbers","map","s","parseInt","trim","bytes","hashCredentialId","encoder","data","App","_s","walletKeypair","setWalletKeypair","walletBalance","setWalletBalance","multisigAddress","setMultisigAddress","threshold","setThreshold","guardianName","setGuardianName","recoveryPhrase","setRecoveryPhrase","transactionStatus","setTransactionStatus","guardianPDA","setGuardianPDA","isLoadingBalance","setIsLoadingBalance","setCredentialId","webauthnPubkey","setWebauthnPubkey","walletName","setWalletName","isUsingTempWallet","setIsUsingTempWallet","newGuardianName","setNewGuardianName","newRecoveryPhrase","setNewRecoveryPhrase","existingGuardians","setExistingGuardians","showAddGuardianForm","setShowAddGuardianForm","projectFeePayerKeypair","setProjectFeePayerKeypair","usingProjectFeePayer","setUsingProjectFeePayer","feePayerBalance","setFeePayerBalance","isLoadingFeePayerBalance","setIsLoadingFeePayerBalance","pdaBalance","setPdaBalance","isLoadingPdaBalance","setIsLoadingPdaBalance","selectedGuardianId","setSelectedGuardianId","depositAmount","setDepositAmount","withdrawAmount","setWithdrawAmount","recipientAddress","setRecipientAddress","loginCredentialId","setLoginCredentialId","isLoggingIn","setIsLoggingIn","isLoggedIn","setIsLoggedIn","showLoginForm","setShowLoginForm","inviteLink","setInviteLink","inviteCode","setInviteCode","showQRCode","setShowQRCode","showInviteInput","setShowInviteInput","pendingInvites","setPendingInvites","newKeypair","generate","projectPayerPrivateKey","feePayerKeypair","fromSecretKey","loadFeePayerBalance","keypair","balance","getBalance","publicKey","error","useTempWallet","tempWalletPrivateKey","findMultisigAddress","loadBalance","toString","message","createWalletWithWebAuthn","walletAddress","rawIdBase64","rawId","prev","multisigPDA","existingAccount","getAccountInfo","guardianId","guardianIdBytes","guardianPDAAddress","subarray","toBuffer","transaction","initMultisigDiscriminator","thresholdBytes","credentialIdString","credentialIdBuffer","credentialIdLenBuffer","writeUInt32LE","credentialIdLenBytes","credentialIdDataBytes","initData","add","keys","pubkey","isSigner","isWritable","feePayer","recentBlockhash","getLatestBlockhash","blockhash","instructions","ix","index","k","discriminator","Array","credentialIdLength","isOwner","hasWebauthn","webauthnPubkeyLength","signature","sendTransaction","confirmTransaction","guardianMultisigPDA","hashedRecoveryBytes","addGuardianDiscriminator","guardianIdBigIntBytes","guardianNameBuffer","guardianNameLenBuffer","recoveryHashIntermediateBytes","isOwnerByte","uncompressedKeyBuffer","compressedKeyBuffer","addGuardianData","addGuardianTransaction","addGuardianSignature","loadPdaBalance","pda","bump","pdaAddress","findGuardianAddress","guardianIdBigInt","requestAirdrop","fundFromValidator","validatorKey","transfer","fromPubkey","toPubkey","lamports","getWalletInfo","multisigAccount","guardian_count","recovery_nonce","DataView","getBigUint64","transaction_nonce","last_transaction_timestamp","getBigInt64","getGuardianInfo","setGuardianInfo","guardianAccount","currentOffset","wallet","toNumber","nameLength","readUInt32LE","nameBytes","name","TextDecoder","decode","isActive","recoveryHash","recoveryHashHex","webauthnHex","guardianInfoObj","getExistingGuardianIds","guardianIds","push","owner","includes","join","generateNewGuardianId","existingIds","newId","addNewGuardian","newGuardianId","guardianIdentifier","webAuthnResult","existingGuardian","Promise","resolve","setTimeout","newGuardianAccount","webAuthnError","depositToMultisig","lamportsToSend","withdrawFromMultisig","recipient","multisigBalance","withdrawDiscriminator","amountBigInt","floor","amountBytes","withdrawData","withdrawTransaction","withdrawSignature","testGuardianInfo","id","walletBytes","getUint32","parseError","loginToWallet","assertionResult","success","credentialRawData","credentialIdHex","credentialMapping","walletAddressFromDB","walletAccount","generateRandomCode","characters","charAt","random","generateGuardianInvite","ngrokUrl","REACT_APP_NGROK_URL","window","location","origin","status","ownerId","errorMessage","loadPendingInvites","multisigAddressStr","invitesList","fetchGuardianDataFromDatabase","fetchInviteFromDatabase","updateGuardianStatusInDatabase","txSignature","completeGuardianRegistration","guardianData","inviteData","webauthnPublicKey","deleteResult","filter","code","checkGuardiansInDatabase","resultMessage","webauthnCredentialId","substring","completeGuardianSetup","multisigPubkey","guardianIndex","guardianType","tx","findProgramAddress","instructionData","addGuardianIx","skipPreflight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","placeholder","onClick","disabled","style","margin","padding","onTransferSuccess","maxLength","width","required","max","size","level","includeMargin","href","rel","display","gap","marginBottom","htmlFor","step","parseFloat","whiteSpace","_c","$RefreshReg$"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Connection, PublicKey, Keypair, Transaction, SystemProgram, TransactionInstruction, Commitment, Signer, LAMPORTS_PER_SOL, sendAndConfirmTransaction } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport './App.css';\nimport { createWebAuthnCredential, getWebAuthnAssertionForLogin, calculateMultisigAddress, getWebAuthnAssertion } from './utils/webauthnUtils';\nimport { processCredentialIdForPDA, getMultisigPDA, getGuardianPDA, getAllGuardianPDAs } from './utils/credentialUtils';\nimport { QRCodeSVG } from 'qrcode.react';\nimport { \n  saveInvitation, \n  getInvitation, \n  getGuardianData, \n  updateGuardianStatus,\n  getPendingInvites,\n  deleteGuardianData\n} from './firebase/guardianService';\nimport { getWalletByCredentialId } from './firebase/webAuthnService';\n// Thêm import TransferForm\nimport { TransferForm } from './components/TransferForm';\nimport BN from 'bn.js';\n\n// Lấy các biến môi trường hoặc sử dụng giá trị mặc định\nconst RPC_ENDPOINT = process.env.REACT_APP_RPC_ENDPOINT || 'http://127.0.0.1:8899'; // Localhost validator\nconst PROGRAM_ID_STRING = process.env.REACT_APP_PROGRAM_ID || 'DeN1rBfabZezHPvrq9q7BbzUbZkrjnHE1kQDrPK8kWQ3'; // Program ID mới triển khai\n\n// Địa chỉ Program ID từ smart contract\nexport const PROGRAM_ID = new PublicKey(PROGRAM_ID_STRING);\n\n// Log biến môi trường để debug\nconsole.log(\"Biến môi trường RPC_ENDPOINT:\", process.env.REACT_APP_RPC_ENDPOINT);\nconsole.log(\"Biến môi trường PROGRAM_ID:\", process.env.REACT_APP_PROGRAM_ID);\nconsole.log(\"Biến môi trường FEE_PAYER_SECRET_KEY tồn tại:\", !!process.env.REACT_APP_FEE_PAYER_SECRET_KEY);\nif (process.env.REACT_APP_FEE_PAYER_SECRET_KEY) {\n  console.log(\"Độ dài FEE_PAYER_SECRET_KEY:\", process.env.REACT_APP_FEE_PAYER_SECRET_KEY.split(',').length);\n}\n\n// Tùy chọn kết nối\nconst connectionOptions = {\n  commitment: 'confirmed' as Commitment,\n  confirmTransactionInitialTimeout: 60000,\n  disableRetryOnRateLimit: false,\n  fetch: fetch\n};\n\n// Connection với validator\nconst connection = new Connection(RPC_ENDPOINT, connectionOptions);\n\n// Schema cho các struct của chương trình\nclass ActionParams {\n  amount: number | null;\n  destination: PublicKey | null;\n  tokenMint: PublicKey | null;\n\n  constructor(props: { \n    amount: number | null; \n    destination: PublicKey | null; \n    tokenMint: PublicKey | null \n  }) {\n    this.amount = props.amount;\n    this.destination = props.destination;\n    this.tokenMint = props.tokenMint;\n  }\n}\n\n// Ví tạm thời đã được tạo và nhận SOL trước đó\nconst TEMP_WALLET_PUBKEY = '9Q8iZnAvCQP3uaDTuYbrvYSRDWB7Kk19u4TS1MDRSStJ';\n\n// Hàm chuyển đổi Buffer sang Uint8Array\nfunction bufferToUint8Array(buffer: Buffer): Uint8Array {\n  return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n\n// Hàm concat cho Uint8Array\nfunction concatUint8Arrays(...arrays: Uint8Array[]): Uint8Array {\n  // Tính tổng độ dài\n  const totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);\n  \n  // Tạo mảng mới với tổng độ dài\n  const result = new Uint8Array(totalLength);\n  \n  // Copy dữ liệu vào mảng mới\n  let offset = 0;\n  for (const arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  \n  return result;\n}\n\n// Hàm chuyển đổi từ BigInt (u64) sang bytes theo thứ tự little-endian\nconst bigIntToLeBytes = (value: bigint, bytesLength: number = 8): Uint8Array => {\n  const result = new Uint8Array(bytesLength);\n  for (let i = 0; i < bytesLength; i++) {\n    result[i] = Number((value >> BigInt(8 * i)) & BigInt(0xff));\n  }\n  return result;\n};\n\n// Helper function để tính toán MultisigPDA một cách nhất quán\nconst calculateMultisigPDA = async (programId: PublicKey, credentialId: string): Promise<[PublicKey, number]> => {\n  // Sử dụng hàm processCredentialIdForPDA từ helpers.ts để xử lý credential ID\n  // đảm bảo nhất quán với smart contract\n  const seedBuffer = processCredentialIdForPDA(credentialId);\n  \n  return PublicKey.findProgramAddressSync(\n    [\n      Buffer.from(\"multisig\"),\n      seedBuffer\n    ],\n    programId\n  );\n};\n\n// Hàm nén khóa công khai từ dạng uncompressed (65 bytes) sang compressed (33 bytes)\nconst compressPublicKey = (uncompressedKey: Buffer): Buffer => {\n  // Đảm bảo khóa bắt đầu với byte 0x04 (không nén)\n  if (uncompressedKey[0] !== 0x04 || uncompressedKey.length !== 65) {\n    console.warn('Khóa không đúng định dạng không nén ECDSA, tạo khóa ngẫu nhiên');\n    // Tạo khóa random nếu không đúng định dạng\n    const randomKey = Buffer.alloc(33);\n    randomKey[0] = 0x02; // compressed, y is even\n    \n    // Tạo dữ liệu ngẫu nhiên cho 32 bytes còn lại\n    const randomBytes = new Uint8Array(32);\n    crypto.getRandomValues(randomBytes);\n    \n    // Sao chép vào buffer\n    for (let i = 0; i < 32; i++) {\n      randomKey[i+1] = randomBytes[i];\n    }\n    \n    return randomKey;\n  }\n  \n  // Lấy tọa độ x và y\n  const x = new Uint8Array(uncompressedKey.slice(1, 33));\n  const y = new Uint8Array(uncompressedKey.slice(33, 65));\n  \n  // Tính prefix: 0x02 nếu y chẵn, 0x03 nếu y lẻ\n  const prefix = (y[31] & 1) === 0 ? 0x02 : 0x03;\n  \n  // Tạo khóa nén: prefix (1 byte) + x (32 bytes)\n  const compressedKey = Buffer.alloc(33);\n  compressedKey[0] = prefix;\n  \n  // Copy x vào compressedKey từ vị trí 1\n  for (let i = 0; i < 32; i++) {\n    compressedKey[i + 1] = x[i];\n  }\n  \n  return compressedKey;\n};\n\n// Hàm hash recovery phrase tại frontend\nconst hashRecoveryPhrase = async (phrase: string): Promise<Uint8Array> => {\n  // Chuyển recovery phrase thành bytes\n  const phraseBytes = new TextEncoder().encode(phrase);\n  \n  // Tạo buffer 32 bytes để lưu dữ liệu\n  const inputBytes = new Uint8Array(32);\n  \n  // Sao chép dữ liệu từ phrase, đảm bảo không vượt quá 32 bytes\n  inputBytes.set(phraseBytes.slice(0, Math.min(phraseBytes.length, 32)));\n  \n  // Hash bằng SHA-256\n  const hashBuffer = await crypto.subtle.digest('SHA-256', inputBytes);\n  \n  // Chuyển kết quả thành Uint8Array\n  return new Uint8Array(hashBuffer);\n};\n\n// Chuyển đổi secret key từ chuỗi trong .env thành mảng số\nconst convertSecretKeyStringToUint8Array = (secretKeyString: string | undefined): Uint8Array => {\n  if (!secretKeyString) {\n    throw new Error('Fee payer secret key không được định nghĩa trong biến môi trường');\n  }\n  \n  // Chuyển đổi chuỗi \"1,2,3,...\" thành mảng số\n  const numbers = secretKeyString.split(',').map(s => parseInt(s.trim(), 10));\n  \n  // Kiểm tra kích thước hợp lệ (64 bytes cho ed25519)\n  if (numbers.length !== 64 && numbers.length !== 65) {\n    throw new Error(`Secret key phải có 64 hoặc 65 bytes, nhưng có ${numbers.length} bytes`);\n  }\n  \n  // Nếu có 65 bytes, bỏ qua byte cuối cùng (thường là checksum)\n  const bytes = numbers.length === 65 ? numbers.slice(0, 64) : numbers;\n  \n  return new Uint8Array(bytes);\n};\n\n// Add this function near the top with other utility functions\nconst hashCredentialId = async (credentialId: string): Promise<Uint8Array> => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(credentialId);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  return new Uint8Array(hashBuffer);\n};\n\nfunction App() {\n  const [walletKeypair, setWalletKeypair] = useState<Keypair | null>(null);\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [multisigAddress, setMultisigAddress] = useState<PublicKey | null>(null);\n  const [threshold, setThreshold] = useState<number>(1);\n  const [guardianName, setGuardianName] = useState<string>('Owner');\n  const [recoveryPhrase, setRecoveryPhrase] = useState<string>('');\n  const [transactionStatus, setTransactionStatus] = useState<string>('');\n  const [guardianPDA, setGuardianPDA] = useState<PublicKey | null>(null);\n  const [isLoadingBalance, setIsLoadingBalance] = useState<boolean>(false);\n  const [credentialId, setCredentialId] = useState<string>('');\n  const [webauthnPubkey, setWebauthnPubkey] = useState<string>('');\n  const [walletName, setWalletName] = useState<string>('My Moon Wallet');\n  const [isUsingTempWallet, setIsUsingTempWallet] = useState<boolean>(false);\n  // Thêm state cho new guardian\n  const [newGuardianName, setNewGuardianName] = useState<string>('');\n  const [newRecoveryPhrase, setNewRecoveryPhrase] = useState<string>('');\n  const [existingGuardians, setExistingGuardians] = useState<number[]>([]);  // Lưu các guardian ID đã tồn tại\n  const [showAddGuardianForm, setShowAddGuardianForm] = useState<boolean>(false);\n  // Thêm state cho fee payer của dự án\n  const [projectFeePayerKeypair, setProjectFeePayerKeypair] = useState<Keypair | null>(null);\n  const [usingProjectFeePayer, setUsingProjectFeePayer] = useState<boolean>(true);\n  const [feePayerBalance, setFeePayerBalance] = useState<number>(0);\n  const [isLoadingFeePayerBalance, setIsLoadingFeePayerBalance] = useState<boolean>(false);\n  // Thêm state cho số dư PDA\n  const [pdaBalance, setPdaBalance] = useState<number>(0);\n  const [isLoadingPdaBalance, setIsLoadingPdaBalance] = useState<boolean>(false);\n  // Thêm state cho việc chọn guardian ID\n  const [selectedGuardianId, setSelectedGuardianId] = useState<number>(1);\n  // State cho form nạp tiền\n  const [depositAmount, setDepositAmount] = useState<number>(0.1);\n  // State cho form rút tiền\n  const [withdrawAmount, setWithdrawAmount] = useState<number>(0.05);\n  const [recipientAddress, setRecipientAddress] = useState<string>('');\n  // State cho form đăng nhập ví\n  const [loginCredentialId, setLoginCredentialId] = useState<string>('');\n  const [isLoggingIn, setIsLoggingIn] = useState<boolean>(false);\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [showLoginForm, setShowLoginForm] = useState<boolean>(false);\n  \n  // Thêm state cho chức năng tạo invitation\n  const [inviteLink, setInviteLink] = useState<string>('');\n  const [inviteCode, setInviteCode] = useState<string>('');\n  const [showQRCode, setShowQRCode] = useState<boolean>(false);\n  const [showInviteInput, setShowInviteInput] = useState<boolean>(false);\n  const [pendingInvites, setPendingInvites] = useState<string[]>([]);\n\n  // Tạo keypair mới khi component được mount\n  useEffect(() => {\n    // Tạo keypair ngẫu nhiên mới cho user\n    const newKeypair = Keypair.generate();\n    setWalletKeypair(newKeypair);\n    \n    // Tạo keypair cố định cho dự án để trả phí\n    // Trong môi trường thực tế, bạn có thể lấy keypair này từ server hoặc một nguồn an toàn\n    const projectPayerPrivateKey = convertSecretKeyStringToUint8Array(process.env.REACT_APP_FEE_PAYER_SECRET_KEY);\n    \n    // Sử dụng keypair cố định cho fee payer\n    const feePayerKeypair = Keypair.fromSecretKey(projectPayerPrivateKey);\n    setProjectFeePayerKeypair(feePayerKeypair);\n    \n    // Load balance cho fee payer\n    loadFeePayerBalance(feePayerKeypair);\n    \n    // Không tính PDA ngay vì chưa có credential ID\n    // findMultisigAddress sẽ được gọi sau khi người dùng tạo WebAuthn credential\n  }, []);\n\n  // Thêm hàm để load balance của fee payer\n  const loadFeePayerBalance = async (keypair: Keypair) => {\n    try {\n      const balance = await connection.getBalance(keypair.publicKey);\n      setFeePayerBalance(balance / LAMPORTS_PER_SOL);\n      setIsLoadingFeePayerBalance(false);\n    } catch (error) {\n      setFeePayerBalance(0);\n      setIsLoadingFeePayerBalance(false);\n    }\n  };\n\n  // Sử dụng ví tạm thời đã có SOL\n  const useTempWallet = async () => {\n    try {\n      setTransactionStatus('Đang tải ví tạm thời với SOL...');\n      \n      // Sử dụng cùng secret key của fee payer\n      const tempWalletPrivateKey = convertSecretKeyStringToUint8Array(process.env.REACT_APP_FEE_PAYER_SECRET_KEY);\n      \n      // Tạo Keypair từ private key\n      const keypair = Keypair.fromSecretKey(tempWalletPrivateKey);\n      \n      setWalletKeypair(keypair);\n      setIsUsingTempWallet(true);\n      \n      // Tính PDA mới dựa trên keypair mới\n      findMultisigAddress();\n      \n      // Tải balance của ví tạm thời\n      await loadBalance(keypair);\n      \n      setTransactionStatus(`Đã chuyển sang ví tạm thời: ${keypair.publicKey.toString()}. Ví này đã có sẵn SOL để giao dịch.`);\n    } catch (error: any) {\n      console.error('Lỗi khi tải ví tạm thời:', error);\n      setTransactionStatus(`Lỗi khi tải ví tạm thời: ${error.message}`);\n    }\n  };\n\n  // Tải balance với xử lý lỗi tốt hơn\n  const loadBalance = async (keypair?: Keypair) => {\n    const publicKey = keypair?.publicKey || walletKeypair?.publicKey;\n    if (!publicKey) return;\n    \n    setIsLoadingBalance(true);\n    try {\n      console.log(\"Đang tải balance cho địa chỉ:\", publicKey.toString());\n      const balance = await connection.getBalance(publicKey);\n      console.log(\"Balance đã tải thành công:\", balance / 1_000_000_000);\n      setWalletBalance(balance / 1_000_000_000); // Chuyển từ lamports sang SOL\n    } catch (error: any) {\n      console.error('Lỗi khi tải balance:', error);\n      // Không hiển thị lỗi cho người dùng, chỉ log ra console\n    } finally {\n      setIsLoadingBalance(false);\n    }\n  };\n\n  // Tạo ví với WebAuthn\n  const createWalletWithWebAuthn = async () => {\n    try {\n      // Kiểm tra xem người dùng đã nhập recovery phrase chưa\n      if (!recoveryPhrase || recoveryPhrase.trim().length < 8) {\n        setTransactionStatus('Vui lòng nhập recovery phrase (ít nhất 8 ký tự) trước khi tạo ví');\n        return;\n      }\n      \n      // Kiểm tra xem có fee payer hay không\n      if (!projectFeePayerKeypair) {\n        setTransactionStatus('Không tìm thấy fee payer của dự án. Vui lòng thử lại sau.');\n        return;\n      }\n      \n      setTransactionStatus('Đang tạo ví Moon Wallet...\\n\\nBước 1: Đang tạo khóa WebAuthn...');\n      \n      // 1. Tạo khóa WebAuthn\n      const walletAddress = projectFeePayerKeypair.publicKey.toString(); // Sử dụng địa chỉ của fee payer\n      const result = await createWebAuthnCredential(walletAddress, walletName);\n      \n      // Chuyển đổi rawId thành base64 để lưu trữ và sử dụng\n      const rawIdBase64 = Buffer.from(result.rawId).toString('base64');\n      \n      // Lưu thông tin WebAuthn\n      setCredentialId(rawIdBase64); // Lưu base64 thay vì hex\n      setWebauthnPubkey(result.publicKey);\n      \n      setTransactionStatus(prev => prev + `\\nĐã tạo khóa WebAuthn thành công!\\nCredential ID (base64): ${rawIdBase64.slice(0, 10)}...\\nPublic Key: ${result.publicKey.slice(0, 10)}...`);\n      \n      // 2. Tính PDA cho Multisig\n      const multisigPDA = getMultisigPDA(rawIdBase64);\n      console.log(\"Multisig PDA:\", multisigPDA.toString());\n      \n      setMultisigAddress(multisigPDA);\n      setTransactionStatus(prev => prev + `\\n\\nBước 2: Đang khởi tạo ví multisig tại địa chỉ: ${multisigPDA.toString()}...`);\n      \n      // Kiểm tra xem multisig account đã tồn tại chưa\n      const existingAccount = await connection.getAccountInfo(multisigPDA);\n      if (existingAccount) {\n        setTransactionStatus(prev => prev + `\\n\\nLỖI: Ví multisig với credential ID này đã tồn tại. Điều này gần như không thể xảy ra vì credential ID luôn duy nhất.`);\n        return;\n      }\n      \n      // 3. Tính PDA address cho guardian\n      // Tạo ID dạng u64 cho guardian\n      const guardianId = BigInt(1); // Owner có ID = 1\n\n      // Chuyển đổi guardianId sang bytes (little-endian)\n      const guardianIdBytes = bigIntToLeBytes(guardianId);\n      \n      const [guardianPDAAddress] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(\"guardian\").subarray(0),\n          multisigPDA.toBuffer(),\n          guardianIdBytes\n        ],\n        PROGRAM_ID\n      );\n      \n      setGuardianPDA(guardianPDAAddress);\n      \n      // 4. Tạo transaction tích hợp để khởi tạo multisig và thêm guardian owner\n      const transaction = new Transaction();\n      \n      // 4.1 Khởi tạo Multisig\n      // Đây là discriminator cho initialize_multisig (sử dụng giá trị chính xác từ Anchor IDL)\n      const initMultisigDiscriminator = new Uint8Array([220, 130, 117, 21, 27, 227, 78, 213]);\n      const thresholdBytes = new Uint8Array([threshold]);\n      \n      // LƯU Ý QUAN TRỌNG: credential_id trong smart contract sử dụng as_bytes() trực tiếp, \n      // nên chúng ta phải gửi chính xác chuỗi rawIdBase64 như một chuỗi UTF-8\n      // không phải decode nó sang dạng binary\n      const credentialIdString = rawIdBase64;\n      const credentialIdBuffer = Buffer.from(credentialIdString);\n      console.log(\"Credential ID gửi đi (chuỗi gốc):\", credentialIdString);\n      \n      const credentialIdLenBuffer = Buffer.alloc(4);\n      credentialIdLenBuffer.writeUInt32LE(credentialIdBuffer.length, 0);\n      const credentialIdLenBytes = bufferToUint8Array(credentialIdLenBuffer);\n      const credentialIdDataBytes = bufferToUint8Array(credentialIdBuffer);\n      \n      // Tạo dữ liệu instruction theo đúng cấu trúc contract yêu cầu\n      const initData = concatUint8Arrays(\n        initMultisigDiscriminator,\n        thresholdBytes,\n        credentialIdLenBytes,\n        credentialIdDataBytes\n      );\n      \n      // Thêm instruction khởi tạo multisig vào transaction\n      transaction.add(new TransactionInstruction({\n        keys: [\n          { pubkey: multisigPDA, isSigner: false, isWritable: true },\n          { pubkey: projectFeePayerKeypair.publicKey, isSigner: true, isWritable: true },\n          { pubkey: SystemProgram.programId, isSigner: false, isWritable: false }\n        ],\n        programId: PROGRAM_ID,\n        data: Buffer.from(initData)\n      }));\n      \n      // Sign và gửi transaction\n      transaction.feePayer = projectFeePayerKeypair.publicKey;\n      transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n      \n      // Thông báo cho người dùng\n      setTransactionStatus(prev => prev + '\\nĐang gửi transaction để khởi tạo ví và thêm guardian owner...');\n      \n      // Log dữ liệu transaction để debug\n      console.log(\"Transaction data:\", {\n        instructions: transaction.instructions.map((ix, index) => ({\n          programId: ix.programId.toString(),\n          keys: ix.keys.map(k => ({\n            pubkey: k.pubkey.toString(),\n            isSigner: k.isSigner,\n            isWritable: k.isWritable\n          })),\n          data: index === 1 ? {\n            discriminator: Array.from(initMultisigDiscriminator),\n            threshold: threshold,\n            credentialIdLength: credentialIdBuffer.length,\n            credentialId: Array.from(credentialIdBuffer),\n            isOwner: true,\n            hasWebauthn: true,\n            webauthnPubkeyLength: result.publicKey.length\n          } : \"initMultisig\"\n        }))\n      });\n      \n      const signature = await connection.sendTransaction(\n        transaction,\n        [projectFeePayerKeypair]\n      );\n      \n      await connection.confirmTransaction(signature);\n      setTransactionStatus(prev => prev + `\\nVí multisig đã được khởi tạo thành công! Signature: ${signature}`);\n      \n      // 5. Thêm guardian đầu tiên (owner)\n      setTransactionStatus(prev => prev + '\\n\\nBước 3: Đang thêm guardian owner đầu tiên...');\n\n      try {\n        // Tính PDA cho guardian\n        const guardianId = BigInt(1); // Owner có ID = 1\n        const guardianIdBytes = bigIntToLeBytes(guardianId);\n        \n        // 5.1 Tính PDA cho multisig với credential_id\n        const guardianMultisigPDA = multisigPDA;\n        \n        console.log(\"Sử dụng PDA cho guardian với multisig PDA:\", guardianMultisigPDA.toString());\n        \n        // 5.2 Tính PDA cho guardian\n        const guardianPDA = getGuardianPDA(guardianMultisigPDA, 1); // Owner có ID = 1\n        \n        setGuardianPDA(guardianPDA);\n        \n        // Hash recovery phrase tại frontend\n        console.log(\"Recovery phrase gốc:\", recoveryPhrase);\n        const hashedRecoveryBytes = await hashRecoveryPhrase(recoveryPhrase);\n        console.log(\"Recovery phrase sau khi hash tại frontend:\", Buffer.from(hashedRecoveryBytes).toString('hex'));\n        \n        // Tạo discriminator cho add_guardian\n        const addGuardianDiscriminator = new Uint8Array([167, 189, 170, 27, 74, 240, 201, 241]);\n        \n        // Chuyển guardian ID thành bytes\n        const guardianIdBigIntBytes = bigIntToLeBytes(guardianId);\n        \n        // Chuẩn bị tên guardian\n        const guardianNameBuffer = Buffer.from(guardianName || 'Owner');\n        const guardianNameLenBuffer = Buffer.alloc(4);\n        guardianNameLenBuffer.writeUInt32LE(guardianNameBuffer.length, 0);\n        \n        // Chuẩn bị recovery hash - sử dụng giá trị đã hash\n        const recoveryHashIntermediateBytes = hashedRecoveryBytes;\n        \n        // Chuẩn bị các tham số khác\n        const isOwnerByte = new Uint8Array([1]); // true = 1\n        \n        // WebAuthn pubkey - nén khóa từ 65 bytes (uncompressed) thành 33 bytes (compressed)\n        // Smart contract yêu cầu webauthn_pubkey: Option<[u8; 33]>\n        const uncompressedKeyBuffer = Buffer.from(result.publicKey, 'hex');\n        console.log(\"WebAuthn key (uncompressed, 65 bytes):\", result.publicKey);\n        \n        // Nén khóa thành 33 bytes\n        const compressedKeyBuffer = compressPublicKey(uncompressedKeyBuffer);\n        console.log(\"WebAuthn key (compressed, 33 bytes):\", compressedKeyBuffer.toString('hex'));\n        \n        // Nối tất cả lại với nhau\n        const addGuardianData = concatUint8Arrays(\n          addGuardianDiscriminator,\n          // guardian_id (u64)\n          bufferToUint8Array(Buffer.from(guardianIdBigIntBytes)),\n          // guardian_name (string)\n          bufferToUint8Array(guardianNameLenBuffer),\n          bufferToUint8Array(guardianNameBuffer),\n          // recovery_hash_intermediate ([u8; 32])\n          recoveryHashIntermediateBytes,\n          // is_owner (bool)\n          isOwnerByte,\n          // webauthn_pubkey (Option<[u8; 33]>)\n          new Uint8Array([1]), // Some variant\n          bufferToUint8Array(compressedKeyBuffer) // Sử dụng khóa đã được nén\n        );\n        \n        // Tạo transaction add guardian\n        const addGuardianTransaction = new Transaction();\n        addGuardianTransaction.add(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: multisigPDA, isSigner: false, isWritable: true },\n              { pubkey: guardianPDA, isSigner: false, isWritable: true },\n              { pubkey: projectFeePayerKeypair.publicKey, isSigner: false, isWritable: false },\n              { pubkey: projectFeePayerKeypair.publicKey, isSigner: true, isWritable: true },\n              { pubkey: SystemProgram.programId, isSigner: false, isWritable: false }\n            ],\n            programId: PROGRAM_ID,\n            data: Buffer.from(addGuardianData)\n          })\n        );\n        \n        // Sign và gửi transaction\n        addGuardianTransaction.feePayer = projectFeePayerKeypair.publicKey;\n        addGuardianTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n        \n        const addGuardianSignature = await connection.sendTransaction(\n          addGuardianTransaction,\n          [projectFeePayerKeypair]\n        );\n        \n        await connection.confirmTransaction(addGuardianSignature);\n        setTransactionStatus(prev => prev + `\\nGuardian owner đã được thêm thành công! Signature: ${addGuardianSignature}`);\n      } catch (error: any) {\n        console.error(\"Lỗi khi thêm guardian owner:\", error);\n        setTransactionStatus(prev => prev + `\\nLỗi khi thêm guardian owner: ${error.message}`);\n      }\n      \n      // 6. Hoàn thành quá trình tạo ví\n      setTransactionStatus(prev => prev + '\\n\\n✅ VÍ MOON WALLET ĐÃ ĐƯỢC TẠO THÀNH CÔNG!\\n' +\n        `Địa chỉ ví Multisig: ${multisigPDA.toString()}\\n` +\n        `Recovery Phrase: ${recoveryPhrase}\\n` +\n        'Vui lòng lưu lại thông tin này để sử dụng sau này!');\n      \n      // Kiểm tra số dư của ví PDA sau khi tạo\n      await loadPdaBalance(multisigPDA);\n      \n    } catch (error: any) {\n      console.error('Lỗi trong quá trình tạo ví:', error);\n      setTransactionStatus(`Lỗi: ${error.message}`);\n    }\n  };\n\n  // Sửa lại hàm tính PDA cho multisig wallet\n  const findMultisigAddress = async () => {\n    // Sử dụng credential ID (nếu có) hoặc một giá trị tạm thời nếu chưa có\n    if (!credentialId) {\n      // Nếu chưa có credential ID, không thể tính PDA chính xác\n      setMultisigAddress(null);\n      return null;\n    }\n    \n    try {\n      const [pda, bump] = await calculateMultisigAddress(PROGRAM_ID, credentialId);\n      setMultisigAddress(pda);\n      return pda;\n    } catch (error) {\n      setMultisigAddress(null);\n      return null;\n    }\n  };\n\n  // Tải balance với xử lý lỗi tốt hơn\n  const loadPdaBalance = async (pdaAddress: PublicKey) => {\n    try {\n      setIsLoadingPdaBalance(true);\n      const balance = await connection.getBalance(pdaAddress);\n      setPdaBalance(balance / LAMPORTS_PER_SOL);\n      setIsLoadingPdaBalance(false);\n    } catch (error) {\n      setPdaBalance(0);\n      setIsLoadingPdaBalance(false);\n    }\n  };\n\n  // Tính PDA address cho guardian\n  const findGuardianAddress = async (guardianId: number = 1) => {\n    if (!multisigAddress) return null;\n    \n    try {\n      // Chuyển đổi guardianId sang bytes (little-endian)\n      const guardianIdBigInt = BigInt(guardianId);\n      const guardianIdBytes = bigIntToLeBytes(guardianIdBigInt);\n      \n      // Tính PDA cho guardian trực tiếp từ multisigAddress\n      const [guardianPDA] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from(\"guardian\"),\n          multisigAddress.toBuffer(),\n          guardianIdBytes\n        ],\n        PROGRAM_ID\n      );\n      \n      console.log(`Tính PDA cho guardian ID ${guardianId} với multisig: ${multisigAddress.toString()}`);\n      console.log(`Guardian PDA: ${guardianPDA.toString()}`);\n      \n      if (guardianId === 1) {\n        setGuardianPDA(guardianPDA); // Chỉ set state cho guardian chính (ID=1)\n      }\n      return guardianPDA;\n    } catch (error) {\n      console.error(`Lỗi khi tính PDA cho guardian ID ${guardianId}:`, error);\n      return null;\n    }\n  };\n\n  // Airdrop SOL cho testing\n  const requestAirdrop = async () => {\n    if (!projectFeePayerKeypair) {\n      setTransactionStatus('Không tìm thấy fee payer của dự án.');\n      return;\n    }\n    \n    try {\n      setTransactionStatus('Đang yêu cầu airdrop cho fee payer của dự án...');\n      const signature = await connection.requestAirdrop(\n        projectFeePayerKeypair.publicKey,\n        2_000_000_000 // 2 SOL\n      );\n      \n      await connection.confirmTransaction(signature);\n      // Tải lại số dư của fee payer\n      await loadFeePayerBalance(projectFeePayerKeypair);\n      setTransactionStatus('Airdrop thành công! 2 SOL đã được thêm vào ví fee payer của dự án.');\n    } catch (error: any) {\n      console.error('Lỗi khi thực hiện airdrop:', error);\n      setTransactionStatus(`Lỗi airdrop: ${error.message}. Đang thử phương thức chuyển tiền trực tiếp...`);\n      \n      // Thử phương pháp khác nếu airdrop thất bại\n      fundFromValidator(projectFeePayerKeypair);\n    }\n  };\n\n  // Chuyển tiền từ validator wallet sang ví người dùng \n  const fundFromValidator = async (keypair: Keypair) => {\n    try {\n      setTransactionStatus('Đang chuyển tiền từ validator vào fee payer...');\n      \n      // Tạo kết nối với validator wallet (địa chỉ mặc định của validator)\n      const validatorKey = new PublicKey('E6mJJmCvg4PDhanmaBxxeyTczza9vKpMgirRUD6Qz5kv');\n      \n      // Tạo transaction chuyển tiền\n      const transaction = new Transaction().add(\n        SystemProgram.transfer({\n          fromPubkey: validatorKey,\n          toPubkey: keypair.publicKey,\n          lamports: 2_000_000_000 // 2 SOL\n        })\n      );\n      \n      // Lấy các thông tin cần thiết cho transaction\n      transaction.feePayer = validatorKey;\n      transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n      \n      // Không thể ký transaction vì không có private key của validator\n      // Thay vào đó, sử dụng phương thức sendTransactionWithRetry không cần chữ ký\n      const signature = await connection.sendTransaction(\n        transaction,\n        [] // Không cần signers khi gửi đến validator local\n      );\n      \n      await connection.confirmTransaction(signature);\n      \n      // Tải lại số dư\n      if (keypair === projectFeePayerKeypair) {\n        await loadFeePayerBalance(keypair);\n        setTransactionStatus('Chuyển tiền thành công! 2 SOL đã được thêm vào ví fee payer của dự án.');\n      } else {\n        await loadBalance(keypair);\n        setTransactionStatus('Chuyển tiền thành công! 2 SOL đã được thêm vào ví.');\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền từ validator:', error);\n      setTransactionStatus(`Lỗi khi chuyển tiền: ${error.message}. Hãy thử khởi động lại validator.`);\n    }\n  };\n\n  // Xem thông tin wallet\n  const getWalletInfo = async () => {\n    if (!multisigAddress) return;\n    \n    try {\n      setTransactionStatus('Đang truy vấn thông tin ví...');\n      \n      // Load balance trước\n      await loadPdaBalance(multisigAddress);\n      \n      const multisigAccount = await connection.getAccountInfo(multisigAddress);\n      \n      if (!multisigAccount) {\n        setTransactionStatus('Ví chưa được khởi tạo');\n        return;\n      }\n      \n      // Bỏ qua 8 byte discriminator\n      const data = multisigAccount.data.slice(8);\n      \n      // Parse dữ liệu dựa trên struct MultiSigWallet mới\n      // MultiSigWallet: threshold, guardian_count, recovery_nonce, bump, transaction_nonce, last_transaction_timestamp\n      const threshold = data[0];\n      const guardian_count = data[1];\n      const recovery_nonce = new DataView(data.buffer, data.byteOffset + 2, 8).getBigUint64(0, true);\n      const bump = data[10];\n      const transaction_nonce = new DataView(data.buffer, data.byteOffset + 11, 8).getBigUint64(0, true);\n      const last_transaction_timestamp = new DataView(data.buffer, data.byteOffset + 19, 8).getBigInt64(0, true);\n      \n      // Hiển thị thông tin\n      setTransactionStatus(\n        `Thông tin ví:\\n` +\n        `- Threshold: ${threshold}\\n` +\n        `- Guardian Count: ${guardian_count}\\n` +\n        `- Recovery Nonce: ${recovery_nonce}\\n` +\n        `- Bump: ${bump}\\n` +\n        `- Transaction Nonce: ${transaction_nonce}\\n` +\n        `- Last Transaction Timestamp: ${last_transaction_timestamp}`\n      );\n    } catch (error: any) {\n      console.error('Lỗi khi truy vấn thông tin ví:', error);\n      setTransactionStatus(`Lỗi: ${error.message}`);\n    }\n  };\n  \n  // Xem thông tin guardian\n  const getGuardianInfo = async () => {\n    try {\n      // Reset UI state\n      setGuardianInfo(null);\n      setTransactionStatus('');\n      \n      if (!multisigAddress) {\n        setTransactionStatus('Cần có địa chỉ ví multisig để kiểm tra guardian');\n        return;\n      }\n      \n      if (!selectedGuardianId) {\n        setTransactionStatus('Vui lòng chọn Guardian ID');\n        return;\n      }\n      \n      // Tính PDA cho guardian\n      const guardianPDA = await findGuardianAddress(selectedGuardianId);\n      if (!guardianPDA) {\n        setTransactionStatus(`Không thể tính PDA cho guardian với ID: ${selectedGuardianId}`);\n        return;\n      }\n      \n      // Kiểm tra account tồn tại\n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      \n      if (!guardianAccount) {\n        setTransactionStatus(`Không tìm thấy thông tin account tại địa chỉ: ${guardianPDA.toString()}`);\n        return;\n      }\n      \n      setTransactionStatus(`Đã tìm thấy thông tin guardian với ID ${selectedGuardianId}.`);\n      \n      // Skip 8 bytes đầu tiên (discriminator)\n      const data = guardianAccount.data.slice(8);\n      \n      // Parse wallet (Pubkey) - 32 bytes\n      let currentOffset = 0;\n      const wallet = new PublicKey(data.slice(currentOffset, currentOffset + 32));\n      currentOffset += 32;\n      \n      // Parse guardian_id (u64) - 8 bytes\n      const guardianIdBytes = data.slice(currentOffset, currentOffset + 8);\n      currentOffset += 8;\n      const guardianId = new BN(guardianIdBytes, 'le').toNumber();\n      \n      // Parse name (String) - 4 bytes cho length + data\n      const nameLength = data.readUInt32LE(currentOffset);\n      currentOffset += 4;\n      \n      if (nameLength > 0 && currentOffset + nameLength <= data.length) {\n        const nameBytes = data.slice(currentOffset, currentOffset + nameLength);\n        const name = new TextDecoder().decode(nameBytes);\n        currentOffset += nameLength;\n        \n        // Parse is_active (bool) - 1 byte\n        const isActive = data[currentOffset] === 1;\n        currentOffset += 1;\n        \n        // Parse recovery_hash ([u8; 32]) - 32 bytes\n        const recoveryHash = data.slice(currentOffset, currentOffset + 32);\n        const recoveryHashHex = Buffer.from(recoveryHash).toString('hex');\n        currentOffset += 32;\n        \n        // Parse is_owner (bool) - 1 byte\n        const isOwner = data[currentOffset] === 1;\n        currentOffset += 1;\n        \n        // Parse webauthn_pubkey (Option<[u8; 33]>) - 1 byte + optionally 33 bytes\n        const hasWebauthn = data[currentOffset] === 1;\n        currentOffset += 1;\n        \n        let webauthnPubkey: Uint8Array | null = null;\n        if (hasWebauthn) {\n          webauthnPubkey = data.slice(currentOffset, currentOffset + 33);\n          const webauthnHex = Buffer.from(webauthnPubkey).toString('hex');\n          currentOffset += 33;\n        }\n        \n        // Parse bump (u8) - 1 byte\n        const bump = data[currentOffset];\n        \n        // Tạo object guardian info để hiển thị\n        const guardianInfoObj = {\n          pda: guardianPDA.toString(),\n          wallet: wallet.toString(),\n          guardianId,\n          name,\n          isActive,\n          recoveryHash: recoveryHashHex,\n          isOwner,\n          webauthnPubkey: webauthnPubkey ? Buffer.from(webauthnPubkey).toString('hex') : null,\n          bump\n        };\n        \n        setGuardianInfo(guardianInfoObj);\n      } else {\n        setTransactionStatus('Không thể parse dữ liệu guardian. Dữ liệu không đúng định dạng.');\n      }\n    } catch (error: any) {\n      setTransactionStatus(`Lỗi khi lấy thông tin guardian: ${error.message}`);\n    }\n  };\n\n  // Hàm để lấy danh sách guardian ID hiện có\n  const getExistingGuardianIds = async () => {\n    if (!multisigAddress) return [];\n    \n    try {\n      setTransactionStatus('Đang kiểm tra danh sách Guardian ID...');\n      \n      const guardianIds: number[] = [];\n      \n      // Kiểm tra guardian từ ID 1 đến 8\n      for (let i = 1; i <= 8; i++) {\n        try {\n          // Tính PDA cho guardian với ID i sử dụng hàm đã sửa\n          const guardianPDA = await findGuardianAddress(i);\n          \n          if (!guardianPDA) {\n            console.log(`Guardian ID ${i}: Không tính được PDA`);\n            continue;\n          }\n          \n          // Kiểm tra xem guardian với ID này có tồn tại không\n          console.log(`Đang kiểm tra Guardian ID ${i} tại địa chỉ: ${guardianPDA.toString()}`);\n          const guardianAccount = await connection.getAccountInfo(guardianPDA);\n          \n          if (guardianAccount) {\n            guardianIds.push(i);\n            console.log(`Guardian ID ${i} đã tồn tại - PDA: ${guardianPDA.toString()}`);\n            console.log(`  - Owner: ${guardianAccount.owner.toString()}`);\n            console.log(`  - Data size: ${guardianAccount.data.length} bytes`);\n            \n            // Kiểm tra discriminator (8 bytes đầu)\n            const discriminator = guardianAccount.data.slice(0, 8);\n            console.log(`  - Discriminator: ${Buffer.from(discriminator).toString('hex')}`);\n          } else {\n            console.log(`Guardian ID ${i}: Account không tồn tại tại địa chỉ ${guardianPDA.toString()}`);\n          }\n        } catch (error) {\n          console.error(`Lỗi khi kiểm tra guardian ID ${i}:`, error);\n        }\n      }\n      \n      console.log(\"Danh sách guardian ID hiện tại:\", guardianIds);\n      \n      // Nếu không có guardian nào, thêm ID 1 vào danh sách để có thể chọn\n      if (guardianIds.length === 0) {\n        guardianIds.push(1);\n        console.log(\"Không tìm thấy guardian nào, thêm ID 1 mặc định vào danh sách\");\n      }\n      \n      setExistingGuardians(guardianIds);\n      \n      // Đảm bảo selectedGuardianId nằm trong danh sách các ID hiện có\n      if (!guardianIds.includes(selectedGuardianId)) {\n        console.log(`Selected Guardian ID ${selectedGuardianId} không tồn tại, chuyển sang ID ${guardianIds[0]}`);\n        setSelectedGuardianId(guardianIds[0]);\n      }\n      \n      setTransactionStatus(`Đã tìm thấy ${guardianIds.length} guardian. IDs: ${guardianIds.join(', ')}`);\n      return guardianIds;\n    } catch (error) {\n      console.error(\"Lỗi khi lấy danh sách guardian:\", error);\n      return [];\n    }\n  };\n  \n  // Hàm sinh guardian ID mới không bị trùng\n  const generateNewGuardianId = (existingIds: number[]) => {\n    // Nếu không có ID nào tồn tại, bắt đầu từ 2 (vì ID 1 thường là owner)\n    if (existingIds.length === 0) return 2;\n    \n    // Tìm ID nhỏ nhất không bị trùng\n    let newId = 1;\n    while (existingIds.includes(newId)) {\n      newId++;\n    }\n    \n    return newId;\n  };\n  \n  // Hàm thêm guardian mới với chữ ký WebAuthn riêng\n  const addNewGuardian = async () => {\n    try {\n      // Kiểm tra xem ví đã được tạo chưa\n      if (!multisigAddress) {\n        setTransactionStatus('Vui lòng tạo ví trước khi thêm guardian.');\n        return;\n      }\n      \n      // Kiểm tra xem có fee payer hay không\n      if (!projectFeePayerKeypair) {\n        setTransactionStatus('Không tìm thấy fee payer của dự án. Vui lòng thử lại sau.');\n        return;\n      }\n      \n      // Kiểm tra các trường bắt buộc\n      if (!newGuardianName || !newRecoveryPhrase || newRecoveryPhrase.length < 8) {\n        setTransactionStatus('Vui lòng nhập tên guardian và recovery phrase (ít nhất 8 ký tự).');\n        return;\n      }\n      \n      setTransactionStatus('Đang thêm guardian mới...\\n\\nBước 1: Tạo khóa WebAuthn cho guardian mới...');\n      \n      // Lấy danh sách guardian ID hiện tại\n      const existingIds = await getExistingGuardianIds();\n      \n      // Sinh guardian ID mới không bị trùng\n      const newGuardianId = generateNewGuardianId(existingIds);\n      console.log(\"=== ADD GUARDIAN === Guardian ID mới được sinh:\", newGuardianId);\n      \n      // 1. Tạo khóa WebAuthn cho guardian mới\n      try {\n        // Sử dụng một định danh duy nhất cho khóa mới\n        const guardianIdentifier = `${multisigAddress?.toString()}_guardian_${newGuardianId}`;\n        const webAuthnResult = await createWebAuthnCredential(guardianIdentifier, newGuardianName);\n        \n        // Log thông tin WebAuthn\n        console.log(\"=== ADD GUARDIAN === WebAuthn credential mới đã được tạo:\");\n        console.log(\"=== ADD GUARDIAN === Credential ID:\", webAuthnResult.credentialId);\n        console.log(\"=== ADD GUARDIAN === Public Key:\", webAuthnResult.publicKey);\n        \n        setTransactionStatus(prev => prev + `\\nĐã tạo khóa WebAuthn thành công!`);\n        \n        // 2. Tính PDA cho guardian mới\n        const guardianPDA = await findGuardianAddress(newGuardianId);\n        \n        if (!guardianPDA) {\n          setTransactionStatus('Không thể tính PDA cho guardian mới.');\n          return;\n        }\n        \n        console.log(\"=== ADD GUARDIAN === Guardian PDA mới:\", guardianPDA.toString());\n        \n        // Kiểm tra trước xem guardian account đã tồn tại chưa\n        const existingGuardian = await connection.getAccountInfo(guardianPDA);\n        if (existingGuardian) {\n          console.log(\"=== ADD GUARDIAN === Guardian account đã tồn tại!\", existingGuardian);\n          setTransactionStatus(`Guardian với ID=${newGuardianId} đã tồn tại rồi. Hãy chọn ID khác.`);\n          return;\n        }\n        \n        // 3. Hash recovery phrase\n        const hashedRecoveryBytes = await hashRecoveryPhrase(newRecoveryPhrase);\n        console.log(\"=== ADD GUARDIAN === Recovery phrase sau khi hash:\", Buffer.from(hashedRecoveryBytes).toString('hex'));\n        \n        // 4. Chuyển đổi guardian ID thành bytes (little-endian)\n        const guardianIdBigInt = BigInt(newGuardianId);\n        const guardianIdBytes = bigIntToLeBytes(guardianIdBigInt);\n        \n        // 5. Nén khóa WebAuthn từ 65 bytes (uncompressed) thành 33 bytes (compressed)\n        const uncompressedKeyBuffer = Buffer.from(webAuthnResult.publicKey, 'hex');\n        console.log(\"=== ADD GUARDIAN === WebAuthn key (uncompressed, 65 bytes):\", webAuthnResult.publicKey);\n        \n        // Nén khóa thành 33 bytes\n        const compressedKeyBuffer = compressPublicKey(uncompressedKeyBuffer);\n        console.log(\"=== ADD GUARDIAN === WebAuthn key (compressed, 33 bytes):\", compressedKeyBuffer.toString('hex'));\n        \n        // 6. Tạo discriminator cho add_guardian\n        const addGuardianDiscriminator = new Uint8Array([167, 189, 170, 27, 74, 240, 201, 241]);\n        \n        // 7. Chuẩn bị tên guardian\n        const guardianNameBuffer = Buffer.from(newGuardianName);\n        const guardianNameLenBuffer = Buffer.alloc(4);\n        guardianNameLenBuffer.writeUInt32LE(guardianNameBuffer.length, 0);\n        \n        // 8. Đặt is_owner = false vì đây là guardian member, không phải owner\n        const isOwnerByte = new Uint8Array([0]); // false = 0\n        \n        // 9. Cấu hình webauthn_pubkey là Some(compressed_key)\n        const hasWebauthn = new Uint8Array([1]); // Some variant\n        \n        // 10. Tạo dữ liệu instruction\n        const addGuardianData = concatUint8Arrays(\n          addGuardianDiscriminator,\n          // guardian_id (u64)\n          bufferToUint8Array(Buffer.from(guardianIdBytes)),\n          // guardian_name (string)\n          bufferToUint8Array(guardianNameLenBuffer),\n          bufferToUint8Array(guardianNameBuffer),\n          // recovery_hash_intermediate ([u8; 32])\n          hashedRecoveryBytes,\n          // is_owner (bool)\n          isOwnerByte,\n          // webauthn_pubkey (Option<[u8; 33]>) - Some variant + compressed key\n          hasWebauthn,\n          bufferToUint8Array(compressedKeyBuffer)\n        );\n        \n        // Log dữ liệu instruction để debug\n        console.log(\"=== ADD GUARDIAN === Dữ liệu instruction:\", {\n          discriminator: Buffer.from(addGuardianDiscriminator).toString('hex'),\n          guardianId: newGuardianId.toString(),\n          guardianIdBytes: Buffer.from(guardianIdBytes).toString('hex'),\n          nameLength: guardianNameBuffer.length,\n          name: newGuardianName,\n          recoveryHashHex: Buffer.from(hashedRecoveryBytes).toString('hex'),\n          isOwner: false,\n          hasWebauthn: true,\n          webauthnPubkey: compressedKeyBuffer.toString('hex')\n        });\n        \n        setTransactionStatus(prev => prev + `\\n\\nBước 2: Đang thêm guardian vào blockchain...`);\n        \n        // 11. Tạo transaction add guardian\n        const addGuardianTransaction = new Transaction();\n        addGuardianTransaction.add(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: multisigAddress, isSigner: false, isWritable: true },\n              { pubkey: guardianPDA, isSigner: false, isWritable: true },\n              { pubkey: projectFeePayerKeypair.publicKey, isSigner: false, isWritable: false },\n              { pubkey: projectFeePayerKeypair.publicKey, isSigner: true, isWritable: true },\n              { pubkey: SystemProgram.programId, isSigner: false, isWritable: false }\n            ],\n            programId: PROGRAM_ID,\n            data: Buffer.from(addGuardianData)\n          })\n        );\n        \n        // Sign và gửi transaction với fee payer của dự án\n        addGuardianTransaction.feePayer = projectFeePayerKeypair.publicKey;\n        addGuardianTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n        \n        console.log(\"=== ADD GUARDIAN === Đang gửi transaction...\");\n        const addGuardianSignature = await connection.sendTransaction(\n          addGuardianTransaction,\n          [projectFeePayerKeypair] as Signer[]\n        );\n        \n        console.log(\"=== ADD GUARDIAN === Transaction đã gửi. Signature:\", addGuardianSignature);\n        \n        setTransactionStatus(prev => prev + `\\nĐang xác nhận transaction thêm guardian...`);\n        await connection.confirmTransaction(addGuardianSignature);\n        \n        setTransactionStatus(`Guardian mới đã được thêm thành công với ID: ${newGuardianId}!\\n` +\n          `Chữ ký WebAuthn đã được lưu cho guardian này.\\n` +\n          `Signature: ${addGuardianSignature}`\n        );\n        \n        // Kiểm tra xem guardian đã được thêm thành công chưa\n        console.log(\"=== ADD GUARDIAN === Đang kiểm tra guardian vừa thêm...\");\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Đợi 2 giây\n        \n        const newGuardianAccount = await connection.getAccountInfo(guardianPDA);\n        if (newGuardianAccount) {\n          console.log(\"=== ADD GUARDIAN === Guardian đã được thêm thành công!\");\n          console.log(`=== ADD GUARDIAN === Data size: ${newGuardianAccount.data.length} bytes`);\n          \n          // Kiểm tra discriminator\n          const discriminator = newGuardianAccount.data.slice(0, 8);\n          console.log(`=== ADD GUARDIAN === Discriminator: ${Buffer.from(discriminator).toString('hex')}`);\n        } else {\n          console.log(\"=== ADD GUARDIAN === Guardian không được tìm thấy sau khi thêm!\");\n          setTransactionStatus(prev => prev + '\\n\\nCẢNH BÁO: Guardian có vẻ như chưa được khởi tạo trên blockchain mặc dù transaction đã thành công!');\n        }\n        \n        // Cập nhật danh sách guardian\n        await getExistingGuardianIds();\n        \n        // Cập nhật số dư của ví PDA\n        await loadPdaBalance(multisigAddress);\n        \n        // Reset form\n        setNewGuardianName('');\n        setNewRecoveryPhrase('');\n      } catch (webAuthnError: any) {\n        console.error(\"=== ADD GUARDIAN === Lỗi khi tạo khóa WebAuthn:\", webAuthnError);\n        setTransactionStatus(`Lỗi khi tạo khóa WebAuthn: ${webAuthnError.message || 'Không xác định'}. Vui lòng thử lại.`);\n        return;\n      }\n    } catch (error: any) {\n      console.error(\"=== ADD GUARDIAN === Lỗi khi thêm guardian mới:\", error);\n      setTransactionStatus(`Lỗi khi thêm guardian mới: ${error.message}`);\n    }\n  };\n\n  // Hàm để nạp SOL vào ví multisig\n  const depositToMultisig = async () => {\n    try {\n      // Kiểm tra xem ví đã được tạo chưa\n      if (!multisigAddress) {\n        setTransactionStatus('Vui lòng tạo ví trước khi nạp tiền.');\n        return;\n      }\n      \n      // Kiểm tra xem có fee payer hay không\n      if (!projectFeePayerKeypair) {\n        setTransactionStatus('Không tìm thấy fee payer của dự án. Vui lòng thử lại sau.');\n        return;\n      }\n      \n      // Kiểm tra số tiền hợp lệ\n      if (!depositAmount || depositAmount <= 0) {\n        setTransactionStatus('Vui lòng nhập số tiền hợp lệ để nạp.');\n        return;\n      }\n      \n      // Kiểm tra số dư của fee payer\n      const feePayerBalance = await connection.getBalance(projectFeePayerKeypair.publicKey);\n      const lamportsToSend = depositAmount * LAMPORTS_PER_SOL;\n      \n      if (feePayerBalance < lamportsToSend + 5000) { // 5000 lamports cho phí giao dịch\n        setTransactionStatus(`Số dư fee payer không đủ. Hiện tại: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n        return;\n      }\n      \n      setTransactionStatus(`Đang nạp ${depositAmount} SOL vào ví...`);\n      \n      // Tạo transaction chuyển tiền\n      const transaction = new Transaction().add(\n        SystemProgram.transfer({\n          fromPubkey: projectFeePayerKeypair.publicKey,\n          toPubkey: multisigAddress,\n          lamports: lamportsToSend\n        })\n      );\n      \n      // Cấu hình transaction\n      transaction.feePayer = projectFeePayerKeypair.publicKey;\n      transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n      \n      // Ký và gửi transaction\n      const signature = await connection.sendTransaction(\n        transaction,\n        [projectFeePayerKeypair]\n      );\n      \n      await connection.confirmTransaction(signature);\n      \n      // Cập nhật số dư\n      await loadPdaBalance(multisigAddress);\n      await loadFeePayerBalance(projectFeePayerKeypair);\n      \n      setTransactionStatus(`Đã nạp thành công ${depositAmount} SOL vào ví! Signature: ${signature}`);\n    } catch (error: any) {\n      console.error('Lỗi khi nạp tiền vào ví:', error);\n      setTransactionStatus(`Lỗi khi nạp tiền: ${error.message}`);\n    }\n  };\n\n  // Hàm để rút tiền từ ví multisig\n  const withdrawFromMultisig = async () => {\n    try {\n      // Kiểm tra xem ví đã được tạo chưa\n      if (!multisigAddress) {\n        setTransactionStatus('Vui lòng tạo ví trước khi rút tiền.');\n        return;\n      }\n      \n      // Kiểm tra xem có fee payer hay không\n      if (!projectFeePayerKeypair) {\n        setTransactionStatus('Không tìm thấy fee payer của dự án. Vui lòng thử lại sau.');\n        return;\n      }\n      \n      // Kiểm tra các trường bắt buộc\n      if (!recipientAddress || !withdrawAmount || withdrawAmount <= 0) {\n        setTransactionStatus('Vui lòng nhập địa chỉ người nhận và số tiền hợp lệ.');\n        return;\n      }\n      \n      let recipient: PublicKey;\n      try {\n        recipient = new PublicKey(recipientAddress);\n      } catch (error) {\n        setTransactionStatus('Địa chỉ người nhận không hợp lệ.');\n        return;\n      }\n      \n      // Kiểm tra số dư của ví multisig\n      const multisigBalance = await connection.getBalance(multisigAddress);\n      const lamportsToSend = withdrawAmount * LAMPORTS_PER_SOL;\n      \n      if (multisigBalance < lamportsToSend) {\n        setTransactionStatus(`Số dư ví không đủ. Hiện tại: ${multisigBalance / LAMPORTS_PER_SOL} SOL`);\n        return;\n      }\n      \n      setTransactionStatus(`Đang rút ${withdrawAmount} SOL từ ví...`);\n      \n      // Tạo discriminator cho withdraw\n      const withdrawDiscriminator = new Uint8Array([54, 27, 38, 179, 114, 92, 92, 82]);\n      \n      // Số tiền rút (u64)\n      const amountBigInt = BigInt(Math.floor(withdrawAmount * LAMPORTS_PER_SOL));\n      const amountBytes = bigIntToLeBytes(amountBigInt);\n      \n      // Tạo dữ liệu instruction\n      const withdrawData = concatUint8Arrays(\n        withdrawDiscriminator,\n        // amount (u64)\n        bufferToUint8Array(Buffer.from(amountBytes))\n      );\n      \n      // Tạo transaction rút tiền\n      const withdrawTransaction = new Transaction();\n      withdrawTransaction.add(\n        new TransactionInstruction({\n          keys: [\n            { pubkey: multisigAddress, isSigner: false, isWritable: true },\n            { pubkey: recipient, isSigner: false, isWritable: true },\n            { pubkey: projectFeePayerKeypair.publicKey, isSigner: true, isWritable: true },\n            { pubkey: SystemProgram.programId, isSigner: false, isWritable: false }\n          ],\n          programId: PROGRAM_ID,\n          data: Buffer.from(withdrawData)\n        })\n      );\n      \n      // Sign và gửi transaction\n      withdrawTransaction.feePayer = projectFeePayerKeypair.publicKey;\n      withdrawTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n      \n      const withdrawSignature = await connection.sendTransaction(\n        withdrawTransaction,\n        [projectFeePayerKeypair]\n      );\n      \n      await connection.confirmTransaction(withdrawSignature);\n      \n      // Cập nhật số dư\n      await loadPdaBalance(multisigAddress);\n      \n      setTransactionStatus(`Đã rút thành công ${withdrawAmount} SOL từ ví! Signature: ${withdrawSignature}`);\n      \n      // Reset form\n      setWithdrawAmount(0.05);\n      setRecipientAddress('');\n      \n    } catch (error: any) {\n      console.error('Lỗi khi rút tiền từ ví:', error);\n      setTransactionStatus(`Lỗi khi rút tiền: ${error.message}`);\n    }\n  };\n\n  // Tự động cập nhật danh sách guardians khi multisigAddress thay đổi\n  useEffect(() => {\n    if (multisigAddress) {\n      // Load lại danh sách guardian IDs\n      getExistingGuardianIds();\n      \n      // Load số dư của PDA\n      loadPdaBalance(multisigAddress);\n    }\n  }, [multisigAddress]);\n\n  // Hàm để kiểm tra guardian ID cụ thể\n  const testGuardianInfo = async (id: number) => {\n    if (!multisigAddress) {\n      setTransactionStatus('Ví chưa được khởi tạo');\n      return;\n    }\n    \n    setTransactionStatus(`Đang kiểm tra chi tiết Guardian ID ${id}...`);\n    \n    try {\n      // Tính PDA \n      const guardianPDA = await findGuardianAddress(id);\n      if (!guardianPDA) {\n        setTransactionStatus(`Không thể tính PDA cho Guardian ID ${id}`);\n        return;\n      }\n      \n      console.log(`=== TEST === Đang kiểm tra chi tiết Guardian ID ${id} tại ${guardianPDA.toString()}`);\n      \n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      if (!guardianAccount) {\n        console.log(`=== TEST === Account không tồn tại tại địa chỉ ${guardianPDA.toString()}`);\n        setTransactionStatus(`Guardian ID ${id} không tồn tại trên blockchain`);\n        return;\n      }\n      \n      console.log(`=== TEST === Account tồn tại!`);\n      console.log(`=== TEST === Owner: ${guardianAccount.owner.toString()}`);\n      console.log(`=== TEST === Data size: ${guardianAccount.data.length} bytes`);\n      \n      // Kiểm tra discriminator\n      const discriminator = guardianAccount.data.slice(0, 8);\n      console.log(`=== TEST === Discriminator: ${Buffer.from(discriminator).toString('hex')}`);\n      \n      // Bỏ qua 8 byte discriminator\n      const data = guardianAccount.data.slice(8);\n      \n      try {\n        // Wallet (32 bytes)\n        const walletBytes = data.slice(0, 32);\n        const wallet = new PublicKey(walletBytes);\n        console.log(`=== TEST === Wallet: ${wallet.toString()}`);\n        \n        // Guardian ID (8 bytes)\n        const guardianIdBytes = data.slice(32, 40);\n        let guardianId = BigInt(0);\n        for (let i = 0; i < 8; i++) {\n          guardianId |= BigInt(guardianIdBytes[i]) << BigInt(8 * i);\n        }\n        console.log(`=== TEST === Guardian ID parsed: ${guardianId}`);\n        \n        // Name\n        const nameLength = new DataView(data.buffer, data.byteOffset + 40, 4).getUint32(0, true);\n        console.log(`=== TEST === Name length: ${nameLength}`);\n        \n        // Nếu name length hợp lệ, tiếp tục parse\n        if (nameLength <= 100) {\n          const nameBytes = data.slice(44, 44 + nameLength);\n          const name = new TextDecoder().decode(nameBytes);\n          console.log(`=== TEST === Name: ${name}`);\n          \n          setTransactionStatus(`Guardian ID ${id} tồn tại!\\n- PDA: ${guardianPDA.toString()}\\n- Wallet: ${wallet.toString()}\\n- Name: ${name}\\n- Guardian ID: ${guardianId}`);\n        } else {\n          console.log(`=== TEST === Name length không hợp lệ`);\n          setTransactionStatus(`Guardian ID ${id} tồn tại nhưng có cấu trúc dữ liệu không hợp lệ`);\n        }\n      } catch (parseError) {\n        console.error(`=== TEST === Lỗi khi parse dữ liệu:`, parseError);\n        setTransactionStatus(`Guardian ID ${id} tồn tại nhưng không thể parse dữ liệu: ${parseError}`);\n      }\n      \n    } catch (error: any) {\n      console.error(`=== TEST === Lỗi:`, error);\n      setTransactionStatus(`Lỗi khi kiểm tra: ${error.message}`);\n    }\n  };\n\n  // Hàm đăng nhập vào ví đã tạo\n  const loginToWallet = async () => {\n    try {\n      setIsLoggingIn(true);\n      setTransactionStatus('Đang đăng nhập vào ví...\\n\\nBước 1: Đang yêu cầu xác thực WebAuthn...');\n      \n      // 1. Yêu cầu người dùng xác thực với thiết bị (không cần nhập credential ID cụ thể)\n      try {\n        // Gọi hàm getWebAuthnAssertionForLogin với allowEmpty=true để cho phép người dùng chọn từ bất kỳ credential nào\n        const assertionResult = await getWebAuthnAssertionForLogin('', true);\n        \n        if (!assertionResult.success || !assertionResult.rawId) {\n          throw new Error(assertionResult.error || 'Không thể xác thực với thiết bị');\n        }\n        \n        // Lấy thông tin credential từ phản hồi\n        const credentialRawData = assertionResult.rawId;\n        \n        // Chuyển rawId thành hex để sử dụng làm key trong bảng webauthn_credentials\n        const credentialIdHex = Buffer.from(credentialRawData).toString('hex');\n        console.log(\"Credential ID (hex):\", credentialIdHex);\n        \n        // Chuyển rawId thành base64 để sử dụng trong blockchain\n        const rawIdBase64 = Buffer.from(credentialRawData).toString('base64');\n        console.log(\"Raw credential ID (base64):\", rawIdBase64);\n        \n        setTransactionStatus(prev => prev + '\\nXác thực WebAuthn thành công!\\n\\nBước 2: Đang tìm thông tin ví...');\n        \n        // 2. Truy vấn thông tin ví từ bảng webauthn_credentials\n        const credentialMapping = await getWalletByCredentialId(credentialIdHex);\n        \n        if (credentialMapping) {\n          // Nếu tìm thấy trong bảng ánh xạ\n          setTransactionStatus(prev => prev + `\\nĐã tìm thấy thông tin ví trong database!`);\n          \n          // Chuyển đổi từ chuỗi sang PublicKey\n          const walletAddressFromDB = new PublicKey(credentialMapping.walletAddress);\n          console.log(\"Wallet address from database:\", walletAddressFromDB.toString());\n          \n          // 3. Kiểm tra xem ví có tồn tại trên blockchain không\n          const walletAccount = await connection.getAccountInfo(walletAddressFromDB);\n          \n          if (!walletAccount) {\n            setTransactionStatus(`Ví tìm thấy trong database không tồn tại trên blockchain. Địa chỉ: ${walletAddressFromDB.toString()}`);\n            setIsLoggingIn(false);\n            return;\n          }\n          \n          // 4. Cập nhật state với thông tin ví\n          setMultisigAddress(walletAddressFromDB);\n          setCredentialId(rawIdBase64); // Lưu credential ID gốc\n          \n          setTransactionStatus(prev => prev + `\\nĐã tìm thấy ví tại địa chỉ: ${walletAddressFromDB.toString()}\\n\\nBước 3: Đang tải thông tin ví...`);\n        } else {\n          // Nếu không tìm thấy trong bảng ánh xạ, sử dụng phương pháp tính toán cũ\n          setTransactionStatus(prev => prev + '\\nKhông tìm thấy thông tin trong database, đang tính toán địa chỉ ví...');\n          \n          // Tính địa chỉ ví từ credential ID\n          const multisigPDA = getMultisigPDA(rawIdBase64);\n          console.log(\"Computed Multisig PDA:\", multisigPDA.toString());\n          \n          // Kiểm tra xem ví có tồn tại không\n          const walletAccount = await connection.getAccountInfo(multisigPDA);\n          \n          if (!walletAccount) {\n            setTransactionStatus(`Không tìm thấy ví với credential này. Có thể bạn cần tạo ví mới.`);\n            setIsLoggingIn(false);\n            return;\n          }\n          \n          setTransactionStatus(prev => prev + `\\nĐã tìm thấy ví tại địa chỉ: ${multisigPDA.toString()}\\n\\nBước 3: Đang tải thông tin ví...`);\n          \n          // Cập nhật state với thông tin ví\n          setMultisigAddress(multisigPDA);\n          setCredentialId(rawIdBase64); // Lưu credential ID gốc\n        }\n        \n        // 5. Tìm guardian PDA\n        await findGuardianAddress(1); // Tìm guardian chính (owner)\n        \n        // 6. Tải số dư và danh sách guardian\n        await loadPdaBalance(multisigAddress!);\n        await getExistingGuardianIds();\n        \n        // 7. Hoàn thành đăng nhập\n        setIsLoggedIn(true);\n        setIsLoggingIn(false);\n        setTransactionStatus(`Đăng nhập thành công!\\n\\nĐịa chỉ ví: ${multisigAddress!.toString()}\\nSố guardian: ${existingGuardians.length}`);\n        \n        // 8. Ẩn form đăng nhập\n        setShowLoginForm(false);\n      } catch (webAuthnError: any) {\n        console.error(\"Lỗi khi xác thực WebAuthn:\", webAuthnError);\n        setTransactionStatus(`Lỗi khi xác thực: ${webAuthnError.message}`);\n        setIsLoggingIn(false);\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi đăng nhập:', error);\n      setTransactionStatus(`Lỗi khi đăng nhập: ${error.message}`);\n      setIsLoggingIn(false);\n    }\n  };\n\n  // Hàm tạo mã mời ngẫu nhiên\n  const generateRandomCode = (length: number): string => {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n  };\n\n  // Hàm tạo link mời guardian mới\n  const generateGuardianInvite = async () => {\n    try {\n      // Kiểm tra ví đã được tạo chưa\n      if (!multisigAddress) {\n        setTransactionStatus('Vui lòng tạo ví trước khi mời guardian.');\n        return;\n      }\n      \n      // Lấy danh sách guardian ID hiện tại\n      const existingIds = await getExistingGuardianIds();\n      \n      // Sinh guardian ID mới không bị trùng\n      const newGuardianId = generateNewGuardianId(existingIds);\n      \n      // Tạo mã ngẫu nhiên cho link mời\n      const inviteCode = generateRandomCode(8);\n      \n      // Tạo link mời với URL ngrok từ biến môi trường hoặc sử dụng địa chỉ hiện tại\n      const ngrokUrl = process.env.REACT_APP_NGROK_URL || window.location.origin;\n      const inviteLink = `${ngrokUrl}/#/guardian-signup/${inviteCode}`;\n      \n      // Hiển thị link (đặt state trước khi lưu vào Firebase)\n      setInviteCode(inviteCode);\n      setInviteLink(inviteLink);\n      setShowQRCode(true);\n      \n      // Lưu thông tin vào Firebase\n      try {\n        await saveInvitation({\n          multisigAddress: multisigAddress.toString(),\n          guardianId: newGuardianId,\n          inviteCode,\n          status: 'pending',\n          ownerId: projectFeePayerKeypair?.publicKey.toString() || ''\n        });\n      } catch (error) {\n        console.error(\"Lỗi khi lưu vào Firebase:\", error);\n        // Hiển thị lỗi nhưng vẫn tiếp tục hiển thị link mời\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        setTransactionStatus(`Đã tạo link mời guardian: ${inviteLink}\\nLưu ý: Có lỗi khi lưu thông tin: ${errorMessage}`);\n        return inviteLink;\n      }\n      \n      setTransactionStatus(`Đã tạo link mời guardian: ${inviteLink}`);\n      \n      return inviteLink;\n    } catch (error: any) {\n      console.error(\"Lỗi khi tạo link mời guardian:\", error);\n      setTransactionStatus(`Lỗi khi tạo link mời guardian: ${error.message}`);\n      return null;\n    }\n  };\n\n  // Tải danh sách mã mời đang chờ\n  const loadPendingInvites = async () => {\n    try {\n      if (!projectFeePayerKeypair || !multisigAddress) return;\n      \n      const ownerId = projectFeePayerKeypair.publicKey.toString();\n      // Chỉ lọc guardian của chính ví multisig hiện tại\n      const multisigAddressStr = multisigAddress.toString();\n      const invitesList = await getPendingInvites(ownerId, multisigAddressStr);\n      setPendingInvites(invitesList);\n      \n      if (invitesList.length > 0) {\n        console.log(`Tìm thấy ${invitesList.length} guardian đang chờ hoàn tất cho ví ${multisigAddressStr}. Mã mời: ${invitesList.join(', ')}`);\n      }\n    } catch (error) {\n      console.error(\"Lỗi khi tải danh sách mã mời:\", error);\n    }\n  };\n\n  // Load danh sách mã mời khi component được mount và mỗi khi projectFeePayerKeypair hoặc multisigAddress thay đổi\n  useEffect(() => {\n    if (projectFeePayerKeypair && multisigAddress) {\n      loadPendingInvites();\n    }\n  }, [projectFeePayerKeypair, multisigAddress]);\n\n  // Hàm để lấy thông tin guardian đã đăng ký\n  const fetchGuardianDataFromDatabase = async (inviteCode: string) => {\n    try {\n      return await getGuardianData(inviteCode);\n    } catch (error) {\n      console.error(\"Lỗi khi lấy dữ liệu guardian:\", error);\n      return null;\n    }\n  };\n\n  // Hàm để lấy thông tin invitation\n  const fetchInviteFromDatabase = async (inviteCode: string) => {\n    try {\n      return await getInvitation(inviteCode);\n    } catch (error) {\n      console.error(\"Lỗi khi lấy dữ liệu invite:\", error);\n      return null;\n    }\n  };\n\n  // Hàm để cập nhật trạng thái guardian\n  const updateGuardianStatusInDatabase = async (inviteCode: string, status: string, txSignature?: string) => {\n    try {\n      await updateGuardianStatus(inviteCode, status as any, txSignature);\n    } catch (error) {\n      console.error(\"Lỗi khi cập nhật trạng thái guardian:\", error);\n    }\n  };\n\n  // Hàm hoàn tất đăng ký guardian từ dữ liệu đã lưu\n  const completeGuardianRegistration = async (inviteCode: string) => {\n    try {\n      setTransactionStatus('Đang hoàn tất đăng ký guardian...');\n      \n      // 1. Lấy dữ liệu guardian từ localStorage\n      const guardianData = await fetchGuardianDataFromDatabase(inviteCode);\n      \n      if (!guardianData) {\n        setTransactionStatus('Không tìm thấy dữ liệu guardian. Vui lòng đảm bảo guardian đã hoàn tất đăng ký.');\n        return;\n      }\n      \n      if (guardianData.status !== 'ready') {\n        setTransactionStatus('Guardian chưa hoàn tất đăng ký.');\n        return;\n      }\n      \n      // 2. Lấy thông tin invite\n      const inviteData = await fetchInviteFromDatabase(inviteCode);\n      \n      if (!inviteData) {\n        setTransactionStatus('Không tìm thấy thông tin mời guardian.');\n        return;\n      }\n      \n      // 3. Tính PDA cho guardian\n      const multisigPDA = new PublicKey(inviteData.multisigAddress);\n      const guardianId = inviteData.guardianId;\n      const guardianPDA = await findGuardianAddress(guardianId);\n      \n      if (!guardianPDA) {\n        setTransactionStatus('Không thể tính PDA cho guardian.');\n        return;\n      }\n      \n      // 4. Chuyển đổi dữ liệu thành format phù hợp\n      const hashedRecoveryBytes = new Uint8Array(guardianData.hashedRecoveryBytes);\n      const compressedKeyBuffer = Buffer.from(guardianData.webauthnPublicKey);\n      \n      // 5. Tạo discriminator cho add_guardian\n      const addGuardianDiscriminator = new Uint8Array([167, 189, 170, 27, 74, 240, 201, 241]);\n      \n      // 6. Chuyển đổi guardian ID thành bytes (little-endian)\n      const guardianIdBigInt = BigInt(guardianId);\n      const guardianIdBytes = bigIntToLeBytes(guardianIdBigInt);\n      \n      // 7. Chuẩn bị tên guardian\n      const guardianNameBuffer = Buffer.from(guardianData.guardianName);\n      const guardianNameLenBuffer = Buffer.alloc(4);\n      guardianNameLenBuffer.writeUInt32LE(guardianNameBuffer.length, 0);\n      \n      // 8. Đặt is_owner = false vì đây là guardian member, không phải owner\n      const isOwnerByte = new Uint8Array([0]); // false = 0\n      \n      // 9. Cấu hình webauthn_pubkey là Some(compressed_key)\n      const hasWebauthn = new Uint8Array([1]); // Some variant\n      \n      // 10. Tạo dữ liệu instruction\n      const addGuardianData = concatUint8Arrays(\n        addGuardianDiscriminator,\n        // guardian_id (u64)\n        bufferToUint8Array(Buffer.from(guardianIdBytes)),\n        // guardian_name (string)\n        bufferToUint8Array(guardianNameLenBuffer),\n        bufferToUint8Array(guardianNameBuffer),\n        // recovery_hash_intermediate ([u8; 32])\n        hashedRecoveryBytes,\n        // is_owner (bool)\n        isOwnerByte,\n        // webauthn_pubkey (Option<[u8; 33]>) - Some variant + compressed key\n        hasWebauthn,\n        bufferToUint8Array(Buffer.from(compressedKeyBuffer))\n      );\n      \n      // 11. Tạo transaction add guardian\n      const addGuardianTransaction = new Transaction();\n      addGuardianTransaction.add(\n        new TransactionInstruction({\n          keys: [\n            { pubkey: multisigPDA, isSigner: false, isWritable: true },\n            { pubkey: guardianPDA, isSigner: false, isWritable: true },\n            { pubkey: projectFeePayerKeypair!.publicKey, isSigner: false, isWritable: false },\n            { pubkey: projectFeePayerKeypair!.publicKey, isSigner: true, isWritable: true },\n            { pubkey: SystemProgram.programId, isSigner: false, isWritable: false }\n          ],\n          programId: PROGRAM_ID,\n          data: Buffer.from(addGuardianData)\n        })\n      );\n      \n      // Sign và gửi transaction với fee payer của dự án\n      addGuardianTransaction.feePayer = projectFeePayerKeypair!.publicKey;\n      addGuardianTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n      \n      setTransactionStatus(prev => prev + '\\nĐang gửi transaction...');\n      const addGuardianSignature = await connection.sendTransaction(\n        addGuardianTransaction,\n        [projectFeePayerKeypair!] as Signer[]\n      );\n      \n      setTransactionStatus(prev => prev + '\\nĐang xác nhận transaction...');\n      await connection.confirmTransaction(addGuardianSignature);\n      \n      // Cập nhật trạng thái trong DB\n      await updateGuardianStatusInDatabase(inviteCode, 'completed', addGuardianSignature);\n      \n      setTransactionStatus(`Guardian đã được thêm thành công với ID: ${guardianId}!\\n` +\n        `Signature: ${addGuardianSignature}`\n      );\n      \n      // Xóa dữ liệu guardian từ database sau khi hoàn tất\n      setTransactionStatus(prev => prev + '\\n\\nĐang xóa dữ liệu guardian từ database...');\n      console.log(`Bắt đầu xóa dữ liệu guardian với mã mời: ${inviteCode}`);\n      const deleteResult = await deleteGuardianData(inviteCode);\n      \n      if (deleteResult) {\n        console.log(`✅ ĐÃ XÓA THÀNH CÔNG dữ liệu guardian, invitation và lookup với mã mời: ${inviteCode}`);\n        \n        // Cập nhật thông báo thành công rõ ràng hơn\n        setTransactionStatus(`✅ HOÀN TẤT THÀNH CÔNG!\n        \n        Guardian \"${guardianData.guardianName}\" (ID: ${guardianData.guardianId}) đã được thêm thành công vào ví.\n        \n        Địa chỉ Guardian: ${guardianPDA.toString()}\n        Signature: ${addGuardianSignature}\n        \n        ✅ Dữ liệu đã được xóa khỏi database để bảo vệ quyền riêng tư.\n        \n        ✅ Guardian hiện đã sẵn sàng sử dụng và đã được ẩn khỏi danh sách chờ.`);\n        \n        // Bỏ mã mời đã sử dụng khỏi danh sách\n        setPendingInvites(prev => prev.filter(code => code !== inviteCode));\n        \n        // Không đóng form để người dùng có thể tiếp tục thêm guardian khác\n        /* \n        if (pendingInvites.length <= 1) {\n          setShowInviteInput(false);\n        }\n        */\n      } else {\n        console.error(`❌ KHÔNG THỂ XÓA dữ liệu guardian với mã mời: ${inviteCode}`);\n        setTransactionStatus(prev => prev + '\\n❌ Không thể xóa dữ liệu guardian từ database.');\n      }\n      \n      // Cập nhật danh sách guardian và load lại danh sách mã mời\n      await getExistingGuardianIds();\n      await loadPendingInvites();\n      \n      // Cập nhật số dư của ví PDA\n      await loadPdaBalance(multisigPDA);\n    } catch (error: any) {\n      console.error(\"Lỗi khi hoàn tất đăng ký guardian:\", error);\n      setTransactionStatus(`Lỗi khi hoàn tất đăng ký guardian: ${error.message}`);\n    }\n  };\n\n  // Hàm kiểm tra thông tin guardians trong database\n  const checkGuardiansInDatabase = async () => {\n    try {\n      setTransactionStatus('Đang kiểm tra dữ liệu guardians từ Firestore...');\n      \n      if (!projectFeePayerKeypair || !multisigAddress) {\n        setTransactionStatus('Cần có thông tin fee payer và multisig address để kiểm tra.');\n        return;\n      }\n      \n      const ownerId = projectFeePayerKeypair.publicKey.toString();\n      const multisigAddressStr = multisigAddress.toString();\n      \n      // Lấy danh sách invitations đang chờ CHỈ của ví hiện tại\n      const pendingInvites = await getPendingInvites(ownerId, multisigAddressStr);\n      console.log(`Danh sách mã mời đang chờ cho ví ${multisigAddressStr}:`, pendingInvites);\n      \n      if (pendingInvites.length === 0) {\n        setTransactionStatus(`Không tìm thấy mã mời nào đang chờ xử lý cho ví ${multisigAddressStr}.`);\n        return;\n      }\n      \n      // Kiểm tra thông tin từng guardian\n      let resultMessage = 'Thông tin guardians từ database:\\n\\n';\n      \n      for (const inviteCode of pendingInvites) {\n        // Lấy thông tin invitation\n        const inviteData = await getInvitation(inviteCode);\n        if (!inviteData) {\n          resultMessage += `Mã mời ${inviteCode}: Không tìm thấy thông tin invitation.\\n`;\n          continue;\n        }\n        \n        // Lấy thông tin guardian\n        const guardianData = await getGuardianData(inviteCode);\n        if (!guardianData) {\n          resultMessage += `Mã mời ${inviteCode}: Invitation tồn tại nhưng chưa có thông tin guardian.\\n`;\n          continue;\n        }\n        \n        // Hiển thị thông tin\n        resultMessage += `Mã mời: ${inviteCode}\\n`;\n        resultMessage += `Guardian ID: ${guardianData.guardianId}\\n`;\n        resultMessage += `Tên guardian: ${guardianData.guardianName}\\n`;\n        resultMessage += `Trạng thái: ${guardianData.status}\\n`;\n        resultMessage += `WebAuthn ID: ${guardianData.webauthnCredentialId.substring(0, 20)}...\\n\\n`;\n      }\n      \n      setTransactionStatus(resultMessage);\n    } catch (error) {\n      console.error(\"Lỗi khi kiểm tra thông tin guardians:\", error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      setTransactionStatus(`Lỗi khi kiểm tra thông tin guardians: ${errorMessage}`);\n    }\n  };\n\n  // Hoàn tất quá trình đăng ký guardian dựa trên mã mời\n  const completeGuardianSetup = async (inviteCode: string) => {\n    try {\n      setTransactionStatus(`Đang hoàn tất quá trình đăng ký guardian với mã mời: ${inviteCode}...`);\n      \n      // 1. Lấy thông tin guardian\n      const guardianData = await getGuardianData(inviteCode);\n      if (!guardianData) {\n        setTransactionStatus('Không tìm thấy thông tin guardian. Vui lòng đảm bảo guardian đã hoàn tất đăng ký.');\n        return;\n      }\n      \n      if (guardianData.status !== 'ready') {\n        setTransactionStatus(`Guardian có trạng thái không hợp lệ: ${guardianData.status}`);\n        return;\n      }\n      \n      // 2. Thêm guardian vào blockchain\n      setTransactionStatus(prev => prev + '\\n\\nĐang thêm guardian vào blockchain...');\n      \n      // Tạo multisig PDA từ địa chỉ multisig\n      const multisigPubkey = new PublicKey(guardianData.multisigAddress);\n      \n      // Tạo WebAuthn public key từ dữ liệu lưu trữ\n      const webauthnPubkey = Buffer.from(new Uint8Array(guardianData.webauthnPublicKey));\n      \n      // Chuẩn bị dữ liệu guardian\n      const guardianIndex = guardianData.guardianId;\n      const guardianName = guardianData.guardianName;\n      const guardianType = 0; // 0 = Guardian thường\n      const recoveryHash = Uint8Array.from(guardianData.hashedRecoveryBytes);\n      \n      // Thêm guardian vào blockchain\n      if (projectFeePayerKeypair) {\n        // Tạo transaction\n        const tx = new Transaction();\n        \n        // Tìm PDA cho guardian\n        const guardianIdBigInt = BigInt(guardianIndex);\n        const guardianIdBytes = bigIntToLeBytes(guardianIdBigInt);\n        \n        const [guardianPDA] = await PublicKey.findProgramAddress(\n          [\n            Buffer.from(\"guardian\"),\n            multisigPubkey.toBuffer(),\n            guardianIdBytes\n          ],\n          PROGRAM_ID\n        );\n        \n        // Tạo instruction để thêm guardian\n        // Sử dụng discriminator đúng cho add_guardian theo IDL\n        const addGuardianDiscriminator = new Uint8Array([167, 189, 170, 27, 74, 240, 201, 241]);\n        \n        // Chuẩn bị tên guardian\n        const guardianNameBuffer = Buffer.from(guardianName);\n        const guardianNameLenBuffer = Buffer.alloc(4);\n        guardianNameLenBuffer.writeUInt32LE(guardianNameBuffer.length, 0);\n        \n        // Đặt is_owner = false vì đây là guardian member, không phải owner\n        const isOwnerByte = new Uint8Array([0]); // false = 0\n        \n        // Cấu hình webauthn_pubkey là Some(webauthnPubkey)\n        const hasWebauthn = new Uint8Array([1]); // Some variant\n        \n        // Tạo dữ liệu instruction\n        const instructionData = concatUint8Arrays(\n          addGuardianDiscriminator,\n          guardianIdBytes,\n          bufferToUint8Array(guardianNameLenBuffer),\n          bufferToUint8Array(guardianNameBuffer),\n          recoveryHash,\n          isOwnerByte,\n          hasWebauthn,\n          bufferToUint8Array(webauthnPubkey)\n        );\n        \n        const addGuardianIx = new TransactionInstruction({\n          keys: [\n            { pubkey: multisigPubkey, isSigner: false, isWritable: true },\n            { pubkey: guardianPDA, isSigner: false, isWritable: true },\n            { pubkey: projectFeePayerKeypair.publicKey, isSigner: false, isWritable: false },\n            { pubkey: projectFeePayerKeypair.publicKey, isSigner: true, isWritable: true },\n            { pubkey: SystemProgram.programId, isSigner: false, isWritable: false }\n          ],\n          programId: PROGRAM_ID,\n          data: Buffer.from(instructionData)\n        });\n        \n        tx.add(addGuardianIx);\n        \n        // Gửi transaction\n        setTransactionStatus(prev => prev + '\\nĐang gửi transaction...');\n        const signature = await sendAndConfirmTransaction(\n          connection,\n          tx,\n          [projectFeePayerKeypair],\n          {\n            commitment: 'confirmed',\n            skipPreflight: true,\n          }\n        );\n        \n        // Xác nhận transaction đã thành công\n        setTransactionStatus(prev => prev + '\\nĐang xác nhận transaction...');\n        await connection.confirmTransaction(signature, 'confirmed');\n        \n        // Cập nhật trạng thái guardian\n        await updateGuardianStatus(inviteCode, 'completed', signature);\n        \n        // Thông báo kết quả\n        setTransactionStatus(`Guardian đã được thêm thành công vào blockchain!\n- Tên: ${guardianData.guardianName}\n- ID: ${guardianData.guardianId}\n- Địa chỉ: ${guardianPDA.toString()}\n- Signature: ${signature}\n\nGuardian đã sẵn sàng để sử dụng trong ví multisig của bạn.`);\n        \n        // Xóa dữ liệu guardian từ database sau khi hoàn tất\n        setTransactionStatus(prev => prev + '\\n\\nĐang xóa dữ liệu guardian từ database...');\n        console.log(`Bắt đầu xóa dữ liệu guardian với mã mời: ${inviteCode}`);\n        const deleteResult = await deleteGuardianData(inviteCode);\n        \n        if (deleteResult) {\n          console.log(`✅ ĐÃ XÓA THÀNH CÔNG dữ liệu guardian, invitation và lookup với mã mời: ${inviteCode}`);\n          \n          // Cập nhật thông báo thành công rõ ràng hơn\n          setTransactionStatus(`✅ HOÀN TẤT THÀNH CÔNG!\n          \n          Guardian \"${guardianData.guardianName}\" (ID: ${guardianData.guardianId}) đã được thêm thành công vào ví.\n          \n          Địa chỉ Guardian: ${guardianPDA.toString()}\n          Signature: ${signature}\n          \n          ✅ Dữ liệu đã được xóa khỏi database để bảo vệ quyền riêng tư.\n          \n          ✅ Guardian hiện đã sẵn sàng sử dụng và đã được ẩn khỏi danh sách chờ.`);\n          \n          // Bỏ mã mời đã sử dụng khỏi danh sách\n          setPendingInvites(prev => prev.filter(code => code !== inviteCode));\n          \n          // Không đóng form sau khi hoàn tất để người dùng có thể tiếp tục thêm guardian khác\n          /* \n          if (pendingInvites.length <= 1) {\n            setShowInviteInput(false);\n          }\n          */\n        } else {\n          console.error(`❌ KHÔNG THỂ XÓA dữ liệu guardian với mã mời: ${inviteCode}`);\n          setTransactionStatus(prev => prev + '\\n❌ Không thể xóa dữ liệu guardian từ database.');\n        }\n        \n        // Làm mới danh sách guardian và cập nhật UI\n        await getExistingGuardianIds();\n        await loadPendingInvites();\n        \n        // Cập nhật số dư của ví\n        if (multisigAddress) {\n          await loadPdaBalance(multisigAddress);\n        }\n      } else {\n        setTransactionStatus('Lỗi: Fee payer không khả dụng');\n      }\n    } catch (error) {\n      console.error(\"Lỗi khi hoàn tất quá trình đăng ký guardian:\", error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      setTransactionStatus(`Lỗi khi hoàn tất quá trình đăng ký guardian: ${errorMessage}`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"bg-blue-600 text-white p-4 mb-4\">\n        <h1 className=\"text-2xl font-bold\">Moon Wallet - Quản lý Ví Đa Chữ Ký</h1>\n      </header>\n      <div className=\"container mx-auto p-4 flex flex-col\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"p-4 bg-white rounded shadow\">\n            <h2 className=\"text-xl font-bold mb-4\">Quản lý Ví</h2>\n            \n            {/* Form để tạo ví mới */}\n            <div className=\"mb-4\">\n              <input\n                type=\"text\"\n                value={recoveryPhrase}\n                onChange={(e) => setRecoveryPhrase(e.target.value)}\n                placeholder=\"Recovery Phrase (tối thiểu 8 ký tự)\"\n                className=\"w-full p-2 border rounded mb-2\"\n              />\n              <div className=\"flex space-x-2\">\n                <button \n                  onClick={createWalletWithWebAuthn} \n                  className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n                >\n                  Tạo Ví\n                </button>\n                <button \n                  onClick={loginToWallet} \n                  className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\"\n                >\n                  Đăng Nhập\n                </button>\n                <button \n                  onClick={checkGuardiansInDatabase} \n                  className=\"bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600\"\n                >\n                  Kiểm Tra Guardians\n                </button>\n              </div>\n            </div>\n            \n            {/* Phần đăng nhập ví, hiển thị khi chưa tạo ví hoặc chưa đăng nhập */}\n            {!multisigAddress && (\n              <div className=\"login-section\">\n                <h2>Ví Moon Wallet</h2>\n                \n                <div className=\"wallet-actions\">\n                  <button \n                    onClick={loginToWallet}\n                    className=\"btn btn-primary\"\n                    disabled={isLoggingIn}\n                  >\n                    {isLoggingIn ? 'Đang đăng nhập...' : 'Đăng nhập bằng WebAuthn'}\n                  </button>\n                  \n                  <button \n                    onClick={() => {setShowLoginForm(false)}}\n                    className=\"btn btn-success\"\n                  >\n                    Tạo ví mới\n                  </button>\n                </div>\n              </div>\n            )}\n            \n            <div className=\"connection-info\">\n              <h2>Thông tin kết nối</h2>\n              <p>Đang kết nối tới: <strong>{RPC_ENDPOINT}</strong></p>\n              <p>Program ID: <strong>{PROGRAM_ID_STRING}</strong></p>\n              <p>Fee Payer: <strong>{projectFeePayerKeypair ? projectFeePayerKeypair.publicKey.toString() : 'Chưa khởi tạo'}</strong></p>\n              <p>Số dư Fee Payer: <strong>{isLoadingFeePayerBalance ? 'Đang tải...' : `${feePayerBalance} SOL`}</strong></p>\n              <div className=\"button-row\">\n                <button \n                  onClick={requestAirdrop}\n                  disabled={isLoadingFeePayerBalance}\n                >\n                  Airdrop 2 SOL cho Fee Payer\n                </button>\n              </div>\n              <div className=\"info-text\">\n                Fee payer của dự án cần có SOL để trả phí giao dịch. Nếu số dư = 0, vui lòng Airdrop trước khi tạo ví hoặc thêm guardian.\n              </div>\n            </div>\n            \n            <div className=\"wallet-info\">\n              <h2>Thông tin ví Moon Wallet</h2>\n              <p>Multisig PDA: {multisigAddress ? multisigAddress.toString() : 'Chưa tạo ví'}</p>\n              <p>Số dư Ví: <strong>{isLoadingPdaBalance ? 'Đang tải...' : `${pdaBalance} SOL`}</strong></p>\n              <p>Guardian PDA: {guardianPDA ? guardianPDA.toString() : 'Chưa có guardian'}</p>\n              <div className=\"button-row\">\n                <button onClick={getWalletInfo}>Xem thông tin ví</button>\n                <div className=\"guardian-selection\">\n                  <select \n                    value={selectedGuardianId} \n                    onChange={(e) => setSelectedGuardianId(parseInt(e.target.value))}\n                    style={{ margin: '0 10px', padding: '8px' }}\n                  >\n                    {existingGuardians.map(id => (\n                      <option key={id} value={id}>Guardian ID {id}</option>\n                    ))}\n                  </select>\n                  <button \n                    onClick={getGuardianInfo}\n                    disabled={!multisigAddress || existingGuardians.length === 0}\n                  >\n                    Xem thông tin guardian\n                  </button>\n                </div>\n                <button \n                  onClick={() => {\n                    if (multisigAddress) {\n                      loadPdaBalance(multisigAddress);\n                      getExistingGuardianIds();\n                    }\n                  }}\n                  disabled={isLoadingPdaBalance || !multisigAddress}\n                >\n                  Cập nhật dữ liệu\n                </button>\n              </div>\n              \n              {/* Thêm TransferForm khi đã đăng nhập vào ví */}\n              {multisigAddress && credentialId && selectedGuardianId && (\n                <div className=\"transfer-section mt-4\">\n                  <TransferForm \n                    walletAddress={multisigAddress.toString()}\n                    credentialId={credentialId}\n                    guardianId={selectedGuardianId}\n                    onTransferSuccess={() => {\n                      // Cập nhật số dư sau khi chuyển tiền thành công\n                      if (multisigAddress) {\n                        loadPdaBalance(multisigAddress);\n                      }\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n            \n            <div className=\"create-wallet-section\">\n              <h2>Tạo ví Moon Wallet</h2>\n              \n              <p className=\"info-text\">Dự án sẽ trả phí giao dịch tạo ví. Bạn không cần có SOL.</p>\n              \n              <div className=\"input-group\">\n                <label>Tên ví: </label>\n                <input \n                  type=\"text\" \n                  value={walletName} \n                  onChange={(e) => setWalletName(e.target.value)} \n                  maxLength={32}\n                  placeholder=\"Nhập tên cho ví của bạn\"\n                />\n              </div>\n              \n              <div className=\"input-group\">\n                <label>Recovery Key: <span className=\"required\">*</span></label>\n                <input \n                  type=\"text\" \n                  value={recoveryPhrase} \n                  onChange={(e) => setRecoveryPhrase(e.target.value)} \n                  placeholder=\"Nhập recovery key (ít nhất 8 ký tự)\"\n                  style={{width: '300px'}}\n                  required\n                />\n                {recoveryPhrase && recoveryPhrase.length < 8 && (\n                  <p className=\"error-message\">Recovery key phải có ít nhất 8 ký tự</p>\n                )}\n              </div>\n              \n              <div className=\"input-group\">\n                <label>Threshold: </label>\n                <input \n                  type=\"number\" \n                  min=\"1\" \n                  max=\"8\" \n                  value={threshold} \n                  onChange={(e) => setThreshold(parseInt(e.target.value))} \n                />\n              </div>\n              \n              <div className=\"input-group\">\n                <label>Tên Guardian: </label>\n                <input \n                  type=\"text\" \n                  value={guardianName} \n                  onChange={(e) => setGuardianName(e.target.value)} \n                  maxLength={32}\n                  placeholder=\"Tên cho guardian đầu tiên (mặc định: Owner)\"\n                />\n              </div>\n              \n              <button \n                onClick={createWalletWithWebAuthn} \n                disabled={isLoadingBalance || !recoveryPhrase || recoveryPhrase.length < 8}\n                className=\"create-wallet-button\"\n              >\n                Tạo ví Moon Wallet\n              </button>\n              \n              {credentialId && (\n                <div className=\"credential-info\">\n                  <p>Credential ID: {credentialId.slice(0, 10)}...</p>\n                </div>\n              )}\n            </div>\n            \n            {/* Thêm phần UI cho việc thêm guardian mới */}\n            {multisigAddress && (\n              <div className=\"add-guardian-section\">\n                <h2>Quản lý Guardian</h2>\n                \n                <div className=\"existing-guardians\">\n                  <p><strong>Các Guardian hiện có:</strong></p>\n                  {existingGuardians.length > 0 ? (\n                    <ul className=\"guardian-list\">\n                      {existingGuardians.map(id => (\n                        <li key={id} className=\"guardian-item\">\n                          Guardian ID {id}\n                          {id === 1 && \" (Owner)\"}\n                        </li>\n                      ))}\n                    </ul>\n                  ) : (\n                    <p>Chưa có Guardian nào</p>\n                  )}\n                </div>\n\n                <div className=\"guardian-actions\">\n                  <button \n                    onClick={generateGuardianInvite}\n                    className=\"primary-button\"\n                  >\n                    Tạo lời mời Guardian mới\n                  </button>\n                  \n                  <button \n                    onClick={() => {\n                      setShowInviteInput(!showInviteInput);\n                      loadPendingInvites();\n                    }}\n                    className=\"toggle-button\"\n                  >\n                    {showInviteInput ? 'Ẩn form nhập mã mời' : 'Hoàn tất đăng ký Guardian'}\n                  </button>\n                  \n                  <button \n                    onClick={getExistingGuardianIds}\n                    className=\"update-button\"\n                  >\n                    Cập nhật danh sách guardian\n                  </button>\n                </div>\n                \n                {/* Form tạo mã mời */}\n                {showQRCode && inviteLink && (\n                  <div className=\"invite-container\">\n                    <h3>Link mời Guardian</h3>\n                    <div className=\"qr-code\">\n                      <QRCodeSVG \n                        value={inviteLink}\n                        size={200}\n                        level=\"H\"\n                        includeMargin={true}\n                      />\n                    </div>\n                    <div className=\"invite-info\">\n                      <p>Link mời: <a href={inviteLink} target=\"_blank\" rel=\"noopener noreferrer\">{inviteLink}</a></p>\n                      <p>Mã mời: <strong>{inviteCode}</strong></p>\n                      <p className=\"note\">Gửi link này cho người bạn muốn thêm làm guardian. Họ sẽ hoàn thành quá trình đăng ký và sau đó bạn có thể hoàn tất việc thêm guardian bằng mã mời.</p>\n                    </div>\n                    <button onClick={() => {\n                      setShowQRCode(false);\n                      setInviteLink('');\n                      setInviteCode('');\n                    }}>Đóng</button>\n                  </div>\n                )}\n                \n                {/* Form nhập mã mời đã đăng ký */}\n                {showInviteInput && (\n                  <div className=\"invite-input-container\">\n                    <h3>Hoàn tất đăng ký Guardian</h3>\n                    \n                    {pendingInvites.length > 0 ? (\n                      <div className=\"pending-invites\">\n                        <p>Các mã mời đang chờ xử lý:</p>\n                        <div className=\"invite-codes\">\n                          {pendingInvites.map(code => (\n                            <div key={code} className=\"invite-code-item\">\n                              <span className=\"code\">{code}</span>\n                              <button \n                                onClick={() => completeGuardianSetup(code)}\n                                className=\"complete-button\"\n                              >\n                                Hoàn tất\n                              </button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    ) : (\n                      <p>Không có mã mời nào đang chờ xử lý.</p>\n                    )}\n                    \n                    <div className=\"manual-input\">\n                      <p>Hoặc nhập mã mời thủ công:</p>\n                      <input \n                        type=\"text\" \n                        placeholder=\"Nhập mã mời\" \n                        value={inviteCode}\n                        onChange={(e) => setInviteCode(e.target.value)}\n                        className=\"invite-input\"\n                      />\n                      <button \n                        onClick={() => inviteCode && completeGuardianSetup(inviteCode)}\n                        disabled={!inviteCode}\n                        className=\"complete-button\"\n                      >\n                        Hoàn tất đăng ký\n                      </button>\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"guardian-test-actions mt-3\" style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>\n                  <button onClick={() => testGuardianInfo(1)} className=\"btn btn-sm btn-info\">Kiểm tra Guardian 1</button>\n                  <button onClick={() => testGuardianInfo(2)} className=\"btn btn-sm btn-info\">Kiểm tra Guardian 2</button>\n                  <button onClick={() => testGuardianInfo(3)} className=\"btn btn-sm btn-info\">Kiểm tra Guardian 3</button>\n                </div>\n              </div>\n            )}\n            \n            {/* Chức năng nạp tiền vào ví multisig */}\n            <div className=\"card mb-3\">\n              <div className=\"card-header bg-primary text-white\">\n                <h5 className=\"mb-0\">Nạp tiền vào ví Multisig</h5>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"form-group mb-3\">\n                  <label htmlFor=\"depositAmount\">Số lượng SOL:</label>\n                  <input\n                    type=\"number\"\n                    id=\"depositAmount\"\n                    className=\"form-control\"\n                    step=\"0.01\"\n                    min=\"0.01\"\n                    value={depositAmount}\n                    onChange={(e) => setDepositAmount(parseFloat(e.target.value))}\n                    placeholder=\"Nhập số lượng SOL\"\n                  />\n                </div>\n                <button \n                  className=\"btn btn-primary w-100\"\n                  onClick={depositToMultisig}\n                  disabled={!multisigAddress}\n                >\n                  Nạp tiền vào ví\n                </button>\n              </div>\n            </div>\n            \n            {/* Chức năng rút tiền từ ví multisig */}\n            <div className=\"card mb-3\">\n              <div className=\"card-header bg-primary text-white\">\n                <h5 className=\"mb-0\">Rút tiền từ ví Multisig</h5>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"form-group mb-3\">\n                  <label htmlFor=\"recipientAddress\">Địa chỉ người nhận:</label>\n                  <input\n                    type=\"text\"\n                    id=\"recipientAddress\"\n                    className=\"form-control\"\n                    value={recipientAddress}\n                    onChange={(e) => setRecipientAddress(e.target.value)}\n                    placeholder=\"Nhập địa chỉ ví người nhận\"\n                  />\n                </div>\n                <div className=\"form-group mb-3\">\n                  <label htmlFor=\"withdrawAmount\">Số lượng SOL:</label>\n                  <input\n                    type=\"number\"\n                    id=\"withdrawAmount\"\n                    className=\"form-control\"\n                    step=\"0.01\"\n                    min=\"0.01\"\n                    value={withdrawAmount}\n                    onChange={(e) => setWithdrawAmount(parseFloat(e.target.value))}\n                    placeholder=\"Nhập số lượng SOL\"\n                  />\n                </div>\n                <button \n                  className=\"btn btn-primary w-100\"\n                  onClick={withdrawFromMultisig}\n                  disabled={!multisigAddress}\n                >\n                  Rút tiền từ ví\n                </button>\n              </div>\n            </div>\n            \n            {transactionStatus && (\n              <div className=\"transaction-status\">\n                <h3>Trạng thái giao dịch</h3>\n                <p style={{whiteSpace: 'pre-line'}}>{transactionStatus}</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}