{"ast":null,"code":"var _jsxFileName = \"/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicKey, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createTransferTx, createSecp256r1Instruction, programID, SECP256R1_PROGRAM_ID } from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Thêm hằng số cho chuẩn hóa signature\nconst SECP256R1_ORDER = new BN('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551', 16);\nconst SECP256R1_HALF_ORDER = SECP256R1_ORDER.shrn(1);\n\n/**\n * Chuẩn hóa chữ ký về dạng Low-S\n * @param signature - Chữ ký raw\n * @returns Chữ ký đã chuẩn hóa\n */\nfunction normalizeSignatureToLowS(signature) {\n  const r = signature.slice(0, 32);\n  const s = signature.slice(32, 64);\n  const sBN = new BN(s);\n\n  // Kiểm tra nếu s > half_order\n  if (sBN.gt(SECP256R1_HALF_ORDER)) {\n    console.log(\"Chuẩn hóa signature về dạng Low-S\");\n    // Tính s' = order - s\n    const sNormalized = SECP256R1_ORDER.sub(sBN);\n    const sNormalizedBuffer = sNormalized.toArrayLike(Buffer, 'be', 32);\n    return Buffer.concat([r, sNormalizedBuffer]);\n  }\n  console.log(\"Signature đã ở dạng Low-S\");\n  return signature;\n}\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = derSignature => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n\n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n\n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n\n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n\n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  return rawSignature;\n};\n\n// Interface cho props của component\n// Enum cho các trạng thái giao dịch\nvar TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[\"IDLE\"] = \"idle\";\n  TransactionStatus[\"PREPARING\"] = \"preparing\";\n  TransactionStatus[\"SIGNING\"] = \"signing\";\n  TransactionStatus[\"BUILDING_TX\"] = \"building_tx\";\n  TransactionStatus[\"SUBMITTING\"] = \"submitting\";\n  TransactionStatus[\"CONFIRMING\"] = \"confirming\";\n  TransactionStatus[\"SUCCESS\"] = \"success\";\n  TransactionStatus[\"ERROR\"] = \"error\";\n  return TransactionStatus;\n}(TransactionStatus || {});\nexport const TransferForm = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  _s();\n  // State\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [isTransferring, setIsTransferring] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [nonce, setNonce] = useState(0);\n  const [txStatus, setTxStatus] = useState(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState('');\n\n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n\n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    checkPrograms();\n  }, [connection]);\n\n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n\n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n\n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n\n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n\n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = e => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n\n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = e => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n\n  // Xử lý khi submit form\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        throw new Error(errorMsg);\n      }\n\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n\n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n\n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n\n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n\n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n\n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n\n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n\n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n\n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n\n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n\n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(null, messageString, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n\n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n\n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64.replace(/-/g, '+').replace(/_/g, '/').padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          console.log('Challenge from WebAuthn (hex):', challengeBytes.toString('hex'));\n\n          // Kiểm tra xem challenge từ WebAuthn có giống với hash của message không\n          const originalHashHex = Buffer.from(messageHashBytes).toString('hex');\n          const challengeHex = challengeBytes.toString('hex');\n          console.log('Original hash vs WebAuthn challenge:');\n          console.log('- Original hash:', originalHashHex);\n          console.log('- WebAuthn challenge:', challengeHex);\n          console.log('- Match?', originalHashHex === challengeHex);\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      setSuccess(''); // Xóa thông báo thành công tạm thời\n\n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n\n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n\n      // Thêm bước chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n\n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n\n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n\n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n\n              // Tạo instruction secp256r1\n              setTxStatus(TransactionStatus.BUILDING_TX);\n\n              // Thêm tham số để thử với public key bị đảo\n              const secp256r1Ix = createSecp256r1Instruction(Buffer.from(messageBytes),\n              // message gốc (không hash)\n              webAuthnPubKey,\n              // publicKey\n              normalizedSignature,\n              // signature đã chuẩn hóa\n              true // Thử đảo public key\n              );\n              console.log(\"Secp256r1 instruction data:\", {\n                programId: secp256r1Ix.programId.toString(),\n                dataLength: secp256r1Ix.data.length,\n                dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n                pubkeyLength: webAuthnPubKey.length,\n                signatureLength: normalizedSignature.length,\n                messageLength: messageBytes.length\n              });\n\n              // Tạo ví tạm để trả phí giao dịch\n              const feePayer = web3.Keypair.generate();\n\n              // Xin SOL airdrop để trả phí\n              try {\n                const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n                );\n                await connection.confirmTransaction(airdropSignature);\n\n                // Kiểm tra số dư sau khi airdrop\n                const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n                console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n                if (feePayerBalance === 0) {\n                  throw new Error('Không thể airdrop SOL cho fee payer');\n                }\n              } catch (airdropError) {\n                console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n                // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n              }\n\n              // Tiếp tục quá trình xử lý transaction như bình thường\n              const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, Buffer.from(messageBytes),\n              // Sử dụng messageBytes (message gốc, chưa hash) cho verify_and_execute\n              feePayer.publicKey);\n\n              // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n\n              // Đặt fee payer và blockhash\n              transferTx.feePayer = feePayer.publicKey;\n              const {\n                blockhash\n              } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n\n              // Ký transaction bằng fee payer\n              transferTx.sign(feePayer);\n\n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: feePayer.publicKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n\n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              try {\n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true,\n                  // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                console.log('Transaction đã được gửi với ID:', transactionId);\n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n\n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n\n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n\n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n\n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n\n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n\n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n\n        // Lấy dữ liệu tài khoản guardian để lấy public key\n        const guardianAccount = await connection.getAccountInfo(guardianPDA);\n        if (!guardianAccount) {\n          throw new Error('Không thể tìm thấy thông tin guardian');\n        }\n\n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n\n        let webAuthnPubKey;\n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n\n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n\n        // Tạo instruction secp256r1\n        setTxStatus(TransactionStatus.BUILDING_TX);\n\n        // Thêm tham số để thử với public key bị đảo\n        const secp256r1Ix = createSecp256r1Instruction(Buffer.from(messageBytes),\n        // message gốc (không hash)\n        webAuthnPubKey,\n        // publicKey\n        normalizedSignature,\n        // signature đã chuẩn hóa\n        true // Thử đảo public key\n        );\n        console.log(\"Secp256r1 instruction data:\", {\n          programId: secp256r1Ix.programId.toString(),\n          dataLength: secp256r1Ix.data.length,\n          dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n          pubkeyLength: webAuthnPubKey.length,\n          signatureLength: normalizedSignature.length,\n          messageLength: messageBytes.length\n        });\n\n        // Tạo ví tạm để trả phí giao dịch\n        const feePayer = web3.Keypair.generate();\n\n        // Xin SOL airdrop để trả phí\n        try {\n          const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n          );\n          await connection.confirmTransaction(airdropSignature);\n\n          // Kiểm tra số dư sau khi airdrop\n          const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n          console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n          if (feePayerBalance === 0) {\n            throw new Error('Không thể airdrop SOL cho fee payer');\n          }\n        } catch (airdropError) {\n          console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n          // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n        }\n\n        // Tạo transaction với verify_and_execute instruction\n        const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, Buffer.from(messageBytes),\n        // Sử dụng messageBytes (chưa hash) cho verify_and_execute\n        feePayer.publicKey);\n\n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n\n        // Đặt fee payer và blockhash\n        transferTx.feePayer = feePayer.publicKey;\n        const {\n          blockhash\n        } = await connection.getLatestBlockhash();\n        transferTx.recentBlockhash = blockhash;\n\n        // Ký transaction bằng fee payer\n        transferTx.sign(feePayer);\n\n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: feePayer.publicKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n\n        // Gửi transaction\n        setTxStatus(TransactionStatus.SUBMITTING);\n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true,\n            // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          console.log('Transaction đã được gửi với ID:', transactionId);\n          setTxId(transactionId);\n          console.log('Transaction ID:', transactionId);\n\n          // Chờ xác nhận\n          setTxStatus(TransactionStatus.CONFIRMING);\n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n          if (confirmation.value.err) {\n            throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n          }\n\n          // Hiển thị thông báo thành công\n          setTxStatus(TransactionStatus.SUCCESS);\n          setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n          setAmount('');\n          setDestinationAddress('');\n\n          // Gọi callback nếu có\n          if (onTransferSuccess) {\n            onTransferSuccess();\n          }\n        } catch (sendError) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n\n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n\n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n\n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n\n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n\n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-note\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"L\\u01B0u \\xFD:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 14\n          }, this), \" B\\u1EA1n \\u0111ang k\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn validator c\\u1EE5c b\\u1ED9.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 845,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"C\\u1EA7n kh\\u1EDFi \\u0111\\u1ED9ng validator v\\u1EDBi c\\xE1c tham s\\u1ED1 \\u0111\\xFAng \\u0111\\u1EC3 c\\xE0i \\u0111\\u1EB7t ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Thêm các hàm tiện ích\n  const findMultisigPDA = async () => {\n    const credentialId = localStorage.getItem('currentCredentialId');\n    if (!credentialId) {\n      throw new Error(\"Không tìm thấy credential ID\");\n    }\n    return getMultisigPDA(credentialId);\n  };\n  const findGuardianPDA = async (multisigPDA, guardianId) => {\n    return getGuardianPDA(multisigPDA, guardianId);\n  };\n\n  // Hàm chuyển đổi base64Url thành Buffer\n  const base64UrlToBuffer = base64Url => {\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const binaryString = window.atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transfer-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chuy\\u1EC3n SOL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 882,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"K\\u1EBFt n\\u1ED1i \\u0111\\u1EBFn: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: connectionEndpoint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"S\\u1ED1 d\\u01B0 hi\\u1EC7n t\\u1EA1i: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pdaBalance.toFixed(5), \" SOL\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: !isMoonWalletAvailable ? \"warning-message\" : \"info-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tr\\u1EA1ng th\\xE1i ch\\u01B0\\u01A1ng tr\\xECnh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: isMoonWalletAvailable ? \"status-ok\" : \"status-error\",\n              children: isMoonWalletAvailable ? '✅' : '❌'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 893,\n              columnNumber: 15\n            }, this), \"MoonWallet: \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: programID.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 896,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 892,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 891,\n          columnNumber: 11\n        }, this), renderValidatorNote(), !isMoonWalletAvailable && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"L\\u01B0u \\xFD:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 18\n            }, this), \" Ch\\u01B0\\u01A1ng tr\\xECnh MoonWallet ch\\u01B0a \\u0111\\u01B0\\u1EE3c c\\xE0i \\u0111\\u1EB7t tr\\xEAn validator.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u0110\\u1EC3 c\\xE0i \\u0111\\u1EB7t, ch\\u1EA1y validator v\\u1EDBi l\\u1EC7nh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"solana-test-validator --bpf-program \", programID.toString(), \" path/to/moon_wallet.so\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 884,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"destination\",\n          children: \"\\u0110\\u1ECBa ch\\u1EC9 \\u0111\\xEDch:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 916,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"destination\",\n          value: destinationAddress,\n          onChange: handleDestinationChange,\n          placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa ch\\u1EC9 Solana\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amount\",\n          value: amount,\n          onChange: handleAmountChange,\n          placeholder: \"V\\xED d\\u1EE5: 0.1\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 930,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 928,\n        columnNumber: 9\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 941,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 19\n      }, this), txStatus !== TransactionStatus.IDLE && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: renderStatusMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 13\n        }, this), txStatus === TransactionStatus.CONFIRMING && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"\\u0110ang x\\xE1c nh\\u1EADn...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 15\n        }, this), txId && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"transaction-id\",\n          children: [\"ID Giao d\\u1ECBch: \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://explorer.solana.com/tx/${txId}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: [txId.slice(0, 8), \"...\", txId.slice(-8)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 952,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"primary-button\",\n        disabled: isTransferring || !isMoonWalletAvailable,\n        children: isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 967,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 881,\n    columnNumber: 5\n  }, this);\n};\n_s(TransferForm, \"03LlHdEfN95TQ4IN3Tx5AKL7gOo=\");\n_c = TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","PublicKey","SendTransactionError","web3","LAMPORTS_PER_SOL","createTransferTx","createSecp256r1Instruction","programID","SECP256R1_PROGRAM_ID","getWebAuthnAssertion","getGuardianPDA","getMultisigPDA","getWalletByCredentialId","Buffer","BN","jsxDEV","_jsxDEV","SECP256R1_ORDER","SECP256R1_HALF_ORDER","shrn","normalizeSignatureToLowS","signature","r","slice","s","sBN","gt","console","log","sNormalized","sub","sNormalizedBuffer","toArrayLike","concat","convertDERtoRaw","derSignature","error","Uint8Array","rLength","rStart","rEnd","sLength","sStart","sEnd","rPadded","sPadded","length","set","rawSignature","TransactionStatus","TransferForm","walletAddress","credentialId","guardianId","onTransferSuccess","onTransferError","connection","pdaBalance","_s","destinationAddress","setDestinationAddress","amount","setAmount","isTransferring","setIsTransferring","setError","success","setSuccess","walletBalance","setWalletBalance","nonce","setNonce","txStatus","setTxStatus","IDLE","txId","setTxId","isMoonWalletAvailable","setIsMoonWalletAvailable","connectionEndpoint","setConnectionEndpoint","checkPrograms","endpoint","rpcEndpoint","moonWalletInfo","getAccountInfo","warn","toString","undefined","loadWalletInfo","multisigPDA","accountInfo","transactionNonce","data","readBigUInt64LE","Number","handleDestinationChange","e","target","value","handleAmountChange","test","handleSubmit","preventDefault","PREPARING","errorMsg","Error","parseFloat","amountLamports","Math","floor","destinationPublicKey","nextNonce","timestamp","Date","now","formattedAmount","messageString","messageBytes","TextEncoder","encode","Array","from","map","b","padStart","join","messageHash","crypto","subtle","digest","messageHashBytes","toBase58","guardianPDA","SIGNING","assertion","TextDecoder","decode","clientDataJSON","clientDataObj","JSON","parse","challenge","challengeBase64","base64Standard","replace","padEnd","challengeBytes","originalHashHex","challengeHex","byteLength","normalizedSignature","credentialMapping","guardianPublicKey","localStorageData","localStorage","getItem","localMapping","webAuthnPubKey","BUILDING_TX","secp256r1Ix","programId","dataLength","dataHex","substring","pubkeyLength","signatureLength","messageLength","feePayer","Keypair","generate","airdropSignature","requestAirdrop","publicKey","confirmTransaction","feePayerBalance","getBalance","airdropError","transferTx","instructions","unshift","blockhash","getLatestBlockhash","recentBlockhash","sign","ix","keys","k","pubkey","isSigner","isWritable","dataSize","SUBMITTING","transactionId","sendRawTransaction","serialize","skipPreflight","preflightCommitment","CONFIRMING","confirmation","err","stringify","SUCCESS","sendError","message","logs","isArray","logError","errorMessage","includes","localStorageError","guardianAccount","hasWebAuthnPubKey","ERROR","renderStatusMessage","renderValidatorNote","className","children","fileName","_jsxFileName","lineNumber","columnNumber","findMultisigPDA","findGuardianPDA","base64UrlToBuffer","base64Url","base64","binaryString","window","atob","bytes","i","charCodeAt","buffer","toFixed","onSubmit","htmlFor","type","id","onChange","placeholder","disabled","required","href","rel","_c","$RefreshReg$"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, Connection, SendTransactionError } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { \n  createTransferTx, \n  createSecp256r1Instruction,\n  programID,\n  SECP256R1_PROGRAM_ID\n} from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\nimport { getWalletByCredentialId } from '../firebase/webAuthnService';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { Button } from '@chakra-ui/react';\nimport { toast } from 'react-hot-toast';\n\n// Thêm hằng số cho chuẩn hóa signature\nconst SECP256R1_ORDER = new BN('FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551', 16);\nconst SECP256R1_HALF_ORDER = SECP256R1_ORDER.shrn(1);\n\n/**\n * Chuẩn hóa chữ ký về dạng Low-S\n * @param signature - Chữ ký raw\n * @returns Chữ ký đã chuẩn hóa\n */\nfunction normalizeSignatureToLowS(signature: Buffer): Buffer {\n  const r = signature.slice(0, 32);\n  const s = signature.slice(32, 64);\n  \n  const sBN = new BN(s);\n  \n  // Kiểm tra nếu s > half_order\n  if (sBN.gt(SECP256R1_HALF_ORDER)) {\n    console.log(\"Chuẩn hóa signature về dạng Low-S\");\n    // Tính s' = order - s\n    const sNormalized = SECP256R1_ORDER.sub(sBN);\n    const sNormalizedBuffer = sNormalized.toArrayLike(Buffer, 'be', 32);\n    return Buffer.concat([r, sNormalizedBuffer]);\n  }\n  \n  console.log(\"Signature đã ở dạng Low-S\");\n  return signature;\n}\n\n// Hàm chuyển đổi chữ ký DER sang raw (r, s) format\nconst convertDERtoRaw = (derSignature: Uint8Array): Uint8Array => {\n  // Đảm bảo đây là DER signature\n  if (derSignature[0] !== 0x30) {\n    console.error('Chữ ký không phải định dạng DER');\n    return new Uint8Array(64); // Trả về buffer rỗng nếu không đúng định dạng\n  }\n  \n  // Parse DER format\n  // Format: 0x30 [total-length] 0x02 [r-length] [r] 0x02 [s-length] [s]\n  const rLength = derSignature[3];\n  const rStart = 4;\n  const rEnd = rStart + rLength;\n  \n  const sLength = derSignature[rEnd + 1];\n  const sStart = rEnd + 2;\n  const sEnd = sStart + sLength;\n  \n  // Trích xuất r và s\n  let r = derSignature.slice(rStart, rEnd);\n  let s = derSignature.slice(sStart, sEnd);\n  \n  // Cần đảm bảo r và s đúng 32 bytes\n  // - Nếu dài hơn 32 bytes, cắt bớt (thường r và s có thể có padding)\n  // - Nếu ngắn hơn 32 bytes, thêm padding 0 vào đầu\n  const rPadded = new Uint8Array(32);\n  const sPadded = new Uint8Array(32);\n  \n  if (r.length <= 32) {\n    // Trường hợp r ngắn hơn 32 bytes, thêm padding\n    rPadded.set(r, 32 - r.length);\n  } else {\n    // Trường hợp r dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    rPadded.set(r.slice(r.length - 32));\n  }\n  \n  if (s.length <= 32) {\n    // Trường hợp s ngắn hơn 32 bytes, thêm padding\n    sPadded.set(s, 32 - s.length);\n  } else {\n    // Trường hợp s dài hơn 32 bytes, cắt bớt (thường là byte đầu tiên là 0)\n    sPadded.set(s.slice(s.length - 32));\n  }\n  \n  // Nối r và s lại\n  const rawSignature = new Uint8Array(64);\n  rawSignature.set(rPadded);\n  rawSignature.set(sPadded, 32);\n  \n  console.log('Đã chuyển đổi signature từ DER sang raw format:');\n  console.log('- DER length:', derSignature.length);\n  console.log('- Raw length:', rawSignature.length);\n  \n  return rawSignature;\n};\n\n// Interface cho props của component\ninterface TransferFormProps {\n  walletAddress: string;  \n  credentialId: string;   \n  guardianId: number;     \n  onTransferSuccess?: () => void;\n  onTransferError?: (error: Error) => void;\n  // Thêm connection vào props\n  connection: Connection;\n  // Thêm pdaBalance để hiển thị số dư chính xác\n  pdaBalance?: number;\n}\n\n// Enum cho các trạng thái giao dịch\nenum TransactionStatus {\n  IDLE = 'idle',\n  PREPARING = 'preparing',\n  SIGNING = 'signing',\n  BUILDING_TX = 'building_tx',\n  SUBMITTING = 'submitting',\n  CONFIRMING = 'confirming',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\nexport const TransferForm: React.FC<TransferFormProps> = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  // State\n  const [destinationAddress, setDestinationAddress] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [isTransferring, setIsTransferring] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [nonce, setNonce] = useState<number>(0);\n  const [txStatus, setTxStatus] = useState<TransactionStatus>(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState<string>('');\n  const [isMoonWalletAvailable, setIsMoonWalletAvailable] = useState<boolean>(false);\n  const [connectionEndpoint, setConnectionEndpoint] = useState<string>('');\n  \n  // Kiểm tra chương trình MoonWallet\n  useEffect(() => {\n    const checkPrograms = async () => {\n      try {\n        // Lấy endpoint của connection để hiển thị\n        const endpoint = connection.rpcEndpoint;\n        setConnectionEndpoint(endpoint);\n        console.log(\"Đang kết nối đến:\", endpoint);\n        \n        // Chỉ kiểm tra chương trình MoonWallet\n        try {\n          const moonWalletInfo = await connection.getAccountInfo(programID);\n          setIsMoonWalletAvailable(moonWalletInfo !== null);\n          \n          if (moonWalletInfo === null) {\n            console.warn(\"Chương trình MoonWallet không tồn tại trên validator này!\");\n          } else {\n            console.log(\"Đã tìm thấy chương trình MoonWallet:\", programID.toString());\n          }\n        } catch (error) {\n          console.error(\"Lỗi khi kiểm tra chương trình MoonWallet:\", error);\n          setIsMoonWalletAvailable(false);\n        }\n      } catch (error) {\n        console.error(\"Lỗi khi kiểm tra chương trình:\", error);\n      }\n    };\n    \n    checkPrograms();\n  }, [connection]);\n  \n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n  \n  // Lấy số dư ví và nonce hiện tại từ blockchain\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n        \n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n        \n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        \n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        \n        try {\n          // Đọc nonce từ account data (từ vị trí thích hợp theo layout)\n          // Giả sử nonce nằm ở offset 18 (8 bytes for discriminator + 1 byte threshold + 1 byte guardian_count + 8 bytes recovery_nonce)\n          const transactionNonce = accountInfo.data.readBigUInt64LE(18);\n          setNonce(Number(transactionNonce));\n          console.log(\"Transaction nonce hiện tại:\", Number(transactionNonce));\n        } catch (error) {\n          console.error(\"Lỗi khi đọc nonce từ account data:\", error);\n          // Fallback về nonce = 0 nếu không đọc được\n          setNonce(0);\n        }\n        \n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    \n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n  \n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n  \n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n  \n  // Xử lý khi submit form\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    \n    try {\n      // Kiểm tra nếu MoonWallet program không khả dụng\n      if (!isMoonWalletAvailable) {\n        let errorMsg = \"Không thể thực hiện giao dịch vì chương trình MoonWallet không tồn tại trên validator.\\n\";\n        errorMsg += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n        errorMsg += `Đảm bảo chạy validator với lệnh:\\n`;\n        errorMsg += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n        \n        throw new Error(errorMsg);\n      }\n      \n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      \n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n      \n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n      \n      // Kiểm tra số dư\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n      \n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey: PublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n      \n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n      \n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // Tạo message chuẩn theo format phía backend yêu cầu:\n      // \"transfer:{amount}_SOL_to_{destination},nonce:{nonce},timestamp:{timestamp}\"\n      const formattedAmount = parseFloat(amount).toString(); // Đảm bảo định dạng số không có số 0 thừa\n      const messageString = `transfer:${formattedAmount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message gốc:', messageString);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      \n      console.log('Message bytes (UTF-8):', Array.from(messageBytes));\n      console.log('Message bytes (hex):', Array.from(messageBytes).map(b => b.toString(16).padStart(2, '0')).join(''));\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      console.log('Message hash bytes (hex):', Buffer.from(messageHashBytes).toString('hex'));\n      console.log('Message hash bytes (array):', Array.from(messageHashBytes));\n      \n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n      \n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n      \n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n      \n      // Hiển thị thông báo\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      setError(''); // Xóa thông báo lỗi trước đó\n      setSuccess('Đang hiển thị danh sách khóa WebAuthn, vui lòng chọn khóa để xác thực giao dịch...');\n      \n      // Sử dụng trực tiếp message gốc làm dữ liệu để ký với WebAuthn\n      // WebAuthn sẽ tự động hash dữ liệu này với SHA-256 trước khi ký\n      const assertion = await getWebAuthnAssertion(null, messageString, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      console.log('ClientDataJSON:', new TextDecoder().decode(assertion.clientDataJSON));\n      \n      // Phân tích clientDataJSON để hiểu cách WebAuthn hash message\n      try {\n        const clientDataObj = JSON.parse(new TextDecoder().decode(assertion.clientDataJSON));\n        console.log('ClientData object:', clientDataObj);\n        \n        // Lấy challenge từ clientData\n        if (clientDataObj.challenge) {\n          const challengeBase64 = clientDataObj.challenge;\n          // Fix lỗi base64url encoding\n          const base64Standard = challengeBase64\n            .replace(/-/g, '+')\n            .replace(/_/g, '/')\n            .padEnd(challengeBase64.length + (4 - challengeBase64.length % 4) % 4, '=');\n          const challengeBytes = Buffer.from(base64Standard, 'base64');\n          console.log('Challenge from WebAuthn (hex):', challengeBytes.toString('hex'));\n          \n          // Kiểm tra xem challenge từ WebAuthn có giống với hash của message không\n          const originalHashHex = Buffer.from(messageHashBytes).toString('hex');\n          const challengeHex = challengeBytes.toString('hex');\n          console.log('Original hash vs WebAuthn challenge:');\n          console.log('- Original hash:', originalHashHex);\n          console.log('- WebAuthn challenge:', challengeHex);\n          console.log('- Match?', originalHashHex === challengeHex);\n        }\n      } catch (e) {\n        console.error('Lỗi khi phân tích clientDataJSON:', e);\n      }\n      \n      setSuccess(''); // Xóa thông báo thành công tạm thời\n      \n      // Lấy chữ ký từ WebAuthn assertion và chuyển đổi từ DER sang raw format\n      console.log('Signature từ WebAuthn (DER format):', Buffer.from(assertion.signature).toString('hex'));\n      console.log('Độ dài signature ban đầu:', assertion.signature.byteLength);\n      \n      // Chuyển đổi signature từ DER sang raw format (r, s)\n      const rawSignature = convertDERtoRaw(assertion.signature);\n      const signature = Buffer.from(rawSignature);\n      \n      console.log('Signature sau khi chuyển đổi (raw format):', signature.toString('hex'));\n      console.log('Độ dài signature sau khi chuyển đổi:', signature.length);\n      \n      // Thêm bước chuẩn hóa signature về dạng Low-S\n      const normalizedSignature = normalizeSignatureToLowS(signature);\n      console.log(\"Signature sau khi chuẩn hóa (Low-S format):\", normalizedSignature.toString(\"hex\"));\n      \n      // LẤY WEBAUTHN PUBLIC KEY TỪ FIREBASE\n      console.log('Lấy WebAuthn public key từ Firebase...');\n      const credentialMapping = await getWalletByCredentialId(credentialId);\n      \n      if (!credentialMapping || !credentialMapping.guardianPublicKey || credentialMapping.guardianPublicKey.length === 0) {\n        // Thử tìm trong localStorage nếu không có trong Firebase\n        console.log('Không tìm thấy trong Firebase, thử tìm trong localStorage...');\n        try {\n          const localStorageData = localStorage.getItem('webauthn_credential_' + credentialId);\n          if (localStorageData) {\n            const localMapping = JSON.parse(localStorageData);\n            if (localMapping && localMapping.guardianPublicKey && localMapping.guardianPublicKey.length > 0) {\n              console.log('Đã tìm thấy WebAuthn public key trong localStorage:', localMapping);\n              \n              // Tạo webAuthnPubKey từ dữ liệu trong localStorage\n              const webAuthnPubKey = Buffer.from(new Uint8Array(localMapping.guardianPublicKey));\n              \n              // Kiểm tra độ dài\n              if (webAuthnPubKey.length !== 33) {\n                console.warn(`WebAuthn public key từ localStorage có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n              }\n              \n              // Tạo instruction secp256r1\n              setTxStatus(TransactionStatus.BUILDING_TX);\n              \n              // Thêm tham số để thử với public key bị đảo\n              const secp256r1Ix = createSecp256r1Instruction(\n                Buffer.from(messageBytes), // message gốc (không hash)\n                webAuthnPubKey, // publicKey\n                normalizedSignature, // signature đã chuẩn hóa\n                true // Thử đảo public key\n              );\n              \n              console.log(\"Secp256r1 instruction data:\", {\n                programId: secp256r1Ix.programId.toString(),\n                dataLength: secp256r1Ix.data.length,\n                dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n                pubkeyLength: webAuthnPubKey.length,\n                signatureLength: normalizedSignature.length,\n                messageLength: messageBytes.length\n              });\n              \n              // Tạo ví tạm để trả phí giao dịch\n              const feePayer = web3.Keypair.generate();\n              \n              // Xin SOL airdrop để trả phí\n              try {\n                const airdropSignature = await connection.requestAirdrop(\n                  feePayer.publicKey,\n                  web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n                );\n                await connection.confirmTransaction(airdropSignature);\n                \n                // Kiểm tra số dư sau khi airdrop\n                const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n                console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n                \n                if (feePayerBalance === 0) {\n                  throw new Error('Không thể airdrop SOL cho fee payer');\n                }\n              } catch (airdropError) {\n                console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n                // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n              }\n              \n              // Tiếp tục quá trình xử lý transaction như bình thường\n              const transferTx = createTransferTx(\n                multisigPDA,\n                guardianPDA,\n                destinationPublicKey,\n                amountLamports,\n                nextNonce,\n                timestamp,\n                Buffer.from(messageBytes), // Sử dụng messageBytes (message gốc, chưa hash) cho verify_and_execute\n                feePayer.publicKey\n              );\n              \n              // QUAN TRỌNG: Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n              transferTx.instructions.unshift(secp256r1Ix);\n              \n              // Đặt fee payer và blockhash\n              transferTx.feePayer = feePayer.publicKey;\n              const { blockhash } = await connection.getLatestBlockhash();\n              transferTx.recentBlockhash = blockhash;\n              \n              // Ký transaction bằng fee payer\n              transferTx.sign(feePayer);\n              \n              // Log transaction để debug\n              console.log(\"Transaction info:\", {\n                feePayer: feePayer.publicKey.toString(),\n                instructions: transferTx.instructions.map(ix => ({\n                  programId: ix.programId.toString(),\n                  keys: ix.keys.map(k => ({\n                    pubkey: k.pubkey.toString(),\n                    isSigner: k.isSigner,\n                    isWritable: k.isWritable\n                  })),\n                  dataSize: ix.data.length\n                }))\n              });\n              \n              // Gửi transaction\n              setTxStatus(TransactionStatus.SUBMITTING);\n              \n              try {\n                const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n                  skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n                  preflightCommitment: 'confirmed'\n                });\n                \n                console.log('Transaction đã được gửi với ID:', transactionId);\n                \n                setTxId(transactionId);\n                console.log('Transaction ID:', transactionId);\n                \n                // Chờ xác nhận\n                setTxStatus(TransactionStatus.CONFIRMING);\n                \n                const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n                \n                if (confirmation.value.err) {\n                  throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n                }\n                \n                // Hiển thị thông báo thành công\n                setTxStatus(TransactionStatus.SUCCESS);\n                setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n                setAmount('');\n                setDestinationAddress('');\n                \n                // Gọi callback nếu có\n                if (onTransferSuccess) {\n                  onTransferSuccess();\n                }\n                \n                return; // Không tiếp tục chạy code bên dưới\n              } catch (sendError: any) {\n                // Xử lý lỗi SendTransactionError\n                if (sendError instanceof SendTransactionError) {\n                  console.error(\"Transaction simulation failed:\", sendError);\n                  console.error(\"Error details:\", sendError.message);\n                  \n                  if (sendError.logs) {\n                    console.error(\"Transaction logs:\", sendError.logs);\n                  }\n                  \n                  // Cố gắng lấy logs chi tiết\n                  let logs = \"\";\n                  try {\n                    if (sendError.logs && Array.isArray(sendError.logs)) {\n                      logs = sendError.logs.join('\\n');\n                    } else {\n                      logs = \"Không có logs chi tiết.\";\n                    }\n                  } catch (logError) {\n                    logs = \"Không thể lấy logs chi tiết.\";\n                  }\n                  \n                  // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n                  let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n                  \n                  if (logs.includes(\"Attempt to load a program that does not exist\")) {\n                    // Xử lý lỗi chương trình không tồn tại\n                    if (logs.includes(programID.toString())) {\n                      errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n                    } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                      errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                      errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                      errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                      errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n                    } else {\n                      errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                      errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                      errorMessage += `Thông tin kết nối:\\n`;\n                      errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    }\n                  } else {\n                    // Lỗi khác\n                    errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                    errorMessage += `Thông tin kết nối:\\n`;\n                    errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n                    errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n                  }\n                  \n                  throw new Error(errorMessage);\n                } else {\n                  throw sendError;\n                }\n              }\n            }\n          }\n        } catch (localStorageError) {\n          console.error('Lỗi khi đọc từ localStorage:', localStorageError);\n        }\n        \n        // Nếu không tìm thấy trong localStorage, thử lấy từ account data\n        console.warn('Không tìm thấy WebAuthn public key trong localStorage, thử lấy từ guardian account...');\n        \n        // Lấy dữ liệu tài khoản guardian để lấy public key\n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      \n      if (!guardianAccount) {\n        throw new Error('Không thể tìm thấy thông tin guardian');\n      }\n      \n        // Lấy WebAuthn public key từ guardian account\n        // Giả sử webauthn_pubkey nằm ở vị trí phù hợp trong account data\n        // Offset phụ thuộc vào layout của Anchor account\n        // NOTE: Đây là ví dụ, offset thực tế cần được xác định chính xác dựa trên layout của account\n        // +8 (discriminator) + 32 (wallet) + 8 (guardian_id) + nameLen + 1 (is_active) + 32 (recovery_hash) + 1 (is_owner) = ~82\n        // webauthn_pubkey là Option<[u8; 33]> nên có thêm 1 byte đánh dấu Some(1) hoặc None(0)\n        \n        let webAuthnPubKey: Buffer; \n        // Giả định cho mục đích demo - trong thực tế bạn cần đọc đúng vị trí\n        if (guardianAccount.data.length > 100) {\n          const hasWebAuthnPubKey = guardianAccount.data[83] === 1; // 1 = Some, 0 = None\n          if (hasWebAuthnPubKey) {\n            webAuthnPubKey = Buffer.from(guardianAccount.data.slice(84, 84 + 33));\n          } else {\n            throw new Error('Guardian không có WebAuthn public key trong account data');\n          }\n        } else {\n          // Nếu không thể đọc được dữ liệu, báo lỗi\n          throw new Error('Không thể đọc được public key từ guardian account (dữ liệu quá ngắn)');\n        }\n      } else {\n        // Sử dụng WebAuthn public key từ Firebase\n        console.log('Đã tìm thấy WebAuthn public key trong Firebase:', credentialMapping.guardianPublicKey);\n        // Chuyển đổi từ mảng số về Buffer\n        const webAuthnPubKey = Buffer.from(new Uint8Array(credentialMapping.guardianPublicKey));\n        \n        // Kiểm tra độ dài khóa\n        if (webAuthnPubKey.length !== 33) {\n          console.warn(`WebAuthn public key từ Firebase có độ dài không đúng: ${webAuthnPubKey.length} bytes, cần 33 bytes`);\n        }\n      \n      // Tạo instruction secp256r1\n      setTxStatus(TransactionStatus.BUILDING_TX);\n      \n        // Thêm tham số để thử với public key bị đảo\n      const secp256r1Ix = createSecp256r1Instruction(\n        Buffer.from(messageBytes), // message gốc (không hash)\n        webAuthnPubKey, // publicKey\n        normalizedSignature, // signature đã chuẩn hóa\n        true // Thử đảo public key\n      );\n      \n        console.log(\"Secp256r1 instruction data:\", {\n          programId: secp256r1Ix.programId.toString(),\n          dataLength: secp256r1Ix.data.length,\n          dataHex: Buffer.from(secp256r1Ix.data).toString('hex').substring(0, 60) + '...',\n          pubkeyLength: webAuthnPubKey.length,\n          signatureLength: normalizedSignature.length,\n          messageLength: messageBytes.length\n        });\n        \n        // Tạo ví tạm để trả phí giao dịch\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n        try {\n      const airdropSignature = await connection.requestAirdrop(\n        feePayer.publicKey,\n            web3.LAMPORTS_PER_SOL / 50 // 0.02 SOL để trả phí\n      );\n      await connection.confirmTransaction(airdropSignature);\n      \n          // Kiểm tra số dư sau khi airdrop\n          const feePayerBalance = await connection.getBalance(feePayer.publicKey);\n          console.log(`Fee payer balance: ${feePayerBalance / LAMPORTS_PER_SOL} SOL`);\n          \n          if (feePayerBalance === 0) {\n            throw new Error('Không thể airdrop SOL cho fee payer');\n          }\n        } catch (airdropError) {\n          console.warn('Không thể airdrop SOL để trả phí:', airdropError);\n          // Tiếp tục thực hiện vì có thể account đã có sẵn SOL\n        }\n        \n        // Tạo transaction với verify_and_execute instruction\n      const transferTx = createTransferTx(\n        multisigPDA,\n        guardianPDA,\n        destinationPublicKey,\n        amountLamports,\n        nextNonce,\n        timestamp,\n          Buffer.from(messageBytes), // Sử dụng messageBytes (chưa hash) cho verify_and_execute\n        feePayer.publicKey\n      );\n      \n        // Đặt secp256r1 instruction là ix đầu tiên (phải đứng trước verify_and_execute)\n        transferTx.instructions.unshift(secp256r1Ix);\n      \n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const { blockhash } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n      \n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n        \n        // Log transaction để debug\n        console.log(\"Transaction info:\", {\n          feePayer: feePayer.publicKey.toString(),\n          instructions: transferTx.instructions.map(ix => ({\n            programId: ix.programId.toString(),\n            keys: ix.keys.map(k => ({\n              pubkey: k.pubkey.toString(),\n              isSigner: k.isSigner,\n              isWritable: k.isWritable\n            })),\n            dataSize: ix.data.length\n          }))\n        });\n      \n      // Gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      \n        try {\n          const transactionId = await connection.sendRawTransaction(transferTx.serialize(), {\n            skipPreflight: true, // Bỏ qua preflight để tránh lỗi với instruction phức tạp\n            preflightCommitment: 'confirmed'\n          });\n          \n          console.log('Transaction đã được gửi với ID:', transactionId);\n          \n      setTxId(transactionId);\n      console.log('Transaction ID:', transactionId);\n      \n      // Chờ xác nhận\n      setTxStatus(TransactionStatus.CONFIRMING);\n      \n          const confirmation = await connection.confirmTransaction(transactionId, 'confirmed');\n      \n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n      \n      // Hiển thị thông báo thành công\n      setTxStatus(TransactionStatus.SUCCESS);\n      setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n      setAmount('');\n      setDestinationAddress('');\n      \n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n          }\n        } catch (sendError: any) {\n          // Xử lý lỗi SendTransactionError\n          if (sendError instanceof SendTransactionError) {\n            console.error(\"Transaction simulation failed:\", sendError);\n            console.error(\"Error details:\", sendError.message);\n            \n            if (sendError.logs) {\n              console.error(\"Transaction logs:\", sendError.logs);\n            }\n            \n            // Cố gắng lấy logs chi tiết\n            let logs = \"\";\n            try {\n              if (sendError.logs && Array.isArray(sendError.logs)) {\n                logs = sendError.logs.join('\\n');\n              } else {\n                logs = \"Không có logs chi tiết.\";\n              }\n            } catch (logError) {\n              logs = \"Không thể lấy logs chi tiết.\";\n            }\n            \n            // Phân tích lỗi để đưa ra hướng dẫn cụ thể\n            let errorMessage = `Lỗi khi gửi giao dịch: ${sendError.message}\\n\\n`;\n            \n            if (logs.includes(\"Attempt to load a program that does not exist\")) {\n              // Xử lý lỗi chương trình không tồn tại\n              if (logs.includes(programID.toString())) {\n                errorMessage += `Chương trình MoonWallet chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${programID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${programID.toString()} path/to/moon_wallet.so`;\n              } else if (logs.includes(SECP256R1_PROGRAM_ID.toString())) {\n                errorMessage += `Chương trình Secp256r1 chưa được cài đặt trên validator.\\n`;\n                errorMessage += `Địa chỉ chương trình: ${SECP256R1_PROGRAM_ID.toString()}\\n\\n`;\n                errorMessage += `Hãy cài đặt chương trình với lệnh:\\n`;\n                errorMessage += `solana-test-validator --bpf-program ${SECP256R1_PROGRAM_ID.toString()} path/to/secp256r1_verify.so`;\n              } else {\n                errorMessage += `Một chương trình cần thiết không tồn tại trên validator.\\n\\n`;\n                errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n                errorMessage += `Thông tin kết nối:\\n`;\n                errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              }\n            } else {\n              // Lỗi khác\n              errorMessage += `Chi tiết lỗi: ${logs}\\n\\n`;\n              errorMessage += `Thông tin kết nối:\\n`;\n              errorMessage += `- Endpoint validator: ${connectionEndpoint}\\n`;\n              errorMessage += `- MoonWallet Program: ${isMoonWalletAvailable ? '✅ Đã cài đặt' : '❌ Chưa cài đặt'} (${programID.toString()})`;\n            }\n            \n            throw new Error(errorMessage);\n          } else {\n            throw sendError;\n          }\n        }\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n      \n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  \n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n  \n  // Hiển thị ghi chú về validator cục bộ\n  const renderValidatorNote = () => {\n    if (connectionEndpoint.includes('localhost') || connectionEndpoint.includes('127.0.0.1')) {\n      return (\n        <div className=\"info-note\">\n          <p><strong>Lưu ý:</strong> Bạn đang kết nối đến validator cục bộ.</p>\n          <p>Cần khởi động validator với các tham số đúng để cài đặt chương trình MoonWallet:</p>\n          <pre>\n            solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n          </pre>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  // Thêm các hàm tiện ích\n  const findMultisigPDA = async () => {\n    const credentialId = localStorage.getItem('currentCredentialId');\n    if (!credentialId) {\n      throw new Error(\"Không tìm thấy credential ID\");\n    }\n    return getMultisigPDA(credentialId);\n  };\n\n  const findGuardianPDA = async (multisigPDA: PublicKey, guardianId: number) => {\n    return getGuardianPDA(multisigPDA, guardianId);\n  };\n\n  // Hàm chuyển đổi base64Url thành Buffer\n  const base64UrlToBuffer = (base64Url: string): ArrayBuffer => {\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const binaryString = window.atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  };\n  \n  return (\n    <div className=\"transfer-form\">\n      <h2>Chuyển SOL</h2>\n      \n      <div className=\"wallet-info\">\n        <p>Kết nối đến: <strong>{connectionEndpoint}</strong></p>\n        <p>Số dư hiện tại: <strong>{pdaBalance.toFixed(5)} SOL</strong></p>\n        \n        {/* Hiển thị trạng thái MoonWallet program */}\n        <div className={!isMoonWalletAvailable ? \"warning-message\" : \"info-message\"}>\n          <p><strong>Trạng thái chương trình:</strong></p>\n          <ul>\n            <li>\n              <span className={isMoonWalletAvailable ? \"status-ok\" : \"status-error\"}>\n                {isMoonWalletAvailable ? '✅' : '❌'}\n              </span> \n              MoonWallet: <code>{programID.toString()}</code>\n            </li>\n          </ul>\n          \n          {renderValidatorNote()}\n          \n          {!isMoonWalletAvailable && (\n            <div>\n              <p><strong>Lưu ý:</strong> Chương trình MoonWallet chưa được cài đặt trên validator.</p>\n              <p>Để cài đặt, chạy validator với lệnh:</p>\n              <pre>\n                solana-test-validator --bpf-program {programID.toString()} path/to/moon_wallet.so\n              </pre>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"destination\">Địa chỉ đích:</label>\n          <input\n            type=\"text\"\n            id=\"destination\"\n            value={destinationAddress}\n            onChange={handleDestinationChange}\n            placeholder=\"Nhập địa chỉ Solana\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Số lượng SOL:</label>\n          <input\n            type=\"text\"\n            id=\"amount\"\n            value={amount}\n            onChange={handleAmountChange}\n            placeholder=\"Ví dụ: 0.1\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        {success && <div className=\"success-message\">{success}</div>}\n        {error && <div className=\"error-message\">{error}</div>}\n        \n        {txStatus !== TransactionStatus.IDLE && (\n          <div className=\"status-message\">\n            <p>{renderStatusMessage()}</p>\n            {txStatus === TransactionStatus.CONFIRMING && (\n              <div className=\"loading-indicator\">Đang xác nhận...</div>\n            )}\n            {txId && (\n              <p className=\"transaction-id\">\n                ID Giao dịch: <a href={`https://explorer.solana.com/tx/${txId}`} target=\"_blank\" rel=\"noopener noreferrer\">{txId.slice(0, 8)}...{txId.slice(-8)}</a>\n              </p>\n            )}\n          </div>\n        )}\n        \n        <button \n          type=\"submit\" \n          className=\"primary-button\" \n          disabled={isTransferring || !isMoonWalletAvailable}\n        >\n          {isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'}\n        </button>\n      </form>\n      \n      <style>\n        {`\n          .success-message, .error-message, .warning-message, .info-message {\n            margin: 12px 0;\n            padding: 10px;\n            border-radius: 4px;\n            font-weight: 500;\n          }\n          \n          .success-message {\n            background-color: rgba(0, 200, 83, 0.1);\n            color: #00C853;\n            border: 1px solid #00C853;\n          }\n          \n          .error-message {\n            background-color: rgba(255, 87, 34, 0.1);\n            color: #FF5722;\n            border: 1px solid #FF5722;\n          }\n          \n          .warning-message {\n            background-color: rgba(255, 152, 0, 0.1);\n            color: #FF9800;\n            border: 1px solid #FF9800;\n          }\n          \n          .info-message {\n            background-color: rgba(33, 150, 243, 0.1);\n            color: #333;\n            border: 1px solid #2196F3;\n          }\n          \n          .status-message {\n            margin: 12px 0;\n            padding: 10px;\n            background-color: rgba(33, 150, 243, 0.1);\n            border: 1px solid #2196F3;\n            border-radius: 4px;\n            color: #2196F3;\n          }\n          \n          .loading-indicator {\n            margin-top: 8px;\n            font-style: italic;\n          }\n          \n          .transaction-id {\n            margin-top: 8px;\n            word-break: break-all;\n            font-size: 14px;\n          }\n          \n          .transaction-id a {\n            color: #2196F3;\n            text-decoration: none;\n          }\n          \n          .transaction-id a:hover {\n            text-decoration: underline;\n          }\n          \n          .status-ok {\n            color: #00C853;\n          }\n          \n          .status-error {\n            color: #FF5722;\n          }\n          \n          pre {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n            font-size: 12px;\n          }\n          \n          ul {\n            padding-left: 20px;\n          }\n          \n          code {\n            font-family: monospace;\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 2px;\n          }\n          \n          .info-note {\n            margin-top: 12px;\n            padding: 8px;\n            background-color: #f8f9fa;\n            border-left: 4px solid #2196F3;\n            font-size: 0.9em;\n          }\n        `}\n      </style>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}