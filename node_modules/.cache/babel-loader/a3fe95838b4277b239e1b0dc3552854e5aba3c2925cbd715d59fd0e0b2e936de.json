{"ast":null,"code":"var _jsxFileName = \"/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createTransferTx, createSecp256r1Instruction } from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\n\n// Interface cho props của component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Enum cho các trạng thái giao dịch\nvar TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[\"IDLE\"] = \"idle\";\n  TransactionStatus[\"PREPARING\"] = \"preparing\";\n  TransactionStatus[\"SIGNING\"] = \"signing\";\n  TransactionStatus[\"BUILDING_TX\"] = \"building_tx\";\n  TransactionStatus[\"SUBMITTING\"] = \"submitting\";\n  TransactionStatus[\"CONFIRMING\"] = \"confirming\";\n  TransactionStatus[\"SUCCESS\"] = \"success\";\n  TransactionStatus[\"ERROR\"] = \"error\";\n  return TransactionStatus;\n}(TransactionStatus || {});\nexport const TransferForm = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  _s();\n  // State\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [isTransferring, setIsTransferring] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [nonce, setNonce] = useState(0);\n  const [txStatus, setTxStatus] = useState(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState('');\n\n  // Xóa dòng này vì đã nhận connection từ props\n  // const { connection } = useConnection();\n\n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n\n  // Lấy số dư ví và nonce hiện tại - giữ nguyên nếu vẫn cần lấy nonce\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n\n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n\n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n\n        // Chỉ cập nhật nonce từ accountInfo, không cập nhật balance nữa vì đã có pdaBalance\n        // const balance = await connection.getBalance(multisigPDA);\n        // setWalletBalance(balance / LAMPORTS_PER_SOL);\n\n        // Tạm thời đặt nonce = 0 cho demo\n        setNonce(0);\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n\n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = e => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n\n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = e => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n\n  // Xử lý khi submit form - cập nhật phần check balance để sử dụng pdaBalance từ props\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    try {\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n\n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n\n      // Kiểm tra số dư - sử dụng pdaBalance từ props thay vì walletBalance từ state\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n\n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n\n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n\n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n\n      // Tạo message chuẩn cho giao dịch chuyển tiền\n      const messageString = `transfer:${amount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message chuẩn:', messageString);\n\n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n\n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n\n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n\n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n\n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n\n      // Hiển thị thông báo để người dùng biết cần xác thực\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n\n      // Ký message bằng WebAuthn - truyền null cho credentialId để hiển thị danh sách tất cả credentials\n      const assertion = await getWebAuthnAssertion(null, messageString, true);\n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      console.log('Đã ký thành công bằng WebAuthn');\n\n      // Sử dụng kết quả từ WebAuthn assertion\n      const signature = Buffer.from(assertion.signature);\n\n      // Lấy khóa WebAuthn thực từ localStorage thay vì tạo khóa giả mạo\n      // Tìm credential tương ứng từ localStorage\n      let publicKey;\n      try {\n        const credentialsListStr = localStorage.getItem('webauthnCredentials');\n        if (credentialsListStr) {\n          const credentialsList = JSON.parse(credentialsListStr);\n          // Lấy credential đầu tiên hoặc khớp với credentialId nếu có\n          const credential = credentialsList.find(cred => cred.walletAddress === walletAddress) || credentialsList[0];\n          if (credential) {\n            console.log('Đã tìm thấy credential:', credential);\n            publicKey = Buffer.from(credential.publicKey, 'hex');\n            console.log('Sử dụng public key từ credential đã lưu:', credential.publicKey);\n          } else {\n            throw new Error('Không tìm thấy credentials phù hợp trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy credentials nào trong localStorage');\n        }\n      } catch (error) {\n        console.error('Lỗi khi tìm kiếm credentials:', error);\n        // Tạo khóa tạm thời nếu không tìm thấy (KHÔNG NÊN SỬ DỤNG TRONG SẢN PHẨM THỰC TẾ)\n        console.warn('Tạo khóa tạm thời do không tìm thấy credential - CHỈ CHO MỤC ĐÍCH DEMO');\n        publicKey = Buffer.alloc(33); // Compressed public key (33 bytes)\n        publicKey[0] = 0x02; // Compressed key bắt đầu với 0x02 hoặc 0x03\n        crypto.getRandomValues(publicKey.slice(1)); // Điền phần còn lại bằng dữ liệu ngẫu nhiên\n      }\n\n      // Lấy guardian public key từ guardianPDA\n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      if (!guardianAccount) {\n        throw new Error('Không thể tìm thấy thông tin guardian');\n      }\n\n      // Tạo instruction secp256r1\n      setTxStatus(TransactionStatus.BUILDING_TX);\n      const secp256r1Ix = createSecp256r1Instruction(publicKey, signature, Buffer.from(messageHashBytes));\n\n      // Fee payer (tạm thời là keypair ngẫu nhiên)\n      const feePayer = web3.Keypair.generate();\n\n      // Xin SOL airdrop để trả phí\n      const airdropSignature = await connection.requestAirdrop(feePayer.publicKey, web3.LAMPORTS_PER_SOL / 100 // 0.01 SOL để trả phí\n      );\n      await connection.confirmTransaction(airdropSignature);\n\n      // Tạo instruction verify_and_execute\n      const transferTx = createTransferTx(multisigPDA, guardianPDA, destinationPublicKey, amountLamports, nextNonce, timestamp, messageBytes, feePayer.publicKey);\n\n      // Thêm cả hai instruction vào transaction\n      transferTx.add(secp256r1Ix);\n\n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const {\n        blockhash\n      } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n\n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n\n      // Gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      const transactionId = await connection.sendRawTransaction(transferTx.serialize());\n      setTxId(transactionId);\n      console.log('Transaction ID:', transactionId);\n\n      // Chờ xác nhận\n      setTxStatus(TransactionStatus.CONFIRMING);\n      const confirmation = await connection.confirmTransaction(transactionId);\n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n\n      // Hiển thị thông báo thành công\n      setTxStatus(TransactionStatus.SUCCESS);\n      setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n      setAmount('');\n      setDestinationAddress('');\n\n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n      }\n    } catch (error) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n\n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n\n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transfer-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chuy\\u1EC3n SOL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"S\\u1ED1 d\\u01B0 hi\\u1EC7n t\\u1EA1i: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pdaBalance.toFixed(5), \" SOL\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"destination\",\n          children: \"\\u0110\\u1ECBa ch\\u1EC9 \\u0111\\xEDch:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"destination\",\n          value: destinationAddress,\n          onChange: handleDestinationChange,\n          placeholder: \"Nh\\u1EADp \\u0111\\u1ECBa ch\\u1EC9 Solana\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"S\\u1ED1 l\\u01B0\\u1EE3ng SOL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amount\",\n          value: amount,\n          onChange: handleAmountChange,\n          placeholder: \"V\\xED d\\u1EE5: 0.1\",\n          disabled: isTransferring,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), txStatus !== TransactionStatus.IDLE && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: renderStatusMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this), txStatus === TransactionStatus.CONFIRMING && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"\\u0110ang x\\xE1c nh\\u1EADn...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 15\n        }, this), txId && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"transaction-id\",\n          children: [\"ID Giao d\\u1ECBch: \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://explorer.solana.com/tx/${txId}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: [txId.slice(0, 8), \"...\", txId.slice(-8)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 19\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"primary-button\",\n        disabled: isTransferring,\n        children: isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n_s(TransferForm, \"bHOohrfcs7j0Hp+XxwhlVfVT/7A=\");\n_c = TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["React","useState","useEffect","PublicKey","web3","LAMPORTS_PER_SOL","createTransferTx","createSecp256r1Instruction","getWebAuthnAssertion","getGuardianPDA","getMultisigPDA","jsxDEV","_jsxDEV","TransactionStatus","TransferForm","walletAddress","credentialId","guardianId","onTransferSuccess","onTransferError","connection","pdaBalance","_s","destinationAddress","setDestinationAddress","amount","setAmount","isTransferring","setIsTransferring","error","setError","success","setSuccess","walletBalance","setWalletBalance","nonce","setNonce","txStatus","setTxStatus","IDLE","txId","setTxId","undefined","loadWalletInfo","multisigPDA","accountInfo","getAccountInfo","console","handleDestinationChange","e","target","value","handleAmountChange","test","handleSubmit","preventDefault","PREPARING","Error","parseFloat","amountLamports","Math","floor","destinationPublicKey","nextNonce","timestamp","Date","now","messageString","log","messageBytes","TextEncoder","encode","messageHash","crypto","subtle","digest","messageHashBytes","Uint8Array","toBase58","guardianPDA","SIGNING","assertion","signature","Buffer","from","publicKey","credentialsListStr","localStorage","getItem","credentialsList","JSON","parse","credential","find","cred","warn","alloc","getRandomValues","slice","guardianAccount","BUILDING_TX","secp256r1Ix","feePayer","Keypair","generate","airdropSignature","requestAirdrop","confirmTransaction","transferTx","add","blockhash","getLatestBlockhash","recentBlockhash","sign","SUBMITTING","transactionId","sendRawTransaction","serialize","CONFIRMING","confirmation","err","stringify","SUCCESS","message","ERROR","renderStatusMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onSubmit","htmlFor","type","id","onChange","placeholder","disabled","required","href","rel","_c","$RefreshReg$"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/frontend_test/src/components/TransferForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicKey, Transaction, Connection } from '@solana/web3.js';\nimport { web3 } from '@coral-xyz/anchor';\n// Xóa useConnection hook vì sẽ nhận connection từ props\n// import { useConnection } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { \n  createTransferTx, \n  createSecp256r1Instruction \n} from '../utils/transactionUtils';\nimport { getWebAuthnAssertion } from '../utils/webauthnUtils';\nimport { getGuardianPDA, getMultisigPDA } from '../utils/credentialUtils';\n\n// Interface cho props của component\ninterface TransferFormProps {\n  walletAddress: string;  \n  credentialId: string;   \n  guardianId: number;     \n  onTransferSuccess?: () => void;\n  onTransferError?: (error: Error) => void;\n  // Thêm connection vào props\n  connection: Connection;\n  // Thêm pdaBalance để hiển thị số dư chính xác\n  pdaBalance?: number;\n}\n\n// Enum cho các trạng thái giao dịch\nenum TransactionStatus {\n  IDLE = 'idle',\n  PREPARING = 'preparing',\n  SIGNING = 'signing',\n  BUILDING_TX = 'building_tx',\n  SUBMITTING = 'submitting',\n  CONFIRMING = 'confirming',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\nexport const TransferForm: React.FC<TransferFormProps> = ({\n  walletAddress,\n  credentialId,\n  guardianId,\n  onTransferSuccess,\n  onTransferError,\n  // Thêm connection và pdaBalance vào tham số destructuring\n  connection,\n  pdaBalance = 0\n}) => {\n  // State\n  const [destinationAddress, setDestinationAddress] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [isTransferring, setIsTransferring] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [nonce, setNonce] = useState<number>(0);\n  const [txStatus, setTxStatus] = useState<TransactionStatus>(TransactionStatus.IDLE);\n  const [txId, setTxId] = useState<string>('');\n  \n  // Xóa dòng này vì đã nhận connection từ props\n  // const { connection } = useConnection();\n  \n  // Cập nhật walletBalance khi pdaBalance thay đổi\n  useEffect(() => {\n    if (pdaBalance !== undefined) {\n      setWalletBalance(pdaBalance);\n    }\n  }, [pdaBalance]);\n  \n  // Lấy số dư ví và nonce hiện tại - giữ nguyên nếu vẫn cần lấy nonce\n  useEffect(() => {\n    const loadWalletInfo = async () => {\n      try {\n        if (!walletAddress) return;\n        \n        // Tính PDA của ví từ credential ID\n        const multisigPDA = await getMultisigPDA(credentialId);\n        \n        // Lấy thông tin account\n        const accountInfo = await connection.getAccountInfo(multisigPDA);\n        \n        if (!accountInfo) {\n          console.error('Không tìm thấy thông tin ví');\n          return;\n        }\n        \n        // Chỉ cập nhật nonce từ accountInfo, không cập nhật balance nữa vì đã có pdaBalance\n        // const balance = await connection.getBalance(multisigPDA);\n        // setWalletBalance(balance / LAMPORTS_PER_SOL);\n        \n        // Tạm thời đặt nonce = 0 cho demo\n        setNonce(0);\n      } catch (error) {\n        console.error('Lỗi khi tải thông tin ví:', error);\n      }\n    };\n    \n    loadWalletInfo();\n  }, [walletAddress, credentialId, connection]);\n  \n  // Xử lý khi nhập địa chỉ đích\n  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinationAddress(e.target.value);\n    // Reset thông báo lỗi và thành công\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.IDLE);\n    setTxId('');\n  };\n  \n  // Xử lý khi nhập số lượng SOL\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Chỉ cho phép nhập số dương và dấu chấm (số thập phân)\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      setAmount(value);\n      // Reset thông báo lỗi và thành công\n      setError('');\n      setSuccess('');\n      setTxStatus(TransactionStatus.IDLE);\n      setTxId('');\n    }\n  };\n  \n  // Xử lý khi submit form - cập nhật phần check balance để sử dụng pdaBalance từ props\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    setIsTransferring(true);\n    setError('');\n    setSuccess('');\n    setTxStatus(TransactionStatus.PREPARING);\n    setTxId('');\n    \n    try {\n      // Kiểm tra đầu vào\n      if (!destinationAddress) {\n        throw new Error('Vui lòng nhập địa chỉ đích');\n      }\n      \n      if (!amount || parseFloat(amount) <= 0) {\n        throw new Error('Vui lòng nhập số lượng SOL hợp lệ');\n      }\n      \n      // Chuyển đổi số lượng SOL sang lamports\n      const amountLamports = Math.floor(parseFloat(amount) * LAMPORTS_PER_SOL);\n      \n      // Kiểm tra số dư - sử dụng pdaBalance từ props thay vì walletBalance từ state\n      if (amountLamports > pdaBalance * LAMPORTS_PER_SOL) {\n        throw new Error('Số dư không đủ để thực hiện giao dịch');\n      }\n      \n      // Kiểm tra địa chỉ hợp lệ\n      let destinationPublicKey: PublicKey;\n      try {\n        destinationPublicKey = new PublicKey(destinationAddress);\n      } catch (error) {\n        throw new Error('Địa chỉ đích không hợp lệ');\n      }\n      \n      // Thêm 1 vào nonce hiện tại\n      const nextNonce = nonce + 1;\n      \n      // Lấy timestamp hiện tại (giây)\n      const timestamp = Math.floor(Date.now() / 1000);\n      \n      // Tạo message chuẩn cho giao dịch chuyển tiền\n      const messageString = `transfer:${amount}_SOL_to_${destinationAddress},nonce:${nextNonce},timestamp:${timestamp}`;\n      console.log('Message chuẩn:', messageString);\n      \n      // Chuyển message thành bytes\n      const messageBytes = new TextEncoder().encode(messageString);\n      \n      // Tính hash của message\n      const messageHash = await crypto.subtle.digest('SHA-256', messageBytes);\n      const messageHashBytes = new Uint8Array(messageHash);\n      \n      // Lấy PDA từ credential ID\n      const multisigPDA = await getMultisigPDA(credentialId);\n      console.log('MultisigPDA:', multisigPDA.toBase58());\n      \n      // Lấy PDA của guardian\n      const guardianPDA = await getGuardianPDA(multisigPDA, guardianId);\n      console.log('GuardianPDA:', guardianPDA.toBase58());\n      \n      // Ký message bằng WebAuthn\n      setTxStatus(TransactionStatus.SIGNING);\n      \n      // Hiển thị thông báo để người dùng biết cần xác thực\n      console.log('Đang yêu cầu xác thực WebAuthn...');\n      \n      // Ký message bằng WebAuthn - truyền null cho credentialId để hiển thị danh sách tất cả credentials\n      const assertion = await getWebAuthnAssertion(null as any, messageString, true);\n      \n      if (!assertion) {\n        throw new Error('Lỗi khi ký message bằng WebAuthn hoặc người dùng đã hủy xác thực');\n      }\n      \n      console.log('Đã ký thành công bằng WebAuthn');\n      \n      // Sử dụng kết quả từ WebAuthn assertion\n      const signature = Buffer.from(assertion.signature);\n      \n      // Lấy khóa WebAuthn thực từ localStorage thay vì tạo khóa giả mạo\n      // Tìm credential tương ứng từ localStorage\n      let publicKey;\n      try {\n        const credentialsListStr = localStorage.getItem('webauthnCredentials');\n        if (credentialsListStr) {\n          const credentialsList = JSON.parse(credentialsListStr);\n          // Lấy credential đầu tiên hoặc khớp với credentialId nếu có\n          const credential = credentialsList.find((cred: any) => cred.walletAddress === walletAddress) || credentialsList[0];\n          if (credential) {\n            console.log('Đã tìm thấy credential:', credential);\n            publicKey = Buffer.from(credential.publicKey, 'hex');\n            console.log('Sử dụng public key từ credential đã lưu:', credential.publicKey);\n          } else {\n            throw new Error('Không tìm thấy credentials phù hợp trong localStorage');\n          }\n        } else {\n          throw new Error('Không tìm thấy credentials nào trong localStorage');\n        }\n      } catch (error) {\n        console.error('Lỗi khi tìm kiếm credentials:', error);\n        // Tạo khóa tạm thời nếu không tìm thấy (KHÔNG NÊN SỬ DỤNG TRONG SẢN PHẨM THỰC TẾ)\n        console.warn('Tạo khóa tạm thời do không tìm thấy credential - CHỈ CHO MỤC ĐÍCH DEMO');\n        publicKey = Buffer.alloc(33); // Compressed public key (33 bytes)\n        publicKey[0] = 0x02; // Compressed key bắt đầu với 0x02 hoặc 0x03\n        crypto.getRandomValues(publicKey.slice(1)); // Điền phần còn lại bằng dữ liệu ngẫu nhiên\n      }\n      \n      // Lấy guardian public key từ guardianPDA\n      const guardianAccount = await connection.getAccountInfo(guardianPDA);\n      \n      if (!guardianAccount) {\n        throw new Error('Không thể tìm thấy thông tin guardian');\n      }\n      \n      // Tạo instruction secp256r1\n      setTxStatus(TransactionStatus.BUILDING_TX);\n      \n      const secp256r1Ix = createSecp256r1Instruction(\n        publicKey,\n        signature,\n        Buffer.from(messageHashBytes)\n      );\n      \n      // Fee payer (tạm thời là keypair ngẫu nhiên)\n      const feePayer = web3.Keypair.generate();\n      \n      // Xin SOL airdrop để trả phí\n      const airdropSignature = await connection.requestAirdrop(\n        feePayer.publicKey,\n        web3.LAMPORTS_PER_SOL / 100 // 0.01 SOL để trả phí\n      );\n      await connection.confirmTransaction(airdropSignature);\n      \n      // Tạo instruction verify_and_execute\n      const transferTx = createTransferTx(\n        multisigPDA,\n        guardianPDA,\n        destinationPublicKey,\n        amountLamports,\n        nextNonce,\n        timestamp,\n        messageBytes,\n        feePayer.publicKey\n      );\n      \n      // Thêm cả hai instruction vào transaction\n      transferTx.add(secp256r1Ix);\n      \n      // Đặt fee payer và blockhash\n      transferTx.feePayer = feePayer.publicKey;\n      const { blockhash } = await connection.getLatestBlockhash();\n      transferTx.recentBlockhash = blockhash;\n      \n      // Ký transaction bằng fee payer\n      transferTx.sign(feePayer);\n      \n      // Gửi transaction\n      setTxStatus(TransactionStatus.SUBMITTING);\n      \n      const transactionId = await connection.sendRawTransaction(transferTx.serialize());\n      setTxId(transactionId);\n      console.log('Transaction ID:', transactionId);\n      \n      // Chờ xác nhận\n      setTxStatus(TransactionStatus.CONFIRMING);\n      \n      const confirmation = await connection.confirmTransaction(transactionId);\n      \n      if (confirmation.value.err) {\n        throw new Error(`Lỗi khi xác nhận giao dịch: ${JSON.stringify(confirmation.value.err)}`);\n      }\n      \n      // Hiển thị thông báo thành công\n      setTxStatus(TransactionStatus.SUCCESS);\n      setSuccess(`Đã chuyển ${amount} SOL đến ${destinationAddress} thành công! ID giao dịch: ${transactionId}`);\n      setAmount('');\n      setDestinationAddress('');\n      \n      // Gọi callback nếu có\n      if (onTransferSuccess) {\n        onTransferSuccess();\n      }\n    } catch (error: any) {\n      console.error('Lỗi khi chuyển tiền:', error);\n      setError(error.message || 'Đã xảy ra lỗi khi chuyển tiền');\n      setTxStatus(TransactionStatus.ERROR);\n      \n      // Gọi callback lỗi nếu có\n      if (onTransferError) {\n        onTransferError(error);\n      }\n    } finally {\n      setIsTransferring(false);\n    }\n  };\n  \n  // Render status message dựa trên txStatus\n  const renderStatusMessage = () => {\n    switch (txStatus) {\n      case TransactionStatus.PREPARING:\n        return 'Đang chuẩn bị giao dịch...';\n      case TransactionStatus.SIGNING:\n        return 'Vui lòng xác thực bằng WebAuthn (vân tay hoặc Face ID) khi được yêu cầu...';\n      case TransactionStatus.BUILDING_TX:\n        return 'Đang xây dựng giao dịch...';\n      case TransactionStatus.SUBMITTING:\n        return 'Đang gửi giao dịch lên blockchain...';\n      case TransactionStatus.CONFIRMING:\n        return 'Đang chờ xác nhận giao dịch...';\n      case TransactionStatus.SUCCESS:\n        return 'Giao dịch thành công!';\n      case TransactionStatus.ERROR:\n        return 'Giao dịch thất bại!';\n      default:\n        return '';\n    }\n  };\n  \n  return (\n    <div className=\"transfer-form\">\n      <h2>Chuyển SOL</h2>\n      \n      <div className=\"wallet-info\">\n        <p>Số dư hiện tại: <strong>{pdaBalance.toFixed(5)} SOL</strong></p>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"destination\">Địa chỉ đích:</label>\n          <input\n            type=\"text\"\n            id=\"destination\"\n            value={destinationAddress}\n            onChange={handleDestinationChange}\n            placeholder=\"Nhập địa chỉ Solana\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Số lượng SOL:</label>\n          <input\n            type=\"text\"\n            id=\"amount\"\n            value={amount}\n            onChange={handleAmountChange}\n            placeholder=\"Ví dụ: 0.1\"\n            disabled={isTransferring}\n            required\n          />\n        </div>\n        \n        {txStatus !== TransactionStatus.IDLE && (\n          <div className=\"status-message\">\n            <p>{renderStatusMessage()}</p>\n            {txStatus === TransactionStatus.CONFIRMING && (\n              <div className=\"loading-indicator\">Đang xác nhận...</div>\n            )}\n            {txId && (\n              <p className=\"transaction-id\">\n                ID Giao dịch: <a href={`https://explorer.solana.com/tx/${txId}`} target=\"_blank\" rel=\"noopener noreferrer\">{txId.slice(0, 8)}...{txId.slice(-8)}</a>\n              </p>\n            )}\n          </div>\n        )}\n        \n        {error && <div className=\"error-message\">{error}</div>}\n        {success && <div className=\"success-message\">{success}</div>}\n        \n        <button \n          type=\"submit\" \n          className=\"primary-button\" \n          disabled={isTransferring}\n        >\n          {isTransferring ? 'Đang xử lý...' : 'Chuyển SOL'}\n        </button>\n      </form>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}