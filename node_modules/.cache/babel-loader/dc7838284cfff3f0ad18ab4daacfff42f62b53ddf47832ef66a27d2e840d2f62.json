{"ast":null,"code":"import { PublicKey, Transaction, TransactionInstruction, SystemProgram, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\n\n// Hàm chuyển đổi Buffer sang Uint8Array\nfunction bufferToUint8Array(buffer) {\n  return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n\n// Hàm concat cho Uint8Array\nfunction concatUint8Arrays(...arrays) {\n  // Tính tổng độ dài\n  const totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);\n\n  // Tạo mảng mới với tổng độ dài\n  const result = new Uint8Array(totalLength);\n\n  // Copy dữ liệu vào mảng mới\n  let offset = 0;\n  for (const arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\n\n// Hàm chuyển đổi từ BigInt (u64) sang bytes theo thứ tự little-endian\nconst bigIntToLeBytes = (value, bytesLength = 8) => {\n  const result = new Uint8Array(bytesLength);\n  for (let i = 0; i < bytesLength; i++) {\n    result[i] = Number(value >> BigInt(8 * i) & BigInt(0xff));\n  }\n  return result;\n};\n\n/**\n * Chuyển tiền từ ví multisig đến địa chỉ đích\n * @param connection Kết nối Solana\n * @param multisigAddress Địa chỉ ví multisig\n * @param recipientAddress Địa chỉ người nhận\n * @param amount Số lượng SOL cần chuyển\n * @param feePayer Keypair dùng để trả phí\n * @param programId Program ID của smart contract\n * @returns Chữ ký giao dịch\n */\nexport const transferFunds = async (connection, multisigAddress, recipientAddress, amount, feePayer, programId) => {\n  // Kiểm tra địa chỉ người nhận\n  let recipient;\n  try {\n    recipient = new PublicKey(recipientAddress);\n  } catch (error) {\n    throw new Error('Địa chỉ người nhận không hợp lệ.');\n  }\n\n  // Kiểm tra số dư của ví multisig\n  const multisigBalance = await connection.getBalance(multisigAddress);\n  const lamportsToSend = amount * LAMPORTS_PER_SOL;\n  if (multisigBalance < lamportsToSend) {\n    throw new Error(`Số dư ví không đủ. Hiện tại: ${multisigBalance / LAMPORTS_PER_SOL} SOL`);\n  }\n\n  // Tạo discriminator cho withdraw\n  const withdrawDiscriminator = new Uint8Array([54, 27, 38, 179, 114, 92, 92, 82]);\n\n  // Số tiền chuyển (u64)\n  const amountBigInt = BigInt(Math.floor(amount * LAMPORTS_PER_SOL));\n  const amountBytes = bigIntToLeBytes(amountBigInt);\n\n  // Tạo dữ liệu instruction\n  const withdrawData = concatUint8Arrays(withdrawDiscriminator,\n  // amount (u64)\n  amountBytes);\n\n  // Tạo transaction chuyển tiền\n  const transferTransaction = new Transaction();\n  transferTransaction.add(new TransactionInstruction({\n    keys: [{\n      pubkey: multisigAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: recipient,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: feePayer.publicKey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }],\n    programId: programId,\n    data: Buffer.from(withdrawData)\n  }));\n\n  // Sign và gửi transaction\n  transferTransaction.feePayer = feePayer.publicKey;\n  transferTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  const transferSignature = await connection.sendTransaction(transferTransaction, [feePayer]);\n\n  // Đợi xác nhận\n  await connection.confirmTransaction(transferSignature);\n  return transferSignature;\n};","map":{"version":3,"names":["PublicKey","Transaction","TransactionInstruction","SystemProgram","LAMPORTS_PER_SOL","Buffer","bufferToUint8Array","buffer","Uint8Array","byteOffset","byteLength","concatUint8Arrays","arrays","totalLength","reduce","acc","arr","length","result","offset","set","bigIntToLeBytes","value","bytesLength","i","Number","BigInt","transferFunds","connection","multisigAddress","recipientAddress","amount","feePayer","programId","recipient","error","Error","multisigBalance","getBalance","lamportsToSend","withdrawDiscriminator","amountBigInt","Math","floor","amountBytes","withdrawData","transferTransaction","add","keys","pubkey","isSigner","isWritable","publicKey","data","from","recentBlockhash","getLatestBlockhash","blockhash","transferSignature","sendTransaction","confirmTransaction"],"sources":["/Users/tai/Documents/MoonWallet/moonwallet/acacac/src/utils/transferUtils.ts"],"sourcesContent":["import { \n  Connection,\n  PublicKey,\n  Keypair,\n  Transaction,\n  TransactionInstruction,\n  SystemProgram,\n  LAMPORTS_PER_SOL\n} from '@solana/web3.js';\nimport { Buffer } from 'buffer';\n\n// Hàm chuyển đổi Buffer sang Uint8Array\nfunction bufferToUint8Array(buffer: Buffer): Uint8Array {\n  return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n\n// Hàm concat cho Uint8Array\nfunction concatUint8Arrays(...arrays: Uint8Array[]): Uint8Array {\n  // Tính tổng độ dài\n  const totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);\n  \n  // Tạo mảng mới với tổng độ dài\n  const result = new Uint8Array(totalLength);\n  \n  // Copy dữ liệu vào mảng mới\n  let offset = 0;\n  for (const arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  \n  return result;\n}\n\n// Hàm chuyển đổi từ BigInt (u64) sang bytes theo thứ tự little-endian\nconst bigIntToLeBytes = (value: bigint, bytesLength: number = 8): Uint8Array => {\n  const result = new Uint8Array(bytesLength);\n  for (let i = 0; i < bytesLength; i++) {\n    result[i] = Number((value >> BigInt(8 * i)) & BigInt(0xff));\n  }\n  return result;\n};\n\n/**\n * Chuyển tiền từ ví multisig đến địa chỉ đích\n * @param connection Kết nối Solana\n * @param multisigAddress Địa chỉ ví multisig\n * @param recipientAddress Địa chỉ người nhận\n * @param amount Số lượng SOL cần chuyển\n * @param feePayer Keypair dùng để trả phí\n * @param programId Program ID của smart contract\n * @returns Chữ ký giao dịch\n */\nexport const transferFunds = async (\n  connection: Connection,\n  multisigAddress: PublicKey,\n  recipientAddress: string,\n  amount: number,\n  feePayer: Keypair,\n  programId: PublicKey\n): Promise<string> => {\n  // Kiểm tra địa chỉ người nhận\n  let recipient: PublicKey;\n  try {\n    recipient = new PublicKey(recipientAddress);\n  } catch (error) {\n    throw new Error('Địa chỉ người nhận không hợp lệ.');\n  }\n  \n  // Kiểm tra số dư của ví multisig\n  const multisigBalance = await connection.getBalance(multisigAddress);\n  const lamportsToSend = amount * LAMPORTS_PER_SOL;\n  \n  if (multisigBalance < lamportsToSend) {\n    throw new Error(`Số dư ví không đủ. Hiện tại: ${multisigBalance / LAMPORTS_PER_SOL} SOL`);\n  }\n  \n  // Tạo discriminator cho withdraw\n  const withdrawDiscriminator = new Uint8Array([54, 27, 38, 179, 114, 92, 92, 82]);\n  \n  // Số tiền chuyển (u64)\n  const amountBigInt = BigInt(Math.floor(amount * LAMPORTS_PER_SOL));\n  const amountBytes = bigIntToLeBytes(amountBigInt);\n  \n  // Tạo dữ liệu instruction\n  const withdrawData = concatUint8Arrays(\n    withdrawDiscriminator,\n    // amount (u64)\n    amountBytes\n  );\n  \n  // Tạo transaction chuyển tiền\n  const transferTransaction = new Transaction();\n  transferTransaction.add(\n    new TransactionInstruction({\n      keys: [\n        { pubkey: multisigAddress, isSigner: false, isWritable: true },\n        { pubkey: recipient, isSigner: false, isWritable: true },\n        { pubkey: feePayer.publicKey, isSigner: true, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false }\n      ],\n      programId: programId,\n      data: Buffer.from(withdrawData)\n    })\n  );\n  \n  // Sign và gửi transaction\n  transferTransaction.feePayer = feePayer.publicKey;\n  transferTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  \n  const transferSignature = await connection.sendTransaction(\n    transferTransaction,\n    [feePayer]\n  );\n  \n  // Đợi xác nhận\n  await connection.confirmTransaction(transferSignature);\n  \n  return transferSignature;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}